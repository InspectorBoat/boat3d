pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const GLADapiproc = ?*const fn () callconv(.C) void;
pub const GLADloadfunc = ?*const fn ([*c]const u8) callconv(.C) GLADapiproc;
pub const GLADuserptrloadfunc = ?*const fn (?*anyopaque, [*c]const u8) callconv(.C) GLADapiproc;
pub const GLADprecallback = ?*const fn ([*c]const u8, GLADapiproc, c_int, ...) callconv(.C) void;
pub const GLADpostcallback = ?*const fn (?*anyopaque, [*c]const u8, GLADapiproc, c_int, ...) callconv(.C) void;
pub const __builtin_va_list = [*c]u8;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __gnuc_va_list; // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:590:3: warning: TODO implement translation of stmt class GCCAsmStmtClass
// C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:587:36: warning: unable to translate function, demoted to extern
pub extern fn __debugbreak() void;
pub extern fn __mingw_get_crt_info() [*c]const u8;
pub const rsize_t = usize;
pub const ptrdiff_t = c_longlong;
pub const wchar_t = c_ushort;
pub const wint_t = c_ushort;
pub const wctype_t = c_ushort;
pub const errno_t = c_int;
pub const __time32_t = c_long;
pub const __time64_t = c_longlong;
pub const time_t = __time64_t;
pub const struct_tagLC_ID = extern struct {
    wLanguage: c_ushort,
    wCountry: c_ushort,
    wCodePage: c_ushort,
};
pub const LC_ID = struct_tagLC_ID;
const struct_unnamed_1 = extern struct {
    locale: [*c]u8,
    wlocale: [*c]wchar_t,
    refcount: [*c]c_int,
    wrefcount: [*c]c_int,
};
pub const struct_lconv = opaque {};
pub const struct___lc_time_data = opaque {};
pub const struct_threadlocaleinfostruct = extern struct {
    refcount: c_int,
    lc_codepage: c_uint,
    lc_collate_cp: c_uint,
    lc_handle: [6]c_ulong,
    lc_id: [6]LC_ID,
    lc_category: [6]struct_unnamed_1,
    lc_clike: c_int,
    mb_cur_max: c_int,
    lconv_intl_refcount: [*c]c_int,
    lconv_num_refcount: [*c]c_int,
    lconv_mon_refcount: [*c]c_int,
    lconv: ?*struct_lconv,
    ctype1_refcount: [*c]c_int,
    ctype1: [*c]c_ushort,
    pctype: [*c]const c_ushort,
    pclmap: [*c]const u8,
    pcumap: [*c]const u8,
    lc_time_curr: ?*struct___lc_time_data,
};
pub const struct_threadmbcinfostruct = opaque {};
pub const pthreadlocinfo = [*c]struct_threadlocaleinfostruct;
pub const pthreadmbcinfo = ?*struct_threadmbcinfostruct;
pub const struct_localeinfo_struct = extern struct {
    locinfo: pthreadlocinfo,
    mbcinfo: pthreadmbcinfo,
};
pub const _locale_tstruct = struct_localeinfo_struct;
pub const _locale_t = [*c]struct_localeinfo_struct;
pub const LPLC_ID = [*c]struct_tagLC_ID;
pub const threadlocinfo = struct_threadlocaleinfostruct;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_least16_t = c_short;
pub const uint_least16_t = c_ushort;
pub const int_least32_t = c_int;
pub const uint_least32_t = c_uint;
pub const int_least64_t = c_longlong;
pub const uint_least64_t = c_ulonglong;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const int_fast16_t = c_short;
pub const uint_fast16_t = c_ushort;
pub const int_fast32_t = c_int;
pub const uint_fast32_t = c_uint;
pub const int_fast64_t = c_longlong;
pub const uint_fast64_t = c_ulonglong;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const khronos_int32_t = i32;
pub const khronos_uint32_t = u32;
pub const khronos_int64_t = i64;
pub const khronos_uint64_t = u64;
pub const khronos_int8_t = i8;
pub const khronos_uint8_t = u8;
pub const khronos_int16_t = c_short;
pub const khronos_uint16_t = c_ushort;
pub const khronos_intptr_t = isize;
pub const khronos_uintptr_t = usize;
pub const khronos_ssize_t = c_longlong;
pub const khronos_usize_t = c_ulonglong;
pub const khronos_float_t = f32;
pub const khronos_utime_nanoseconds_t = khronos_uint64_t;
pub const khronos_stime_nanoseconds_t = khronos_int64_t;
pub const KHRONOS_FALSE: c_int = 0;
pub const KHRONOS_TRUE: c_int = 1;
pub const KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: c_int = 2147483647;
pub const khronos_boolean_enum_t = c_uint;
pub const GLenum = c_uint;
pub const GLboolean = u8;
pub const GLbitfield = c_uint;
pub const GLvoid = anyopaque;
pub const GLbyte = khronos_int8_t;
pub const GLubyte = khronos_uint8_t;
pub const GLshort = khronos_int16_t;
pub const GLushort = khronos_uint16_t;
pub const GLint = c_int;
pub const GLuint = c_uint;
pub const GLclampx = khronos_int32_t;
pub const GLsizei = c_int;
pub const GLfloat = khronos_float_t;
pub const GLclampf = khronos_float_t;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub const GLeglClientBufferEXT = ?*anyopaque;
pub const GLeglImageOES = ?*anyopaque;
pub const GLchar = u8;
pub const GLcharARB = u8;
pub const GLhandleARB = c_uint;
pub const GLhalf = khronos_uint16_t;
pub const GLhalfARB = khronos_uint16_t;
pub const GLfixed = khronos_int32_t;
pub const GLintptr = khronos_intptr_t;
pub const GLintptrARB = khronos_intptr_t;
pub const GLsizeiptr = khronos_ssize_t;
pub const GLsizeiptrARB = khronos_ssize_t;
pub const GLint64 = khronos_int64_t;
pub const GLint64EXT = khronos_int64_t;
pub const GLuint64 = khronos_uint64_t;
pub const GLuint64EXT = khronos_uint64_t;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const struct__cl_context = opaque {};
pub const struct__cl_event = opaque {};
pub const GLDEBUGPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const GLDEBUGPROCARB = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const GLDEBUGPROCKHR = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const GLDEBUGPROCAMD = ?*const fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.C) void;
pub const GLhalfNV = c_ushort;
pub const GLvdpauSurfaceNV = GLintptr;
pub const GLVULKANPROCNV = ?*const fn () callconv(.C) void;
pub extern var GLAD_GL_VERSION_1_0: c_int;
pub extern var GLAD_GL_VERSION_1_1: c_int;
pub extern var GLAD_GL_VERSION_1_2: c_int;
pub extern var GLAD_GL_VERSION_1_3: c_int;
pub extern var GLAD_GL_VERSION_1_4: c_int;
pub extern var GLAD_GL_VERSION_1_5: c_int;
pub extern var GLAD_GL_VERSION_2_0: c_int;
pub extern var GLAD_GL_VERSION_2_1: c_int;
pub extern var GLAD_GL_VERSION_3_0: c_int;
pub extern var GLAD_GL_VERSION_3_1: c_int;
pub extern var GLAD_GL_VERSION_3_2: c_int;
pub extern var GLAD_GL_VERSION_3_3: c_int;
pub extern var GLAD_GL_VERSION_4_0: c_int;
pub extern var GLAD_GL_VERSION_4_1: c_int;
pub extern var GLAD_GL_VERSION_4_2: c_int;
pub extern var GLAD_GL_VERSION_4_3: c_int;
pub extern var GLAD_GL_VERSION_4_4: c_int;
pub extern var GLAD_GL_VERSION_4_5: c_int;
pub extern var GLAD_GL_VERSION_4_6: c_int;
pub extern var GLAD_GL_3DFX_multisample: c_int;
pub extern var GLAD_GL_3DFX_tbuffer: c_int;
pub extern var GLAD_GL_3DFX_texture_compression_FXT1: c_int;
pub extern var GLAD_GL_AMD_blend_minmax_factor: c_int;
pub extern var GLAD_GL_AMD_conservative_depth: c_int;
pub extern var GLAD_GL_AMD_debug_output: c_int;
pub extern var GLAD_GL_AMD_depth_clamp_separate: c_int;
pub extern var GLAD_GL_AMD_draw_buffers_blend: c_int;
pub extern var GLAD_GL_AMD_framebuffer_multisample_advanced: c_int;
pub extern var GLAD_GL_AMD_framebuffer_sample_positions: c_int;
pub extern var GLAD_GL_AMD_gcn_shader: c_int;
pub extern var GLAD_GL_AMD_gpu_shader_half_float: c_int;
pub extern var GLAD_GL_AMD_gpu_shader_int16: c_int;
pub extern var GLAD_GL_AMD_gpu_shader_int64: c_int;
pub extern var GLAD_GL_AMD_interleaved_elements: c_int;
pub extern var GLAD_GL_AMD_multi_draw_indirect: c_int;
pub extern var GLAD_GL_AMD_name_gen_delete: c_int;
pub extern var GLAD_GL_AMD_occlusion_query_event: c_int;
pub extern var GLAD_GL_AMD_performance_monitor: c_int;
pub extern var GLAD_GL_AMD_pinned_memory: c_int;
pub extern var GLAD_GL_AMD_query_buffer_object: c_int;
pub extern var GLAD_GL_AMD_sample_positions: c_int;
pub extern var GLAD_GL_AMD_seamless_cubemap_per_texture: c_int;
pub extern var GLAD_GL_AMD_shader_atomic_counter_ops: c_int;
pub extern var GLAD_GL_AMD_shader_ballot: c_int;
pub extern var GLAD_GL_AMD_shader_explicit_vertex_parameter: c_int;
pub extern var GLAD_GL_AMD_shader_gpu_shader_half_float_fetch: c_int;
pub extern var GLAD_GL_AMD_shader_image_load_store_lod: c_int;
pub extern var GLAD_GL_AMD_shader_stencil_export: c_int;
pub extern var GLAD_GL_AMD_shader_trinary_minmax: c_int;
pub extern var GLAD_GL_AMD_sparse_texture: c_int;
pub extern var GLAD_GL_AMD_stencil_operation_extended: c_int;
pub extern var GLAD_GL_AMD_texture_gather_bias_lod: c_int;
pub extern var GLAD_GL_AMD_texture_texture4: c_int;
pub extern var GLAD_GL_AMD_transform_feedback3_lines_triangles: c_int;
pub extern var GLAD_GL_AMD_transform_feedback4: c_int;
pub extern var GLAD_GL_AMD_vertex_shader_layer: c_int;
pub extern var GLAD_GL_AMD_vertex_shader_tessellator: c_int;
pub extern var GLAD_GL_AMD_vertex_shader_viewport_index: c_int;
pub extern var GLAD_GL_APPLE_aux_depth_stencil: c_int;
pub extern var GLAD_GL_APPLE_client_storage: c_int;
pub extern var GLAD_GL_APPLE_element_array: c_int;
pub extern var GLAD_GL_APPLE_fence: c_int;
pub extern var GLAD_GL_APPLE_float_pixels: c_int;
pub extern var GLAD_GL_APPLE_flush_buffer_range: c_int;
pub extern var GLAD_GL_APPLE_object_purgeable: c_int;
pub extern var GLAD_GL_APPLE_rgb_422: c_int;
pub extern var GLAD_GL_APPLE_row_bytes: c_int;
pub extern var GLAD_GL_APPLE_specular_vector: c_int;
pub extern var GLAD_GL_APPLE_texture_range: c_int;
pub extern var GLAD_GL_APPLE_transform_hint: c_int;
pub extern var GLAD_GL_APPLE_vertex_array_object: c_int;
pub extern var GLAD_GL_APPLE_vertex_array_range: c_int;
pub extern var GLAD_GL_APPLE_vertex_program_evaluators: c_int;
pub extern var GLAD_GL_APPLE_ycbcr_422: c_int;
pub extern var GLAD_GL_ARB_ES2_compatibility: c_int;
pub extern var GLAD_GL_ARB_ES3_1_compatibility: c_int;
pub extern var GLAD_GL_ARB_ES3_2_compatibility: c_int;
pub extern var GLAD_GL_ARB_ES3_compatibility: c_int;
pub extern var GLAD_GL_ARB_arrays_of_arrays: c_int;
pub extern var GLAD_GL_ARB_base_instance: c_int;
pub extern var GLAD_GL_ARB_bindless_texture: c_int;
pub extern var GLAD_GL_ARB_blend_func_extended: c_int;
pub extern var GLAD_GL_ARB_buffer_storage: c_int;
pub extern var GLAD_GL_ARB_cl_event: c_int;
pub extern var GLAD_GL_ARB_clear_buffer_object: c_int;
pub extern var GLAD_GL_ARB_clear_texture: c_int;
pub extern var GLAD_GL_ARB_clip_control: c_int;
pub extern var GLAD_GL_ARB_color_buffer_float: c_int;
pub extern var GLAD_GL_ARB_compatibility: c_int;
pub extern var GLAD_GL_ARB_compressed_texture_pixel_storage: c_int;
pub extern var GLAD_GL_ARB_compute_shader: c_int;
pub extern var GLAD_GL_ARB_compute_variable_group_size: c_int;
pub extern var GLAD_GL_ARB_conditional_render_inverted: c_int;
pub extern var GLAD_GL_ARB_conservative_depth: c_int;
pub extern var GLAD_GL_ARB_copy_buffer: c_int;
pub extern var GLAD_GL_ARB_copy_image: c_int;
pub extern var GLAD_GL_ARB_cull_distance: c_int;
pub extern var GLAD_GL_ARB_debug_output: c_int;
pub extern var GLAD_GL_ARB_depth_buffer_float: c_int;
pub extern var GLAD_GL_ARB_depth_clamp: c_int;
pub extern var GLAD_GL_ARB_depth_texture: c_int;
pub extern var GLAD_GL_ARB_derivative_control: c_int;
pub extern var GLAD_GL_ARB_direct_state_access: c_int;
pub extern var GLAD_GL_ARB_draw_buffers: c_int;
pub extern var GLAD_GL_ARB_draw_buffers_blend: c_int;
pub extern var GLAD_GL_ARB_draw_elements_base_vertex: c_int;
pub extern var GLAD_GL_ARB_draw_indirect: c_int;
pub extern var GLAD_GL_ARB_draw_instanced: c_int;
pub extern var GLAD_GL_ARB_enhanced_layouts: c_int;
pub extern var GLAD_GL_ARB_explicit_attrib_location: c_int;
pub extern var GLAD_GL_ARB_explicit_uniform_location: c_int;
pub extern var GLAD_GL_ARB_fragment_coord_conventions: c_int;
pub extern var GLAD_GL_ARB_fragment_layer_viewport: c_int;
pub extern var GLAD_GL_ARB_fragment_program: c_int;
pub extern var GLAD_GL_ARB_fragment_program_shadow: c_int;
pub extern var GLAD_GL_ARB_fragment_shader: c_int;
pub extern var GLAD_GL_ARB_fragment_shader_interlock: c_int;
pub extern var GLAD_GL_ARB_framebuffer_no_attachments: c_int;
pub extern var GLAD_GL_ARB_framebuffer_object: c_int;
pub extern var GLAD_GL_ARB_framebuffer_sRGB: c_int;
pub extern var GLAD_GL_ARB_geometry_shader4: c_int;
pub extern var GLAD_GL_ARB_get_program_binary: c_int;
pub extern var GLAD_GL_ARB_get_texture_sub_image: c_int;
pub extern var GLAD_GL_ARB_gl_spirv: c_int;
pub extern var GLAD_GL_ARB_gpu_shader5: c_int;
pub extern var GLAD_GL_ARB_gpu_shader_fp64: c_int;
pub extern var GLAD_GL_ARB_gpu_shader_int64: c_int;
pub extern var GLAD_GL_ARB_half_float_pixel: c_int;
pub extern var GLAD_GL_ARB_half_float_vertex: c_int;
pub extern var GLAD_GL_ARB_imaging: c_int;
pub extern var GLAD_GL_ARB_indirect_parameters: c_int;
pub extern var GLAD_GL_ARB_instanced_arrays: c_int;
pub extern var GLAD_GL_ARB_internalformat_query: c_int;
pub extern var GLAD_GL_ARB_internalformat_query2: c_int;
pub extern var GLAD_GL_ARB_invalidate_subdata: c_int;
pub extern var GLAD_GL_ARB_map_buffer_alignment: c_int;
pub extern var GLAD_GL_ARB_map_buffer_range: c_int;
pub extern var GLAD_GL_ARB_matrix_palette: c_int;
pub extern var GLAD_GL_ARB_multi_bind: c_int;
pub extern var GLAD_GL_ARB_multi_draw_indirect: c_int;
pub extern var GLAD_GL_ARB_multisample: c_int;
pub extern var GLAD_GL_ARB_multitexture: c_int;
pub extern var GLAD_GL_ARB_occlusion_query: c_int;
pub extern var GLAD_GL_ARB_occlusion_query2: c_int;
pub extern var GLAD_GL_ARB_parallel_shader_compile: c_int;
pub extern var GLAD_GL_ARB_pipeline_statistics_query: c_int;
pub extern var GLAD_GL_ARB_pixel_buffer_object: c_int;
pub extern var GLAD_GL_ARB_point_parameters: c_int;
pub extern var GLAD_GL_ARB_point_sprite: c_int;
pub extern var GLAD_GL_ARB_polygon_offset_clamp: c_int;
pub extern var GLAD_GL_ARB_post_depth_coverage: c_int;
pub extern var GLAD_GL_ARB_program_interface_query: c_int;
pub extern var GLAD_GL_ARB_provoking_vertex: c_int;
pub extern var GLAD_GL_ARB_query_buffer_object: c_int;
pub extern var GLAD_GL_ARB_robust_buffer_access_behavior: c_int;
pub extern var GLAD_GL_ARB_robustness: c_int;
pub extern var GLAD_GL_ARB_robustness_isolation: c_int;
pub extern var GLAD_GL_ARB_sample_locations: c_int;
pub extern var GLAD_GL_ARB_sample_shading: c_int;
pub extern var GLAD_GL_ARB_sampler_objects: c_int;
pub extern var GLAD_GL_ARB_seamless_cube_map: c_int;
pub extern var GLAD_GL_ARB_seamless_cubemap_per_texture: c_int;
pub extern var GLAD_GL_ARB_separate_shader_objects: c_int;
pub extern var GLAD_GL_ARB_shader_atomic_counter_ops: c_int;
pub extern var GLAD_GL_ARB_shader_atomic_counters: c_int;
pub extern var GLAD_GL_ARB_shader_ballot: c_int;
pub extern var GLAD_GL_ARB_shader_bit_encoding: c_int;
pub extern var GLAD_GL_ARB_shader_clock: c_int;
pub extern var GLAD_GL_ARB_shader_draw_parameters: c_int;
pub extern var GLAD_GL_ARB_shader_group_vote: c_int;
pub extern var GLAD_GL_ARB_shader_image_load_store: c_int;
pub extern var GLAD_GL_ARB_shader_image_size: c_int;
pub extern var GLAD_GL_ARB_shader_objects: c_int;
pub extern var GLAD_GL_ARB_shader_precision: c_int;
pub extern var GLAD_GL_ARB_shader_stencil_export: c_int;
pub extern var GLAD_GL_ARB_shader_storage_buffer_object: c_int;
pub extern var GLAD_GL_ARB_shader_subroutine: c_int;
pub extern var GLAD_GL_ARB_shader_texture_image_samples: c_int;
pub extern var GLAD_GL_ARB_shader_texture_lod: c_int;
pub extern var GLAD_GL_ARB_shader_viewport_layer_array: c_int;
pub extern var GLAD_GL_ARB_shading_language_100: c_int;
pub extern var GLAD_GL_ARB_shading_language_420pack: c_int;
pub extern var GLAD_GL_ARB_shading_language_include: c_int;
pub extern var GLAD_GL_ARB_shading_language_packing: c_int;
pub extern var GLAD_GL_ARB_shadow: c_int;
pub extern var GLAD_GL_ARB_shadow_ambient: c_int;
pub extern var GLAD_GL_ARB_sparse_buffer: c_int;
pub extern var GLAD_GL_ARB_sparse_texture: c_int;
pub extern var GLAD_GL_ARB_sparse_texture2: c_int;
pub extern var GLAD_GL_ARB_sparse_texture_clamp: c_int;
pub extern var GLAD_GL_ARB_spirv_extensions: c_int;
pub extern var GLAD_GL_ARB_stencil_texturing: c_int;
pub extern var GLAD_GL_ARB_sync: c_int;
pub extern var GLAD_GL_ARB_tessellation_shader: c_int;
pub extern var GLAD_GL_ARB_texture_barrier: c_int;
pub extern var GLAD_GL_ARB_texture_border_clamp: c_int;
pub extern var GLAD_GL_ARB_texture_buffer_object: c_int;
pub extern var GLAD_GL_ARB_texture_buffer_object_rgb32: c_int;
pub extern var GLAD_GL_ARB_texture_buffer_range: c_int;
pub extern var GLAD_GL_ARB_texture_compression: c_int;
pub extern var GLAD_GL_ARB_texture_compression_bptc: c_int;
pub extern var GLAD_GL_ARB_texture_compression_rgtc: c_int;
pub extern var GLAD_GL_ARB_texture_cube_map: c_int;
pub extern var GLAD_GL_ARB_texture_cube_map_array: c_int;
pub extern var GLAD_GL_ARB_texture_env_add: c_int;
pub extern var GLAD_GL_ARB_texture_env_combine: c_int;
pub extern var GLAD_GL_ARB_texture_env_crossbar: c_int;
pub extern var GLAD_GL_ARB_texture_env_dot3: c_int;
pub extern var GLAD_GL_ARB_texture_filter_anisotropic: c_int;
pub extern var GLAD_GL_ARB_texture_filter_minmax: c_int;
pub extern var GLAD_GL_ARB_texture_float: c_int;
pub extern var GLAD_GL_ARB_texture_gather: c_int;
pub extern var GLAD_GL_ARB_texture_mirror_clamp_to_edge: c_int;
pub extern var GLAD_GL_ARB_texture_mirrored_repeat: c_int;
pub extern var GLAD_GL_ARB_texture_multisample: c_int;
pub extern var GLAD_GL_ARB_texture_non_power_of_two: c_int;
pub extern var GLAD_GL_ARB_texture_query_levels: c_int;
pub extern var GLAD_GL_ARB_texture_query_lod: c_int;
pub extern var GLAD_GL_ARB_texture_rectangle: c_int;
pub extern var GLAD_GL_ARB_texture_rg: c_int;
pub extern var GLAD_GL_ARB_texture_rgb10_a2ui: c_int;
pub extern var GLAD_GL_ARB_texture_stencil8: c_int;
pub extern var GLAD_GL_ARB_texture_storage: c_int;
pub extern var GLAD_GL_ARB_texture_storage_multisample: c_int;
pub extern var GLAD_GL_ARB_texture_swizzle: c_int;
pub extern var GLAD_GL_ARB_texture_view: c_int;
pub extern var GLAD_GL_ARB_timer_query: c_int;
pub extern var GLAD_GL_ARB_transform_feedback2: c_int;
pub extern var GLAD_GL_ARB_transform_feedback3: c_int;
pub extern var GLAD_GL_ARB_transform_feedback_instanced: c_int;
pub extern var GLAD_GL_ARB_transform_feedback_overflow_query: c_int;
pub extern var GLAD_GL_ARB_transpose_matrix: c_int;
pub extern var GLAD_GL_ARB_uniform_buffer_object: c_int;
pub extern var GLAD_GL_ARB_vertex_array_bgra: c_int;
pub extern var GLAD_GL_ARB_vertex_array_object: c_int;
pub extern var GLAD_GL_ARB_vertex_attrib_64bit: c_int;
pub extern var GLAD_GL_ARB_vertex_attrib_binding: c_int;
pub extern var GLAD_GL_ARB_vertex_blend: c_int;
pub extern var GLAD_GL_ARB_vertex_buffer_object: c_int;
pub extern var GLAD_GL_ARB_vertex_program: c_int;
pub extern var GLAD_GL_ARB_vertex_shader: c_int;
pub extern var GLAD_GL_ARB_vertex_type_10f_11f_11f_rev: c_int;
pub extern var GLAD_GL_ARB_vertex_type_2_10_10_10_rev: c_int;
pub extern var GLAD_GL_ARB_viewport_array: c_int;
pub extern var GLAD_GL_ARB_window_pos: c_int;
pub extern var GLAD_GL_ATI_draw_buffers: c_int;
pub extern var GLAD_GL_ATI_element_array: c_int;
pub extern var GLAD_GL_ATI_envmap_bumpmap: c_int;
pub extern var GLAD_GL_ATI_fragment_shader: c_int;
pub extern var GLAD_GL_ATI_map_object_buffer: c_int;
pub extern var GLAD_GL_ATI_meminfo: c_int;
pub extern var GLAD_GL_ATI_pixel_format_float: c_int;
pub extern var GLAD_GL_ATI_pn_triangles: c_int;
pub extern var GLAD_GL_ATI_separate_stencil: c_int;
pub extern var GLAD_GL_ATI_text_fragment_shader: c_int;
pub extern var GLAD_GL_ATI_texture_env_combine3: c_int;
pub extern var GLAD_GL_ATI_texture_float: c_int;
pub extern var GLAD_GL_ATI_texture_mirror_once: c_int;
pub extern var GLAD_GL_ATI_vertex_array_object: c_int;
pub extern var GLAD_GL_ATI_vertex_attrib_array_object: c_int;
pub extern var GLAD_GL_ATI_vertex_streams: c_int;
pub extern var GLAD_GL_EXT_422_pixels: c_int;
pub extern var GLAD_GL_EXT_EGL_image_storage: c_int;
pub extern var GLAD_GL_EXT_EGL_sync: c_int;
pub extern var GLAD_GL_EXT_abgr: c_int;
pub extern var GLAD_GL_EXT_bgra: c_int;
pub extern var GLAD_GL_EXT_bindable_uniform: c_int;
pub extern var GLAD_GL_EXT_blend_color: c_int;
pub extern var GLAD_GL_EXT_blend_equation_separate: c_int;
pub extern var GLAD_GL_EXT_blend_func_separate: c_int;
pub extern var GLAD_GL_EXT_blend_logic_op: c_int;
pub extern var GLAD_GL_EXT_blend_minmax: c_int;
pub extern var GLAD_GL_EXT_blend_subtract: c_int;
pub extern var GLAD_GL_EXT_clip_volume_hint: c_int;
pub extern var GLAD_GL_EXT_cmyka: c_int;
pub extern var GLAD_GL_EXT_color_subtable: c_int;
pub extern var GLAD_GL_EXT_compiled_vertex_array: c_int;
pub extern var GLAD_GL_EXT_convolution: c_int;
pub extern var GLAD_GL_EXT_coordinate_frame: c_int;
pub extern var GLAD_GL_EXT_copy_texture: c_int;
pub extern var GLAD_GL_EXT_cull_vertex: c_int;
pub extern var GLAD_GL_EXT_debug_label: c_int;
pub extern var GLAD_GL_EXT_debug_marker: c_int;
pub extern var GLAD_GL_EXT_depth_bounds_test: c_int;
pub extern var GLAD_GL_EXT_direct_state_access: c_int;
pub extern var GLAD_GL_EXT_draw_buffers2: c_int;
pub extern var GLAD_GL_EXT_draw_instanced: c_int;
pub extern var GLAD_GL_EXT_draw_range_elements: c_int;
pub extern var GLAD_GL_EXT_external_buffer: c_int;
pub extern var GLAD_GL_EXT_fog_coord: c_int;
pub extern var GLAD_GL_EXT_framebuffer_blit: c_int;
pub extern var GLAD_GL_EXT_framebuffer_multisample: c_int;
pub extern var GLAD_GL_EXT_framebuffer_multisample_blit_scaled: c_int;
pub extern var GLAD_GL_EXT_framebuffer_object: c_int;
pub extern var GLAD_GL_EXT_framebuffer_sRGB: c_int;
pub extern var GLAD_GL_EXT_geometry_shader4: c_int;
pub extern var GLAD_GL_EXT_gpu_program_parameters: c_int;
pub extern var GLAD_GL_EXT_gpu_shader4: c_int;
pub extern var GLAD_GL_EXT_histogram: c_int;
pub extern var GLAD_GL_EXT_index_array_formats: c_int;
pub extern var GLAD_GL_EXT_index_func: c_int;
pub extern var GLAD_GL_EXT_index_material: c_int;
pub extern var GLAD_GL_EXT_index_texture: c_int;
pub extern var GLAD_GL_EXT_light_texture: c_int;
pub extern var GLAD_GL_EXT_memory_object: c_int;
pub extern var GLAD_GL_EXT_memory_object_fd: c_int;
pub extern var GLAD_GL_EXT_memory_object_win32: c_int;
pub extern var GLAD_GL_EXT_misc_attribute: c_int;
pub extern var GLAD_GL_EXT_multi_draw_arrays: c_int;
pub extern var GLAD_GL_EXT_multisample: c_int;
pub extern var GLAD_GL_EXT_multiview_tessellation_geometry_shader: c_int;
pub extern var GLAD_GL_EXT_multiview_texture_multisample: c_int;
pub extern var GLAD_GL_EXT_multiview_timer_query: c_int;
pub extern var GLAD_GL_EXT_packed_depth_stencil: c_int;
pub extern var GLAD_GL_EXT_packed_float: c_int;
pub extern var GLAD_GL_EXT_packed_pixels: c_int;
pub extern var GLAD_GL_EXT_paletted_texture: c_int;
pub extern var GLAD_GL_EXT_pixel_buffer_object: c_int;
pub extern var GLAD_GL_EXT_pixel_transform: c_int;
pub extern var GLAD_GL_EXT_pixel_transform_color_table: c_int;
pub extern var GLAD_GL_EXT_point_parameters: c_int;
pub extern var GLAD_GL_EXT_polygon_offset: c_int;
pub extern var GLAD_GL_EXT_polygon_offset_clamp: c_int;
pub extern var GLAD_GL_EXT_post_depth_coverage: c_int;
pub extern var GLAD_GL_EXT_provoking_vertex: c_int;
pub extern var GLAD_GL_EXT_raster_multisample: c_int;
pub extern var GLAD_GL_EXT_rescale_normal: c_int;
pub extern var GLAD_GL_EXT_secondary_color: c_int;
pub extern var GLAD_GL_EXT_semaphore: c_int;
pub extern var GLAD_GL_EXT_semaphore_fd: c_int;
pub extern var GLAD_GL_EXT_semaphore_win32: c_int;
pub extern var GLAD_GL_EXT_separate_shader_objects: c_int;
pub extern var GLAD_GL_EXT_separate_specular_color: c_int;
pub extern var GLAD_GL_EXT_shader_framebuffer_fetch: c_int;
pub extern var GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent: c_int;
pub extern var GLAD_GL_EXT_shader_image_load_formatted: c_int;
pub extern var GLAD_GL_EXT_shader_image_load_store: c_int;
pub extern var GLAD_GL_EXT_shader_integer_mix: c_int;
pub extern var GLAD_GL_EXT_shader_samples_identical: c_int;
pub extern var GLAD_GL_EXT_shadow_funcs: c_int;
pub extern var GLAD_GL_EXT_shared_texture_palette: c_int;
pub extern var GLAD_GL_EXT_sparse_texture2: c_int;
pub extern var GLAD_GL_EXT_stencil_clear_tag: c_int;
pub extern var GLAD_GL_EXT_stencil_two_side: c_int;
pub extern var GLAD_GL_EXT_stencil_wrap: c_int;
pub extern var GLAD_GL_EXT_subtexture: c_int;
pub extern var GLAD_GL_EXT_texture: c_int;
pub extern var GLAD_GL_EXT_texture3D: c_int;
pub extern var GLAD_GL_EXT_texture_array: c_int;
pub extern var GLAD_GL_EXT_texture_buffer_object: c_int;
pub extern var GLAD_GL_EXT_texture_compression_latc: c_int;
pub extern var GLAD_GL_EXT_texture_compression_rgtc: c_int;
pub extern var GLAD_GL_EXT_texture_compression_s3tc: c_int;
pub extern var GLAD_GL_EXT_texture_cube_map: c_int;
pub extern var GLAD_GL_EXT_texture_env_add: c_int;
pub extern var GLAD_GL_EXT_texture_env_combine: c_int;
pub extern var GLAD_GL_EXT_texture_env_dot3: c_int;
pub extern var GLAD_GL_EXT_texture_filter_anisotropic: c_int;
pub extern var GLAD_GL_EXT_texture_filter_minmax: c_int;
pub extern var GLAD_GL_EXT_texture_integer: c_int;
pub extern var GLAD_GL_EXT_texture_lod_bias: c_int;
pub extern var GLAD_GL_EXT_texture_mirror_clamp: c_int;
pub extern var GLAD_GL_EXT_texture_object: c_int;
pub extern var GLAD_GL_EXT_texture_perturb_normal: c_int;
pub extern var GLAD_GL_EXT_texture_sRGB: c_int;
pub extern var GLAD_GL_EXT_texture_sRGB_R8: c_int;
pub extern var GLAD_GL_EXT_texture_sRGB_RG8: c_int;
pub extern var GLAD_GL_EXT_texture_sRGB_decode: c_int;
pub extern var GLAD_GL_EXT_texture_shadow_lod: c_int;
pub extern var GLAD_GL_EXT_texture_shared_exponent: c_int;
pub extern var GLAD_GL_EXT_texture_snorm: c_int;
pub extern var GLAD_GL_EXT_texture_storage: c_int;
pub extern var GLAD_GL_EXT_texture_swizzle: c_int;
pub extern var GLAD_GL_EXT_timer_query: c_int;
pub extern var GLAD_GL_EXT_transform_feedback: c_int;
pub extern var GLAD_GL_EXT_vertex_array: c_int;
pub extern var GLAD_GL_EXT_vertex_array_bgra: c_int;
pub extern var GLAD_GL_EXT_vertex_attrib_64bit: c_int;
pub extern var GLAD_GL_EXT_vertex_shader: c_int;
pub extern var GLAD_GL_EXT_vertex_weighting: c_int;
pub extern var GLAD_GL_EXT_win32_keyed_mutex: c_int;
pub extern var GLAD_GL_EXT_window_rectangles: c_int;
pub extern var GLAD_GL_EXT_x11_sync_object: c_int;
pub extern var GLAD_GL_GREMEDY_frame_terminator: c_int;
pub extern var GLAD_GL_GREMEDY_string_marker: c_int;
pub extern var GLAD_GL_HP_convolution_border_modes: c_int;
pub extern var GLAD_GL_HP_image_transform: c_int;
pub extern var GLAD_GL_HP_occlusion_test: c_int;
pub extern var GLAD_GL_HP_texture_lighting: c_int;
pub extern var GLAD_GL_IBM_cull_vertex: c_int;
pub extern var GLAD_GL_IBM_multimode_draw_arrays: c_int;
pub extern var GLAD_GL_IBM_rasterpos_clip: c_int;
pub extern var GLAD_GL_IBM_static_data: c_int;
pub extern var GLAD_GL_IBM_texture_mirrored_repeat: c_int;
pub extern var GLAD_GL_IBM_vertex_array_lists: c_int;
pub extern var GLAD_GL_INGR_blend_func_separate: c_int;
pub extern var GLAD_GL_INGR_color_clamp: c_int;
pub extern var GLAD_GL_INGR_interlace_read: c_int;
pub extern var GLAD_GL_INTEL_blackhole_render: c_int;
pub extern var GLAD_GL_INTEL_conservative_rasterization: c_int;
pub extern var GLAD_GL_INTEL_fragment_shader_ordering: c_int;
pub extern var GLAD_GL_INTEL_framebuffer_CMAA: c_int;
pub extern var GLAD_GL_INTEL_map_texture: c_int;
pub extern var GLAD_GL_INTEL_parallel_arrays: c_int;
pub extern var GLAD_GL_INTEL_performance_query: c_int;
pub extern var GLAD_GL_KHR_blend_equation_advanced: c_int;
pub extern var GLAD_GL_KHR_blend_equation_advanced_coherent: c_int;
pub extern var GLAD_GL_KHR_context_flush_control: c_int;
pub extern var GLAD_GL_KHR_debug: c_int;
pub extern var GLAD_GL_KHR_no_error: c_int;
pub extern var GLAD_GL_KHR_parallel_shader_compile: c_int;
pub extern var GLAD_GL_KHR_robust_buffer_access_behavior: c_int;
pub extern var GLAD_GL_KHR_robustness: c_int;
pub extern var GLAD_GL_KHR_shader_subgroup: c_int;
pub extern var GLAD_GL_KHR_texture_compression_astc_hdr: c_int;
pub extern var GLAD_GL_KHR_texture_compression_astc_ldr: c_int;
pub extern var GLAD_GL_KHR_texture_compression_astc_sliced_3d: c_int;
pub extern var GLAD_GL_MESAX_texture_stack: c_int;
pub extern var GLAD_GL_MESA_framebuffer_flip_x: c_int;
pub extern var GLAD_GL_MESA_framebuffer_flip_y: c_int;
pub extern var GLAD_GL_MESA_framebuffer_swap_xy: c_int;
pub extern var GLAD_GL_MESA_pack_invert: c_int;
pub extern var GLAD_GL_MESA_program_binary_formats: c_int;
pub extern var GLAD_GL_MESA_resize_buffers: c_int;
pub extern var GLAD_GL_MESA_shader_integer_functions: c_int;
pub extern var GLAD_GL_MESA_tile_raster_order: c_int;
pub extern var GLAD_GL_MESA_window_pos: c_int;
pub extern var GLAD_GL_MESA_ycbcr_texture: c_int;
pub extern var GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers: c_int;
pub extern var GLAD_GL_NVX_conditional_render: c_int;
pub extern var GLAD_GL_NVX_gpu_memory_info: c_int;
pub extern var GLAD_GL_NVX_gpu_multicast2: c_int;
pub extern var GLAD_GL_NVX_linked_gpu_multicast: c_int;
pub extern var GLAD_GL_NVX_progress_fence: c_int;
pub extern var GLAD_GL_NV_alpha_to_coverage_dither_control: c_int;
pub extern var GLAD_GL_NV_bindless_multi_draw_indirect: c_int;
pub extern var GLAD_GL_NV_bindless_multi_draw_indirect_count: c_int;
pub extern var GLAD_GL_NV_bindless_texture: c_int;
pub extern var GLAD_GL_NV_blend_equation_advanced: c_int;
pub extern var GLAD_GL_NV_blend_equation_advanced_coherent: c_int;
pub extern var GLAD_GL_NV_blend_minmax_factor: c_int;
pub extern var GLAD_GL_NV_blend_square: c_int;
pub extern var GLAD_GL_NV_clip_space_w_scaling: c_int;
pub extern var GLAD_GL_NV_command_list: c_int;
pub extern var GLAD_GL_NV_compute_program5: c_int;
pub extern var GLAD_GL_NV_compute_shader_derivatives: c_int;
pub extern var GLAD_GL_NV_conditional_render: c_int;
pub extern var GLAD_GL_NV_conservative_raster: c_int;
pub extern var GLAD_GL_NV_conservative_raster_dilate: c_int;
pub extern var GLAD_GL_NV_conservative_raster_pre_snap: c_int;
pub extern var GLAD_GL_NV_conservative_raster_pre_snap_triangles: c_int;
pub extern var GLAD_GL_NV_conservative_raster_underestimation: c_int;
pub extern var GLAD_GL_NV_copy_depth_to_color: c_int;
pub extern var GLAD_GL_NV_copy_image: c_int;
pub extern var GLAD_GL_NV_deep_texture3D: c_int;
pub extern var GLAD_GL_NV_depth_buffer_float: c_int;
pub extern var GLAD_GL_NV_depth_clamp: c_int;
pub extern var GLAD_GL_NV_draw_texture: c_int;
pub extern var GLAD_GL_NV_draw_vulkan_image: c_int;
pub extern var GLAD_GL_NV_evaluators: c_int;
pub extern var GLAD_GL_NV_explicit_multisample: c_int;
pub extern var GLAD_GL_NV_fence: c_int;
pub extern var GLAD_GL_NV_fill_rectangle: c_int;
pub extern var GLAD_GL_NV_float_buffer: c_int;
pub extern var GLAD_GL_NV_fog_distance: c_int;
pub extern var GLAD_GL_NV_fragment_coverage_to_color: c_int;
pub extern var GLAD_GL_NV_fragment_program: c_int;
pub extern var GLAD_GL_NV_fragment_program2: c_int;
pub extern var GLAD_GL_NV_fragment_program4: c_int;
pub extern var GLAD_GL_NV_fragment_program_option: c_int;
pub extern var GLAD_GL_NV_fragment_shader_barycentric: c_int;
pub extern var GLAD_GL_NV_fragment_shader_interlock: c_int;
pub extern var GLAD_GL_NV_framebuffer_mixed_samples: c_int;
pub extern var GLAD_GL_NV_framebuffer_multisample_coverage: c_int;
pub extern var GLAD_GL_NV_geometry_program4: c_int;
pub extern var GLAD_GL_NV_geometry_shader4: c_int;
pub extern var GLAD_GL_NV_geometry_shader_passthrough: c_int;
pub extern var GLAD_GL_NV_gpu_multicast: c_int;
pub extern var GLAD_GL_NV_gpu_program4: c_int;
pub extern var GLAD_GL_NV_gpu_program5: c_int;
pub extern var GLAD_GL_NV_gpu_program5_mem_extended: c_int;
pub extern var GLAD_GL_NV_gpu_shader5: c_int;
pub extern var GLAD_GL_NV_half_float: c_int;
pub extern var GLAD_GL_NV_internalformat_sample_query: c_int;
pub extern var GLAD_GL_NV_light_max_exponent: c_int;
pub extern var GLAD_GL_NV_memory_attachment: c_int;
pub extern var GLAD_GL_NV_memory_object_sparse: c_int;
pub extern var GLAD_GL_NV_mesh_shader: c_int;
pub extern var GLAD_GL_NV_multisample_coverage: c_int;
pub extern var GLAD_GL_NV_multisample_filter_hint: c_int;
pub extern var GLAD_GL_NV_occlusion_query: c_int;
pub extern var GLAD_GL_NV_packed_depth_stencil: c_int;
pub extern var GLAD_GL_NV_parameter_buffer_object: c_int;
pub extern var GLAD_GL_NV_parameter_buffer_object2: c_int;
pub extern var GLAD_GL_NV_path_rendering: c_int;
pub extern var GLAD_GL_NV_path_rendering_shared_edge: c_int;
pub extern var GLAD_GL_NV_pixel_data_range: c_int;
pub extern var GLAD_GL_NV_point_sprite: c_int;
pub extern var GLAD_GL_NV_present_video: c_int;
pub extern var GLAD_GL_NV_primitive_restart: c_int;
pub extern var GLAD_GL_NV_primitive_shading_rate: c_int;
pub extern var GLAD_GL_NV_query_resource: c_int;
pub extern var GLAD_GL_NV_query_resource_tag: c_int;
pub extern var GLAD_GL_NV_register_combiners: c_int;
pub extern var GLAD_GL_NV_register_combiners2: c_int;
pub extern var GLAD_GL_NV_representative_fragment_test: c_int;
pub extern var GLAD_GL_NV_robustness_video_memory_purge: c_int;
pub extern var GLAD_GL_NV_sample_locations: c_int;
pub extern var GLAD_GL_NV_sample_mask_override_coverage: c_int;
pub extern var GLAD_GL_NV_scissor_exclusive: c_int;
pub extern var GLAD_GL_NV_shader_atomic_counters: c_int;
pub extern var GLAD_GL_NV_shader_atomic_float: c_int;
pub extern var GLAD_GL_NV_shader_atomic_float64: c_int;
pub extern var GLAD_GL_NV_shader_atomic_fp16_vector: c_int;
pub extern var GLAD_GL_NV_shader_atomic_int64: c_int;
pub extern var GLAD_GL_NV_shader_buffer_load: c_int;
pub extern var GLAD_GL_NV_shader_buffer_store: c_int;
pub extern var GLAD_GL_NV_shader_storage_buffer_object: c_int;
pub extern var GLAD_GL_NV_shader_subgroup_partitioned: c_int;
pub extern var GLAD_GL_NV_shader_texture_footprint: c_int;
pub extern var GLAD_GL_NV_shader_thread_group: c_int;
pub extern var GLAD_GL_NV_shader_thread_shuffle: c_int;
pub extern var GLAD_GL_NV_shading_rate_image: c_int;
pub extern var GLAD_GL_NV_stereo_view_rendering: c_int;
pub extern var GLAD_GL_NV_tessellation_program5: c_int;
pub extern var GLAD_GL_NV_texgen_emboss: c_int;
pub extern var GLAD_GL_NV_texgen_reflection: c_int;
pub extern var GLAD_GL_NV_texture_barrier: c_int;
pub extern var GLAD_GL_NV_texture_compression_vtc: c_int;
pub extern var GLAD_GL_NV_texture_env_combine4: c_int;
pub extern var GLAD_GL_NV_texture_expand_normal: c_int;
pub extern var GLAD_GL_NV_texture_multisample: c_int;
pub extern var GLAD_GL_NV_texture_rectangle: c_int;
pub extern var GLAD_GL_NV_texture_rectangle_compressed: c_int;
pub extern var GLAD_GL_NV_texture_shader: c_int;
pub extern var GLAD_GL_NV_texture_shader2: c_int;
pub extern var GLAD_GL_NV_texture_shader3: c_int;
pub extern var GLAD_GL_NV_timeline_semaphore: c_int;
pub extern var GLAD_GL_NV_transform_feedback: c_int;
pub extern var GLAD_GL_NV_transform_feedback2: c_int;
pub extern var GLAD_GL_NV_uniform_buffer_unified_memory: c_int;
pub extern var GLAD_GL_NV_vdpau_interop: c_int;
pub extern var GLAD_GL_NV_vdpau_interop2: c_int;
pub extern var GLAD_GL_NV_vertex_array_range: c_int;
pub extern var GLAD_GL_NV_vertex_array_range2: c_int;
pub extern var GLAD_GL_NV_vertex_attrib_integer_64bit: c_int;
pub extern var GLAD_GL_NV_vertex_buffer_unified_memory: c_int;
pub extern var GLAD_GL_NV_vertex_program: c_int;
pub extern var GLAD_GL_NV_vertex_program1_1: c_int;
pub extern var GLAD_GL_NV_vertex_program2: c_int;
pub extern var GLAD_GL_NV_vertex_program2_option: c_int;
pub extern var GLAD_GL_NV_vertex_program3: c_int;
pub extern var GLAD_GL_NV_vertex_program4: c_int;
pub extern var GLAD_GL_NV_video_capture: c_int;
pub extern var GLAD_GL_NV_viewport_array2: c_int;
pub extern var GLAD_GL_NV_viewport_swizzle: c_int;
pub extern var GLAD_GL_OES_byte_coordinates: c_int;
pub extern var GLAD_GL_OES_compressed_paletted_texture: c_int;
pub extern var GLAD_GL_OES_fixed_point: c_int;
pub extern var GLAD_GL_OES_query_matrix: c_int;
pub extern var GLAD_GL_OES_read_format: c_int;
pub extern var GLAD_GL_OES_single_precision: c_int;
pub extern var GLAD_GL_OML_interlace: c_int;
pub extern var GLAD_GL_OML_resample: c_int;
pub extern var GLAD_GL_OML_subsample: c_int;
pub extern var GLAD_GL_OVR_multiview: c_int;
pub extern var GLAD_GL_OVR_multiview2: c_int;
pub extern var GLAD_GL_PGI_misc_hints: c_int;
pub extern var GLAD_GL_PGI_vertex_hints: c_int;
pub extern var GLAD_GL_REND_screen_coordinates: c_int;
pub extern var GLAD_GL_S3_s3tc: c_int;
pub extern var GLAD_GL_SGIS_detail_texture: c_int;
pub extern var GLAD_GL_SGIS_fog_function: c_int;
pub extern var GLAD_GL_SGIS_generate_mipmap: c_int;
pub extern var GLAD_GL_SGIS_multisample: c_int;
pub extern var GLAD_GL_SGIS_pixel_texture: c_int;
pub extern var GLAD_GL_SGIS_point_line_texgen: c_int;
pub extern var GLAD_GL_SGIS_point_parameters: c_int;
pub extern var GLAD_GL_SGIS_sharpen_texture: c_int;
pub extern var GLAD_GL_SGIS_texture4D: c_int;
pub extern var GLAD_GL_SGIS_texture_border_clamp: c_int;
pub extern var GLAD_GL_SGIS_texture_color_mask: c_int;
pub extern var GLAD_GL_SGIS_texture_edge_clamp: c_int;
pub extern var GLAD_GL_SGIS_texture_filter4: c_int;
pub extern var GLAD_GL_SGIS_texture_lod: c_int;
pub extern var GLAD_GL_SGIS_texture_select: c_int;
pub extern var GLAD_GL_SGIX_async: c_int;
pub extern var GLAD_GL_SGIX_async_histogram: c_int;
pub extern var GLAD_GL_SGIX_async_pixel: c_int;
pub extern var GLAD_GL_SGIX_blend_alpha_minmax: c_int;
pub extern var GLAD_GL_SGIX_calligraphic_fragment: c_int;
pub extern var GLAD_GL_SGIX_clipmap: c_int;
pub extern var GLAD_GL_SGIX_convolution_accuracy: c_int;
pub extern var GLAD_GL_SGIX_depth_pass_instrument: c_int;
pub extern var GLAD_GL_SGIX_depth_texture: c_int;
pub extern var GLAD_GL_SGIX_flush_raster: c_int;
pub extern var GLAD_GL_SGIX_fog_offset: c_int;
pub extern var GLAD_GL_SGIX_fragment_lighting: c_int;
pub extern var GLAD_GL_SGIX_framezoom: c_int;
pub extern var GLAD_GL_SGIX_igloo_interface: c_int;
pub extern var GLAD_GL_SGIX_instruments: c_int;
pub extern var GLAD_GL_SGIX_interlace: c_int;
pub extern var GLAD_GL_SGIX_ir_instrument1: c_int;
pub extern var GLAD_GL_SGIX_list_priority: c_int;
pub extern var GLAD_GL_SGIX_pixel_texture: c_int;
pub extern var GLAD_GL_SGIX_pixel_tiles: c_int;
pub extern var GLAD_GL_SGIX_polynomial_ffd: c_int;
pub extern var GLAD_GL_SGIX_reference_plane: c_int;
pub extern var GLAD_GL_SGIX_resample: c_int;
pub extern var GLAD_GL_SGIX_scalebias_hint: c_int;
pub extern var GLAD_GL_SGIX_shadow: c_int;
pub extern var GLAD_GL_SGIX_shadow_ambient: c_int;
pub extern var GLAD_GL_SGIX_sprite: c_int;
pub extern var GLAD_GL_SGIX_subsample: c_int;
pub extern var GLAD_GL_SGIX_tag_sample_buffer: c_int;
pub extern var GLAD_GL_SGIX_texture_add_env: c_int;
pub extern var GLAD_GL_SGIX_texture_coordinate_clamp: c_int;
pub extern var GLAD_GL_SGIX_texture_lod_bias: c_int;
pub extern var GLAD_GL_SGIX_texture_multi_buffer: c_int;
pub extern var GLAD_GL_SGIX_texture_scale_bias: c_int;
pub extern var GLAD_GL_SGIX_vertex_preclip: c_int;
pub extern var GLAD_GL_SGIX_ycrcb: c_int;
pub extern var GLAD_GL_SGIX_ycrcb_subsample: c_int;
pub extern var GLAD_GL_SGIX_ycrcba: c_int;
pub extern var GLAD_GL_SGI_color_matrix: c_int;
pub extern var GLAD_GL_SGI_color_table: c_int;
pub extern var GLAD_GL_SGI_texture_color_table: c_int;
pub extern var GLAD_GL_SUNX_constant_data: c_int;
pub extern var GLAD_GL_SUN_convolution_border_modes: c_int;
pub extern var GLAD_GL_SUN_global_alpha: c_int;
pub extern var GLAD_GL_SUN_mesh_array: c_int;
pub extern var GLAD_GL_SUN_slice_accum: c_int;
pub extern var GLAD_GL_SUN_triangle_list: c_int;
pub extern var GLAD_GL_SUN_vertex: c_int;
pub extern var GLAD_GL_WIN_phong_shading: c_int;
pub extern var GLAD_GL_WIN_specular_fog: c_int;
pub const PFNGLACCUMXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFUNCXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?*const fn () callconv(.C) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARRAYELEMENTEXTPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLARRAYOBJECTATIPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLATTACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLATTACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub const PFNGLBINDBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPARAMETEREXTPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLBINDPROGRAMARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINORMAL3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLBINORMAL3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLBINORMAL3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBITMAPXOESPROC = ?*const fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBLENDBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBLENDCOLORPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDCOLOREXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDCOLORXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLBLENDEQUATIONPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINGRPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERDATAPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERDATAARBPROC = ?*const fn (GLenum, GLsizeiptrARB, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTMEMNVPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCLAMPCOLORPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLAMPCOLORARBPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLEARPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLEARACCUMXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARBUFFERDATAPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERFIPROC = ?*const fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERFVPROC = ?*const fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARBUFFERIVPROC = ?*const fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?*const fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHFPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLCLEARDEPTHFOESPROC = ?*const fn (GLclampf) callconv(.C) void;
pub const PFNGLCLEARDEPTHXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?*const fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARSTENCILPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLCLIPCONTROLPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEXOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORMASKPROC = ?*const fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYPATHNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCREATEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPROC = ?*const fn () callconv(.C) GLuint;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?*const fn () callconv(.C) GLhandleARB;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRESSFENCENVXPROC = ?*const fn () callconv(.C) GLuint;
pub const PFNGLCREATEQUERIESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESEMAPHORESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?*const fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?*const fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?*const fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESTATESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?*const fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub const PFNGLCREATETEXTURESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCULLFACEPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?*const fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?*const fn (GLDEBUGPROC, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?*const fn (GLDEBUGPROCAMD, ?*anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?*const fn (GLDEBUGPROCARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEFORMSGIXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3DSGIXPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3FSGIXPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDELETENAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPATHSNVPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERYRESOURCETAGNVPROC = ?*const fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESAMPLERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESHADERPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETESTATESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESYNCPROC = ?*const fn (GLsync) callconv(.C) void;
pub const PFNGLDELETETEXTURESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?*const fn (GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHFUNCPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLDEPTHMASKPROC = ?*const fn (GLboolean) callconv(.C) void;
pub const PFNGLDEPTHRANGEPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYDVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDDNVPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEFPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?*const fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLDEPTHRANGEXOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDETACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLDETACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDISABLEPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?*const fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWARRAYSPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWBUFFERPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?*const fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?*const fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?*const fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWMESHARRAYSSUNPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?*const fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?*const fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?*const fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?*const fn (GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?*const fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLENABLEPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDQUERYPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLEVALCOORD1XOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALMAPSNVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLEVALUATEDEPTHVALUESARBPROC = ?*const fn () callconv(.C) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERXOESPROC = ?*const fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFENCESYNCPROC = ?*const fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLFINISHPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLFINISHFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHFENCENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFLUSHPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFLUSHRASTERSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFLUSHSTATICDATAIBMPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLFOGCOORDDEXTPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDFEXTPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDHNVPROC = ?*const fn (GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLFOGFUNCSGISPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLFRONTFACEPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFRUSTUMFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRUSTUMXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?*const fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFENCESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?*const fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGENFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENNAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPATHSNVPROC = ?*const fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERYRESOURCETAGNVPROC = ?*const fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGENTEXTURESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTEXTURESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?*const fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGENERATEMIPMAPPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANVPROC = ?*const fn (GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?*const fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXOESPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEVPROC = ?*const fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETERRORPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETFENCEIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?*const fn ([*c]GLuint) callconv(.C) void;
pub const PFNGLGETFIXEDVOESPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATVPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETHANDLEARBPROC = ?*const fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLGETHISTOGRAMEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETIMAGEHANDLENVPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINFOLOGARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETINSTRUMENTSSGIXPROC = ?*const fn () callconv(.C) GLint;
pub const PFNGLGETINTEGER64I_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?*const fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERVPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLIGHTXOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERFVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERIVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?*const fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?*const fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?*const fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHLENGTHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?*const fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?*const fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?*const fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?*const fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?*const fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?*const fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPIXELMAPXVPROC = ?*const fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERVPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERVEXTPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?*const fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETSHADERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSTAGEINDEXNVPROC = ?*const fn (GLenum) callconv(.C) GLushort;
pub const PFNGLGETSTRINGPROC = ?*const fn (GLenum) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETSTRINGIPROC = ?*const fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETSYNCIVPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXENVXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERFVPROC = ?*const fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERIVPROC = ?*const fn (GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERXVOESPROC = ?*const fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?*const fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) GLint;
pub const PFNGLGETUNIFORMINDICESPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) GLintptr;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?*const fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMDVPROC = ?*const fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETUNIFORMFVPROC = ?*const fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMFVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMIVPROC = ?*const fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?*const fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?*const fn (GLbyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?*const fn (GLshort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?*const fn (GLubyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?*const fn (GLushort) callconv(.C) void;
pub const PFNGLHINTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLHINTPGIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLHISTOGRAMEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?*const fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub const PFNGLINDEXFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLINDEXFUNCEXTPROC = ?*const fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLINDEXXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLINDEXXVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLINSTRUMENTSBUFFERSGIXPROC = ?*const fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLISASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFENCENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLISOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPATHNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSAMPLERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSEMAPHOREEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSHADERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSTATENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSYNCPROC = ?*const fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLLABELOBJECTEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLLIGHTENVISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLINEWIDTHPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLLINEWIDTHXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLLINKPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLLINKPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?*const fn (GLuint, GLuint, [*c]?*const anyopaque, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLLISTPARAMETERFSGIXPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERFVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERISGIXPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERIVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLLOADMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADPROGRAMNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?*const fn (GLint, GLsizei) callconv(.C) void;
pub const PFNGLLOGICOPPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAP1XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAP2XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAPBUFFERPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPBUFFERARBPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMAPGRID1XOESPROC = ?*const fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID2XOESPROC = ?*const fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) ?*anyopaque;
pub const PFNGLMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATERIALXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?*const fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?*const fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?*const fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXPOPEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLMEMORYBARRIERPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLMINMAXEXTPROC = ?*const fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMULTMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?*const fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BOESPROC = ?*const fn (GLenum, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?*const fn (GLenum, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BOESPROC = ?*const fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?*const fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BOESPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?*const fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BOESPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?*const fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDSTRINGARBPROC = ?*const fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?*const fn (GLsizei, ?*const anyopaque, GLenum) callconv(.C) GLuint;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLNORMALFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?*const fn (GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELPROC = ?*const fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLORTHOFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLORTHOXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPASSTEXCOORDATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLPASSTHROUGHXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?*const fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, [*c]GLuint) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHRANGENVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHSNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHPARAMETERFNVPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERINVPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLPATHSTRINGNVPROC = ?*const fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPIXELDATARANGENVPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPIXELMAPXPROC = ?*const fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPIXELSTOREFPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELSTOREIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELSTOREXPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFSGISPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFVSGISPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERISGISPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERIVSGISPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPIXELTRANSFERXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELZOOMXOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOINTALONGPATHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub const PFNGLPOINTPARAMETERFPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFSGISPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVSGISPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLPOINTSIZEXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLPOLLASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLPOLLINSTRUMENTSSGIXPROC = ?*const fn ([*c]GLint) callconv(.C) GLint;
pub const PFNGLPOLYGONMODEPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESXOESPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPROGRAMBINARYPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?*const fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ?*const fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?*const fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DEXTPROC = ?*const fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?*const fn (GLuint, GLint, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DEXTPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DEXTPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DEXTPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHDEBUGGROUPPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLQUERYCOUNTERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLQUERYMATRIXXOESPROC = ?*const fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?*const fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLQUERYRESOURCENVPROC = ?*const fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub const PFNGLQUERYRESOURCETAGNVPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLRASTERPOS2XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?*const fn (GLuint, GLboolean) callconv(.C) void;
pub const PFNGLREADBUFFERPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLREADINSTRUMENTSSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLREADPIXELSPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSARBPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLRECTXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRECTXVOESPROC = ?*const fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?*const fn (GLenum, GLsizei, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?*const fn (GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?*const fn (GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLROTATEXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?*const fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?*const fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMAPATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMASKIPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCALEXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCISSORPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLSEMAPHOREPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLSETFENCENVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSETINVARIANTEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSHADERBINARYPROC = ?*const fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLSHADEROP1EXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP2EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP3EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?*const fn (GLboolean) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSTARTINSTRUMENTSSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSTATECAPTURENVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILCLEARTAGEXTPROC = ?*const fn (GLsizei, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILOPPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTOPINSTRUMENTSSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?*const fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLSWIZZLEEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSYNCTEXTUREINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTANGENT3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTANGENT3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTANGENT3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTANGENT3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTESTFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTOBJECTAPPLEPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXBUFFERPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERARBPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1BOESPROC = ?*const fn (GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1HNVPROC = ?*const fn (GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1XOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2BOESPROC = ?*const fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2HNVPROC = ?*const fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXENVXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTMEMNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERFPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTEXTUREBUFFERPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?*const fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURECOLORMASKSGISPROC = ?*const fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREVIEWPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRACKMATRIXNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?*const fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ?*const fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTRANSLATEXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLUNIFORM1DPROC = ?*const fn (GLint, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1FPROC = ?*const fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FARBPROC = ?*const fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?*const fn (GLint, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64NVPROC = ?*const fn (GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1IARBPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1UIPROC = ?*const fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UIEXTPROC = ?*const fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2DPROC = ?*const fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2FPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FARBPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?*const fn (GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2UIPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3IPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3IARBPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4IPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4IARBPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?*const fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORMUI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLUNMAPBUFFERPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPBUFFERARBPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLUSEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?*const fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVDPAUFININVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLVDPAUINITNVPROC = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVDPAUISSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?*const fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVARIANTBVEXTPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVARIANTDVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVARIANTFVEXTPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVARIANTIVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVARIANTSVEXTPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVARIANTUBVEXTPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVARIANTUIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVARIANTUSVEXTPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEX2BOESPROC = ?*const fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2HNVPROC = ?*const fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2XOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?*const fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?*const fn (GLuint, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?*const fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?*const fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?*const fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?*const fn (GLuint, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBLENDARBPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?*const fn (GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?*const fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIEWPORTPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLWEIGHTBVARBPROC = ?*const fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLWEIGHTDVARBPROC = ?*const fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTFVARBPROC = ?*const fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTIVARBPROC = ?*const fn (GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLWEIGHTSVARBPROC = ?*const fn (GLint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLWEIGHTUBVARBPROC = ?*const fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLWEIGHTUIVARBPROC = ?*const fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLWEIGHTUSVARBPROC = ?*const fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLWINDOWPOS2DARBPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?*const fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLWRITEMASKEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var glad_glAccumxOES: PFNGLACCUMXOESPROC;
pub extern var glad_glAcquireKeyedMutexWin32EXT: PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC;
pub extern var glad_glActiveProgramEXT: PFNGLACTIVEPROGRAMEXTPROC;
pub extern var glad_glActiveShaderProgram: PFNGLACTIVESHADERPROGRAMPROC;
pub extern var glad_glActiveStencilFaceEXT: PFNGLACTIVESTENCILFACEEXTPROC;
pub extern var glad_glActiveTexture: PFNGLACTIVETEXTUREPROC;
pub extern var glad_glActiveTextureARB: PFNGLACTIVETEXTUREARBPROC;
pub extern var glad_glActiveVaryingNV: PFNGLACTIVEVARYINGNVPROC;
pub extern var glad_glAlphaFragmentOp1ATI: PFNGLALPHAFRAGMENTOP1ATIPROC;
pub extern var glad_glAlphaFragmentOp2ATI: PFNGLALPHAFRAGMENTOP2ATIPROC;
pub extern var glad_glAlphaFragmentOp3ATI: PFNGLALPHAFRAGMENTOP3ATIPROC;
pub extern var glad_glAlphaFuncxOES: PFNGLALPHAFUNCXOESPROC;
pub extern var glad_glAlphaToCoverageDitherControlNV: PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC;
pub extern var glad_glApplyFramebufferAttachmentCMAAINTEL: PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC;
pub extern var glad_glApplyTextureEXT: PFNGLAPPLYTEXTUREEXTPROC;
pub extern var glad_glAreProgramsResidentNV: PFNGLAREPROGRAMSRESIDENTNVPROC;
pub extern var glad_glAreTexturesResidentEXT: PFNGLARETEXTURESRESIDENTEXTPROC;
pub extern var glad_glArrayElementEXT: PFNGLARRAYELEMENTEXTPROC;
pub extern var glad_glArrayObjectATI: PFNGLARRAYOBJECTATIPROC;
pub extern var glad_glAsyncCopyBufferSubDataNVX: PFNGLASYNCCOPYBUFFERSUBDATANVXPROC;
pub extern var glad_glAsyncCopyImageSubDataNVX: PFNGLASYNCCOPYIMAGESUBDATANVXPROC;
pub extern var glad_glAsyncMarkerSGIX: PFNGLASYNCMARKERSGIXPROC;
pub extern var glad_glAttachObjectARB: PFNGLATTACHOBJECTARBPROC;
pub extern var glad_glAttachShader: PFNGLATTACHSHADERPROC;
pub extern var glad_glBeginConditionalRender: PFNGLBEGINCONDITIONALRENDERPROC;
pub extern var glad_glBeginConditionalRenderNV: PFNGLBEGINCONDITIONALRENDERNVPROC;
pub extern var glad_glBeginConditionalRenderNVX: PFNGLBEGINCONDITIONALRENDERNVXPROC;
pub extern var glad_glBeginFragmentShaderATI: PFNGLBEGINFRAGMENTSHADERATIPROC;
pub extern var glad_glBeginOcclusionQueryNV: PFNGLBEGINOCCLUSIONQUERYNVPROC;
pub extern var glad_glBeginPerfMonitorAMD: PFNGLBEGINPERFMONITORAMDPROC;
pub extern var glad_glBeginPerfQueryINTEL: PFNGLBEGINPERFQUERYINTELPROC;
pub extern var glad_glBeginQuery: PFNGLBEGINQUERYPROC;
pub extern var glad_glBeginQueryARB: PFNGLBEGINQUERYARBPROC;
pub extern var glad_glBeginQueryIndexed: PFNGLBEGINQUERYINDEXEDPROC;
pub extern var glad_glBeginTransformFeedback: PFNGLBEGINTRANSFORMFEEDBACKPROC;
pub extern var glad_glBeginTransformFeedbackEXT: PFNGLBEGINTRANSFORMFEEDBACKEXTPROC;
pub extern var glad_glBeginTransformFeedbackNV: PFNGLBEGINTRANSFORMFEEDBACKNVPROC;
pub extern var glad_glBeginVertexShaderEXT: PFNGLBEGINVERTEXSHADEREXTPROC;
pub extern var glad_glBeginVideoCaptureNV: PFNGLBEGINVIDEOCAPTURENVPROC;
pub extern var glad_glBindAttribLocation: PFNGLBINDATTRIBLOCATIONPROC;
pub extern var glad_glBindAttribLocationARB: PFNGLBINDATTRIBLOCATIONARBPROC;
pub extern var glad_glBindBuffer: PFNGLBINDBUFFERPROC;
pub extern var glad_glBindBufferARB: PFNGLBINDBUFFERARBPROC;
pub extern var glad_glBindBufferBase: PFNGLBINDBUFFERBASEPROC;
pub extern var glad_glBindBufferBaseEXT: PFNGLBINDBUFFERBASEEXTPROC;
pub extern var glad_glBindBufferBaseNV: PFNGLBINDBUFFERBASENVPROC;
pub extern var glad_glBindBufferOffsetEXT: PFNGLBINDBUFFEROFFSETEXTPROC;
pub extern var glad_glBindBufferOffsetNV: PFNGLBINDBUFFEROFFSETNVPROC;
pub extern var glad_glBindBufferRange: PFNGLBINDBUFFERRANGEPROC;
pub extern var glad_glBindBufferRangeEXT: PFNGLBINDBUFFERRANGEEXTPROC;
pub extern var glad_glBindBufferRangeNV: PFNGLBINDBUFFERRANGENVPROC;
pub extern var glad_glBindBuffersBase: PFNGLBINDBUFFERSBASEPROC;
pub extern var glad_glBindBuffersRange: PFNGLBINDBUFFERSRANGEPROC;
pub extern var glad_glBindFragDataLocation: PFNGLBINDFRAGDATALOCATIONPROC;
pub extern var glad_glBindFragDataLocationEXT: PFNGLBINDFRAGDATALOCATIONEXTPROC;
pub extern var glad_glBindFragDataLocationIndexed: PFNGLBINDFRAGDATALOCATIONINDEXEDPROC;
pub extern var glad_glBindFragmentShaderATI: PFNGLBINDFRAGMENTSHADERATIPROC;
pub extern var glad_glBindFramebuffer: PFNGLBINDFRAMEBUFFERPROC;
pub extern var glad_glBindFramebufferEXT: PFNGLBINDFRAMEBUFFEREXTPROC;
pub extern var glad_glBindImageTexture: PFNGLBINDIMAGETEXTUREPROC;
pub extern var glad_glBindImageTextureEXT: PFNGLBINDIMAGETEXTUREEXTPROC;
pub extern var glad_glBindImageTextures: PFNGLBINDIMAGETEXTURESPROC;
pub extern var glad_glBindLightParameterEXT: PFNGLBINDLIGHTPARAMETEREXTPROC;
pub extern var glad_glBindMaterialParameterEXT: PFNGLBINDMATERIALPARAMETEREXTPROC;
pub extern var glad_glBindMultiTextureEXT: PFNGLBINDMULTITEXTUREEXTPROC;
pub extern var glad_glBindParameterEXT: PFNGLBINDPARAMETEREXTPROC;
pub extern var glad_glBindProgramARB: PFNGLBINDPROGRAMARBPROC;
pub extern var glad_glBindProgramNV: PFNGLBINDPROGRAMNVPROC;
pub extern var glad_glBindProgramPipeline: PFNGLBINDPROGRAMPIPELINEPROC;
pub extern var glad_glBindRenderbuffer: PFNGLBINDRENDERBUFFERPROC;
pub extern var glad_glBindRenderbufferEXT: PFNGLBINDRENDERBUFFEREXTPROC;
pub extern var glad_glBindSampler: PFNGLBINDSAMPLERPROC;
pub extern var glad_glBindSamplers: PFNGLBINDSAMPLERSPROC;
pub extern var glad_glBindShadingRateImageNV: PFNGLBINDSHADINGRATEIMAGENVPROC;
pub extern var glad_glBindTexGenParameterEXT: PFNGLBINDTEXGENPARAMETEREXTPROC;
pub extern var glad_glBindTexture: PFNGLBINDTEXTUREPROC;
pub extern var glad_glBindTextureEXT: PFNGLBINDTEXTUREEXTPROC;
pub extern var glad_glBindTextureUnit: PFNGLBINDTEXTUREUNITPROC;
pub extern var glad_glBindTextureUnitParameterEXT: PFNGLBINDTEXTUREUNITPARAMETEREXTPROC;
pub extern var glad_glBindTextures: PFNGLBINDTEXTURESPROC;
pub extern var glad_glBindTransformFeedback: PFNGLBINDTRANSFORMFEEDBACKPROC;
pub extern var glad_glBindTransformFeedbackNV: PFNGLBINDTRANSFORMFEEDBACKNVPROC;
pub extern var glad_glBindVertexArray: PFNGLBINDVERTEXARRAYPROC;
pub extern var glad_glBindVertexArrayAPPLE: PFNGLBINDVERTEXARRAYAPPLEPROC;
pub extern var glad_glBindVertexBuffer: PFNGLBINDVERTEXBUFFERPROC;
pub extern var glad_glBindVertexBuffers: PFNGLBINDVERTEXBUFFERSPROC;
pub extern var glad_glBindVertexShaderEXT: PFNGLBINDVERTEXSHADEREXTPROC;
pub extern var glad_glBindVideoCaptureStreamBufferNV: PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC;
pub extern var glad_glBindVideoCaptureStreamTextureNV: PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC;
pub extern var glad_glBinormal3bEXT: PFNGLBINORMAL3BEXTPROC;
pub extern var glad_glBinormal3bvEXT: PFNGLBINORMAL3BVEXTPROC;
pub extern var glad_glBinormal3dEXT: PFNGLBINORMAL3DEXTPROC;
pub extern var glad_glBinormal3dvEXT: PFNGLBINORMAL3DVEXTPROC;
pub extern var glad_glBinormal3fEXT: PFNGLBINORMAL3FEXTPROC;
pub extern var glad_glBinormal3fvEXT: PFNGLBINORMAL3FVEXTPROC;
pub extern var glad_glBinormal3iEXT: PFNGLBINORMAL3IEXTPROC;
pub extern var glad_glBinormal3ivEXT: PFNGLBINORMAL3IVEXTPROC;
pub extern var glad_glBinormal3sEXT: PFNGLBINORMAL3SEXTPROC;
pub extern var glad_glBinormal3svEXT: PFNGLBINORMAL3SVEXTPROC;
pub extern var glad_glBinormalPointerEXT: PFNGLBINORMALPOINTEREXTPROC;
pub extern var glad_glBitmapxOES: PFNGLBITMAPXOESPROC;
pub extern var glad_glBlendBarrierKHR: PFNGLBLENDBARRIERKHRPROC;
pub extern var glad_glBlendBarrierNV: PFNGLBLENDBARRIERNVPROC;
pub extern var glad_glBlendColor: PFNGLBLENDCOLORPROC;
pub extern var glad_glBlendColorEXT: PFNGLBLENDCOLOREXTPROC;
pub extern var glad_glBlendColorxOES: PFNGLBLENDCOLORXOESPROC;
pub extern var glad_glBlendEquation: PFNGLBLENDEQUATIONPROC;
pub extern var glad_glBlendEquationEXT: PFNGLBLENDEQUATIONEXTPROC;
pub extern var glad_glBlendEquationIndexedAMD: PFNGLBLENDEQUATIONINDEXEDAMDPROC;
pub extern var glad_glBlendEquationSeparate: PFNGLBLENDEQUATIONSEPARATEPROC;
pub extern var glad_glBlendEquationSeparateEXT: PFNGLBLENDEQUATIONSEPARATEEXTPROC;
pub extern var glad_glBlendEquationSeparateIndexedAMD: PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC;
pub extern var glad_glBlendEquationSeparatei: PFNGLBLENDEQUATIONSEPARATEIPROC;
pub extern var glad_glBlendEquationSeparateiARB: PFNGLBLENDEQUATIONSEPARATEIARBPROC;
pub extern var glad_glBlendEquationi: PFNGLBLENDEQUATIONIPROC;
pub extern var glad_glBlendEquationiARB: PFNGLBLENDEQUATIONIARBPROC;
pub extern var glad_glBlendFunc: PFNGLBLENDFUNCPROC;
pub extern var glad_glBlendFuncIndexedAMD: PFNGLBLENDFUNCINDEXEDAMDPROC;
pub extern var glad_glBlendFuncSeparate: PFNGLBLENDFUNCSEPARATEPROC;
pub extern var glad_glBlendFuncSeparateEXT: PFNGLBLENDFUNCSEPARATEEXTPROC;
pub extern var glad_glBlendFuncSeparateINGR: PFNGLBLENDFUNCSEPARATEINGRPROC;
pub extern var glad_glBlendFuncSeparateIndexedAMD: PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC;
pub extern var glad_glBlendFuncSeparatei: PFNGLBLENDFUNCSEPARATEIPROC;
pub extern var glad_glBlendFuncSeparateiARB: PFNGLBLENDFUNCSEPARATEIARBPROC;
pub extern var glad_glBlendFunci: PFNGLBLENDFUNCIPROC;
pub extern var glad_glBlendFunciARB: PFNGLBLENDFUNCIARBPROC;
pub extern var glad_glBlendParameteriNV: PFNGLBLENDPARAMETERINVPROC;
pub extern var glad_glBlitFramebuffer: PFNGLBLITFRAMEBUFFERPROC;
pub extern var glad_glBlitFramebufferEXT: PFNGLBLITFRAMEBUFFEREXTPROC;
pub extern var glad_glBlitNamedFramebuffer: PFNGLBLITNAMEDFRAMEBUFFERPROC;
pub extern var glad_glBufferAddressRangeNV: PFNGLBUFFERADDRESSRANGENVPROC;
pub extern var glad_glBufferAttachMemoryNV: PFNGLBUFFERATTACHMEMORYNVPROC;
pub extern var glad_glBufferData: PFNGLBUFFERDATAPROC;
pub extern var glad_glBufferDataARB: PFNGLBUFFERDATAARBPROC;
pub extern var glad_glBufferPageCommitmentARB: PFNGLBUFFERPAGECOMMITMENTARBPROC;
pub extern var glad_glBufferPageCommitmentMemNV: PFNGLBUFFERPAGECOMMITMENTMEMNVPROC;
pub extern var glad_glBufferParameteriAPPLE: PFNGLBUFFERPARAMETERIAPPLEPROC;
pub extern var glad_glBufferStorage: PFNGLBUFFERSTORAGEPROC;
pub extern var glad_glBufferStorageExternalEXT: PFNGLBUFFERSTORAGEEXTERNALEXTPROC;
pub extern var glad_glBufferStorageMemEXT: PFNGLBUFFERSTORAGEMEMEXTPROC;
pub extern var glad_glBufferSubData: PFNGLBUFFERSUBDATAPROC;
pub extern var glad_glBufferSubDataARB: PFNGLBUFFERSUBDATAARBPROC;
pub extern var glad_glCallCommandListNV: PFNGLCALLCOMMANDLISTNVPROC;
pub extern var glad_glCheckFramebufferStatus: PFNGLCHECKFRAMEBUFFERSTATUSPROC;
pub extern var glad_glCheckFramebufferStatusEXT: PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC;
pub extern var glad_glCheckNamedFramebufferStatus: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC;
pub extern var glad_glCheckNamedFramebufferStatusEXT: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC;
pub extern var glad_glClampColor: PFNGLCLAMPCOLORPROC;
pub extern var glad_glClampColorARB: PFNGLCLAMPCOLORARBPROC;
pub extern var glad_glClear: PFNGLCLEARPROC;
pub extern var glad_glClearAccumxOES: PFNGLCLEARACCUMXOESPROC;
pub extern var glad_glClearBufferData: PFNGLCLEARBUFFERDATAPROC;
pub extern var glad_glClearBufferSubData: PFNGLCLEARBUFFERSUBDATAPROC;
pub extern var glad_glClearBufferfi: PFNGLCLEARBUFFERFIPROC;
pub extern var glad_glClearBufferfv: PFNGLCLEARBUFFERFVPROC;
pub extern var glad_glClearBufferiv: PFNGLCLEARBUFFERIVPROC;
pub extern var glad_glClearBufferuiv: PFNGLCLEARBUFFERUIVPROC;
pub extern var glad_glClearColor: PFNGLCLEARCOLORPROC;
pub extern var glad_glClearColorIiEXT: PFNGLCLEARCOLORIIEXTPROC;
pub extern var glad_glClearColorIuiEXT: PFNGLCLEARCOLORIUIEXTPROC;
pub extern var glad_glClearColorxOES: PFNGLCLEARCOLORXOESPROC;
pub extern var glad_glClearDepth: PFNGLCLEARDEPTHPROC;
pub extern var glad_glClearDepthdNV: PFNGLCLEARDEPTHDNVPROC;
pub extern var glad_glClearDepthf: PFNGLCLEARDEPTHFPROC;
pub extern var glad_glClearDepthfOES: PFNGLCLEARDEPTHFOESPROC;
pub extern var glad_glClearDepthxOES: PFNGLCLEARDEPTHXOESPROC;
pub extern var glad_glClearNamedBufferData: PFNGLCLEARNAMEDBUFFERDATAPROC;
pub extern var glad_glClearNamedBufferDataEXT: PFNGLCLEARNAMEDBUFFERDATAEXTPROC;
pub extern var glad_glClearNamedBufferSubData: PFNGLCLEARNAMEDBUFFERSUBDATAPROC;
pub extern var glad_glClearNamedBufferSubDataEXT: PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC;
pub extern var glad_glClearNamedFramebufferfi: PFNGLCLEARNAMEDFRAMEBUFFERFIPROC;
pub extern var glad_glClearNamedFramebufferfv: PFNGLCLEARNAMEDFRAMEBUFFERFVPROC;
pub extern var glad_glClearNamedFramebufferiv: PFNGLCLEARNAMEDFRAMEBUFFERIVPROC;
pub extern var glad_glClearNamedFramebufferuiv: PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC;
pub extern var glad_glClearStencil: PFNGLCLEARSTENCILPROC;
pub extern var glad_glClearTexImage: PFNGLCLEARTEXIMAGEPROC;
pub extern var glad_glClearTexSubImage: PFNGLCLEARTEXSUBIMAGEPROC;
pub extern var glad_glClientActiveTextureARB: PFNGLCLIENTACTIVETEXTUREARBPROC;
pub extern var glad_glClientActiveVertexStreamATI: PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC;
pub extern var glad_glClientAttribDefaultEXT: PFNGLCLIENTATTRIBDEFAULTEXTPROC;
pub extern var glad_glClientWaitSemaphoreui64NVX: PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC;
pub extern var glad_glClientWaitSync: PFNGLCLIENTWAITSYNCPROC;
pub extern var glad_glClipControl: PFNGLCLIPCONTROLPROC;
pub extern var glad_glClipPlanefOES: PFNGLCLIPPLANEFOESPROC;
pub extern var glad_glClipPlanexOES: PFNGLCLIPPLANEXOESPROC;
pub extern var glad_glColor3fVertex3fSUN: PFNGLCOLOR3FVERTEX3FSUNPROC;
pub extern var glad_glColor3fVertex3fvSUN: PFNGLCOLOR3FVERTEX3FVSUNPROC;
pub extern var glad_glColor3hNV: PFNGLCOLOR3HNVPROC;
pub extern var glad_glColor3hvNV: PFNGLCOLOR3HVNVPROC;
pub extern var glad_glColor3xOES: PFNGLCOLOR3XOESPROC;
pub extern var glad_glColor3xvOES: PFNGLCOLOR3XVOESPROC;
pub extern var glad_glColor4fNormal3fVertex3fSUN: PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glColor4fNormal3fVertex3fvSUN: PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glColor4hNV: PFNGLCOLOR4HNVPROC;
pub extern var glad_glColor4hvNV: PFNGLCOLOR4HVNVPROC;
pub extern var glad_glColor4ubVertex2fSUN: PFNGLCOLOR4UBVERTEX2FSUNPROC;
pub extern var glad_glColor4ubVertex2fvSUN: PFNGLCOLOR4UBVERTEX2FVSUNPROC;
pub extern var glad_glColor4ubVertex3fSUN: PFNGLCOLOR4UBVERTEX3FSUNPROC;
pub extern var glad_glColor4ubVertex3fvSUN: PFNGLCOLOR4UBVERTEX3FVSUNPROC;
pub extern var glad_glColor4xOES: PFNGLCOLOR4XOESPROC;
pub extern var glad_glColor4xvOES: PFNGLCOLOR4XVOESPROC;
pub extern var glad_glColorFormatNV: PFNGLCOLORFORMATNVPROC;
pub extern var glad_glColorFragmentOp1ATI: PFNGLCOLORFRAGMENTOP1ATIPROC;
pub extern var glad_glColorFragmentOp2ATI: PFNGLCOLORFRAGMENTOP2ATIPROC;
pub extern var glad_glColorFragmentOp3ATI: PFNGLCOLORFRAGMENTOP3ATIPROC;
pub extern var glad_glColorMask: PFNGLCOLORMASKPROC;
pub extern var glad_glColorMaskIndexedEXT: PFNGLCOLORMASKINDEXEDEXTPROC;
pub extern var glad_glColorMaski: PFNGLCOLORMASKIPROC;
pub extern var glad_glColorPointerEXT: PFNGLCOLORPOINTEREXTPROC;
pub extern var glad_glColorPointerListIBM: PFNGLCOLORPOINTERLISTIBMPROC;
pub extern var glad_glColorPointervINTEL: PFNGLCOLORPOINTERVINTELPROC;
pub extern var glad_glColorSubTableEXT: PFNGLCOLORSUBTABLEEXTPROC;
pub extern var glad_glColorTableEXT: PFNGLCOLORTABLEEXTPROC;
pub extern var glad_glColorTableParameterfvSGI: PFNGLCOLORTABLEPARAMETERFVSGIPROC;
pub extern var glad_glColorTableParameterivSGI: PFNGLCOLORTABLEPARAMETERIVSGIPROC;
pub extern var glad_glColorTableSGI: PFNGLCOLORTABLESGIPROC;
pub extern var glad_glCombinerInputNV: PFNGLCOMBINERINPUTNVPROC;
pub extern var glad_glCombinerOutputNV: PFNGLCOMBINEROUTPUTNVPROC;
pub extern var glad_glCombinerParameterfNV: PFNGLCOMBINERPARAMETERFNVPROC;
pub extern var glad_glCombinerParameterfvNV: PFNGLCOMBINERPARAMETERFVNVPROC;
pub extern var glad_glCombinerParameteriNV: PFNGLCOMBINERPARAMETERINVPROC;
pub extern var glad_glCombinerParameterivNV: PFNGLCOMBINERPARAMETERIVNVPROC;
pub extern var glad_glCombinerStageParameterfvNV: PFNGLCOMBINERSTAGEPARAMETERFVNVPROC;
pub extern var glad_glCommandListSegmentsNV: PFNGLCOMMANDLISTSEGMENTSNVPROC;
pub extern var glad_glCompileCommandListNV: PFNGLCOMPILECOMMANDLISTNVPROC;
pub extern var glad_glCompileShader: PFNGLCOMPILESHADERPROC;
pub extern var glad_glCompileShaderARB: PFNGLCOMPILESHADERARBPROC;
pub extern var glad_glCompileShaderIncludeARB: PFNGLCOMPILESHADERINCLUDEARBPROC;
pub extern var glad_glCompressedMultiTexImage1DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC;
pub extern var glad_glCompressedMultiTexImage2DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC;
pub extern var glad_glCompressedMultiTexImage3DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC;
pub extern var glad_glCompressedMultiTexSubImage1DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC;
pub extern var glad_glCompressedMultiTexSubImage2DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC;
pub extern var glad_glCompressedMultiTexSubImage3DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC;
pub extern var glad_glCompressedTexImage1D: PFNGLCOMPRESSEDTEXIMAGE1DPROC;
pub extern var glad_glCompressedTexImage1DARB: PFNGLCOMPRESSEDTEXIMAGE1DARBPROC;
pub extern var glad_glCompressedTexImage2D: PFNGLCOMPRESSEDTEXIMAGE2DPROC;
pub extern var glad_glCompressedTexImage2DARB: PFNGLCOMPRESSEDTEXIMAGE2DARBPROC;
pub extern var glad_glCompressedTexImage3D: PFNGLCOMPRESSEDTEXIMAGE3DPROC;
pub extern var glad_glCompressedTexImage3DARB: PFNGLCOMPRESSEDTEXIMAGE3DARBPROC;
pub extern var glad_glCompressedTexSubImage1D: PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC;
pub extern var glad_glCompressedTexSubImage1DARB: PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC;
pub extern var glad_glCompressedTexSubImage2D: PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC;
pub extern var glad_glCompressedTexSubImage2DARB: PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC;
pub extern var glad_glCompressedTexSubImage3D: PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC;
pub extern var glad_glCompressedTexSubImage3DARB: PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC;
pub extern var glad_glCompressedTextureImage1DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC;
pub extern var glad_glCompressedTextureImage2DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC;
pub extern var glad_glCompressedTextureImage3DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC;
pub extern var glad_glCompressedTextureSubImage1D: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC;
pub extern var glad_glCompressedTextureSubImage1DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC;
pub extern var glad_glCompressedTextureSubImage2D: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC;
pub extern var glad_glCompressedTextureSubImage2DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC;
pub extern var glad_glCompressedTextureSubImage3D: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC;
pub extern var glad_glCompressedTextureSubImage3DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC;
pub extern var glad_glConservativeRasterParameterfNV: PFNGLCONSERVATIVERASTERPARAMETERFNVPROC;
pub extern var glad_glConservativeRasterParameteriNV: PFNGLCONSERVATIVERASTERPARAMETERINVPROC;
pub extern var glad_glConvolutionFilter1DEXT: PFNGLCONVOLUTIONFILTER1DEXTPROC;
pub extern var glad_glConvolutionFilter2DEXT: PFNGLCONVOLUTIONFILTER2DEXTPROC;
pub extern var glad_glConvolutionParameterfEXT: PFNGLCONVOLUTIONPARAMETERFEXTPROC;
pub extern var glad_glConvolutionParameterfvEXT: PFNGLCONVOLUTIONPARAMETERFVEXTPROC;
pub extern var glad_glConvolutionParameteriEXT: PFNGLCONVOLUTIONPARAMETERIEXTPROC;
pub extern var glad_glConvolutionParameterivEXT: PFNGLCONVOLUTIONPARAMETERIVEXTPROC;
pub extern var glad_glConvolutionParameterxOES: PFNGLCONVOLUTIONPARAMETERXOESPROC;
pub extern var glad_glConvolutionParameterxvOES: PFNGLCONVOLUTIONPARAMETERXVOESPROC;
pub extern var glad_glCopyBufferSubData: PFNGLCOPYBUFFERSUBDATAPROC;
pub extern var glad_glCopyColorSubTableEXT: PFNGLCOPYCOLORSUBTABLEEXTPROC;
pub extern var glad_glCopyColorTableSGI: PFNGLCOPYCOLORTABLESGIPROC;
pub extern var glad_glCopyConvolutionFilter1DEXT: PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC;
pub extern var glad_glCopyConvolutionFilter2DEXT: PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC;
pub extern var glad_glCopyImageSubData: PFNGLCOPYIMAGESUBDATAPROC;
pub extern var glad_glCopyImageSubDataNV: PFNGLCOPYIMAGESUBDATANVPROC;
pub extern var glad_glCopyMultiTexImage1DEXT: PFNGLCOPYMULTITEXIMAGE1DEXTPROC;
pub extern var glad_glCopyMultiTexImage2DEXT: PFNGLCOPYMULTITEXIMAGE2DEXTPROC;
pub extern var glad_glCopyMultiTexSubImage1DEXT: PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC;
pub extern var glad_glCopyMultiTexSubImage2DEXT: PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC;
pub extern var glad_glCopyMultiTexSubImage3DEXT: PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC;
pub extern var glad_glCopyNamedBufferSubData: PFNGLCOPYNAMEDBUFFERSUBDATAPROC;
pub extern var glad_glCopyPathNV: PFNGLCOPYPATHNVPROC;
pub extern var glad_glCopyTexImage1D: PFNGLCOPYTEXIMAGE1DPROC;
pub extern var glad_glCopyTexImage1DEXT: PFNGLCOPYTEXIMAGE1DEXTPROC;
pub extern var glad_glCopyTexImage2D: PFNGLCOPYTEXIMAGE2DPROC;
pub extern var glad_glCopyTexImage2DEXT: PFNGLCOPYTEXIMAGE2DEXTPROC;
pub extern var glad_glCopyTexSubImage1D: PFNGLCOPYTEXSUBIMAGE1DPROC;
pub extern var glad_glCopyTexSubImage1DEXT: PFNGLCOPYTEXSUBIMAGE1DEXTPROC;
pub extern var glad_glCopyTexSubImage2D: PFNGLCOPYTEXSUBIMAGE2DPROC;
pub extern var glad_glCopyTexSubImage2DEXT: PFNGLCOPYTEXSUBIMAGE2DEXTPROC;
pub extern var glad_glCopyTexSubImage3D: PFNGLCOPYTEXSUBIMAGE3DPROC;
pub extern var glad_glCopyTexSubImage3DEXT: PFNGLCOPYTEXSUBIMAGE3DEXTPROC;
pub extern var glad_glCopyTextureImage1DEXT: PFNGLCOPYTEXTUREIMAGE1DEXTPROC;
pub extern var glad_glCopyTextureImage2DEXT: PFNGLCOPYTEXTUREIMAGE2DEXTPROC;
pub extern var glad_glCopyTextureSubImage1D: PFNGLCOPYTEXTURESUBIMAGE1DPROC;
pub extern var glad_glCopyTextureSubImage1DEXT: PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC;
pub extern var glad_glCopyTextureSubImage2D: PFNGLCOPYTEXTURESUBIMAGE2DPROC;
pub extern var glad_glCopyTextureSubImage2DEXT: PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC;
pub extern var glad_glCopyTextureSubImage3D: PFNGLCOPYTEXTURESUBIMAGE3DPROC;
pub extern var glad_glCopyTextureSubImage3DEXT: PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC;
pub extern var glad_glCoverFillPathInstancedNV: PFNGLCOVERFILLPATHINSTANCEDNVPROC;
pub extern var glad_glCoverFillPathNV: PFNGLCOVERFILLPATHNVPROC;
pub extern var glad_glCoverStrokePathInstancedNV: PFNGLCOVERSTROKEPATHINSTANCEDNVPROC;
pub extern var glad_glCoverStrokePathNV: PFNGLCOVERSTROKEPATHNVPROC;
pub extern var glad_glCoverageModulationNV: PFNGLCOVERAGEMODULATIONNVPROC;
pub extern var glad_glCoverageModulationTableNV: PFNGLCOVERAGEMODULATIONTABLENVPROC;
pub extern var glad_glCreateBuffers: PFNGLCREATEBUFFERSPROC;
pub extern var glad_glCreateCommandListsNV: PFNGLCREATECOMMANDLISTSNVPROC;
pub extern var glad_glCreateFramebuffers: PFNGLCREATEFRAMEBUFFERSPROC;
pub extern var glad_glCreateMemoryObjectsEXT: PFNGLCREATEMEMORYOBJECTSEXTPROC;
pub extern var glad_glCreatePerfQueryINTEL: PFNGLCREATEPERFQUERYINTELPROC;
pub extern var glad_glCreateProgram: PFNGLCREATEPROGRAMPROC;
pub extern var glad_glCreateProgramObjectARB: PFNGLCREATEPROGRAMOBJECTARBPROC;
pub extern var glad_glCreateProgramPipelines: PFNGLCREATEPROGRAMPIPELINESPROC;
pub extern var glad_glCreateProgressFenceNVX: PFNGLCREATEPROGRESSFENCENVXPROC;
pub extern var glad_glCreateQueries: PFNGLCREATEQUERIESPROC;
pub extern var glad_glCreateRenderbuffers: PFNGLCREATERENDERBUFFERSPROC;
pub extern var glad_glCreateSamplers: PFNGLCREATESAMPLERSPROC;
pub extern var glad_glCreateSemaphoresNV: PFNGLCREATESEMAPHORESNVPROC;
pub extern var glad_glCreateShader: PFNGLCREATESHADERPROC;
pub extern var glad_glCreateShaderObjectARB: PFNGLCREATESHADEROBJECTARBPROC;
pub extern var glad_glCreateShaderProgramEXT: PFNGLCREATESHADERPROGRAMEXTPROC;
pub extern var glad_glCreateShaderProgramv: PFNGLCREATESHADERPROGRAMVPROC;
pub extern var glad_glCreateStatesNV: PFNGLCREATESTATESNVPROC;
pub extern var glad_glCreateSyncFromCLeventARB: PFNGLCREATESYNCFROMCLEVENTARBPROC;
pub extern var glad_glCreateTextures: PFNGLCREATETEXTURESPROC;
pub extern var glad_glCreateTransformFeedbacks: PFNGLCREATETRANSFORMFEEDBACKSPROC;
pub extern var glad_glCreateVertexArrays: PFNGLCREATEVERTEXARRAYSPROC;
pub extern var glad_glCullFace: PFNGLCULLFACEPROC;
pub extern var glad_glCullParameterdvEXT: PFNGLCULLPARAMETERDVEXTPROC;
pub extern var glad_glCullParameterfvEXT: PFNGLCULLPARAMETERFVEXTPROC;
pub extern var glad_glCurrentPaletteMatrixARB: PFNGLCURRENTPALETTEMATRIXARBPROC;
pub extern var glad_glDebugMessageCallback: PFNGLDEBUGMESSAGECALLBACKPROC;
pub extern var glad_glDebugMessageCallbackAMD: PFNGLDEBUGMESSAGECALLBACKAMDPROC;
pub extern var glad_glDebugMessageCallbackARB: PFNGLDEBUGMESSAGECALLBACKARBPROC;
pub extern var glad_glDebugMessageControl: PFNGLDEBUGMESSAGECONTROLPROC;
pub extern var glad_glDebugMessageControlARB: PFNGLDEBUGMESSAGECONTROLARBPROC;
pub extern var glad_glDebugMessageEnableAMD: PFNGLDEBUGMESSAGEENABLEAMDPROC;
pub extern var glad_glDebugMessageInsert: PFNGLDEBUGMESSAGEINSERTPROC;
pub extern var glad_glDebugMessageInsertAMD: PFNGLDEBUGMESSAGEINSERTAMDPROC;
pub extern var glad_glDebugMessageInsertARB: PFNGLDEBUGMESSAGEINSERTARBPROC;
pub extern var glad_glDeformSGIX: PFNGLDEFORMSGIXPROC;
pub extern var glad_glDeformationMap3dSGIX: PFNGLDEFORMATIONMAP3DSGIXPROC;
pub extern var glad_glDeformationMap3fSGIX: PFNGLDEFORMATIONMAP3FSGIXPROC;
pub extern var glad_glDeleteAsyncMarkersSGIX: PFNGLDELETEASYNCMARKERSSGIXPROC;
pub extern var glad_glDeleteBuffers: PFNGLDELETEBUFFERSPROC;
pub extern var glad_glDeleteBuffersARB: PFNGLDELETEBUFFERSARBPROC;
pub extern var glad_glDeleteCommandListsNV: PFNGLDELETECOMMANDLISTSNVPROC;
pub extern var glad_glDeleteFencesAPPLE: PFNGLDELETEFENCESAPPLEPROC;
pub extern var glad_glDeleteFencesNV: PFNGLDELETEFENCESNVPROC;
pub extern var glad_glDeleteFragmentShaderATI: PFNGLDELETEFRAGMENTSHADERATIPROC;
pub extern var glad_glDeleteFramebuffers: PFNGLDELETEFRAMEBUFFERSPROC;
pub extern var glad_glDeleteFramebuffersEXT: PFNGLDELETEFRAMEBUFFERSEXTPROC;
pub extern var glad_glDeleteMemoryObjectsEXT: PFNGLDELETEMEMORYOBJECTSEXTPROC;
pub extern var glad_glDeleteNamedStringARB: PFNGLDELETENAMEDSTRINGARBPROC;
pub extern var glad_glDeleteNamesAMD: PFNGLDELETENAMESAMDPROC;
pub extern var glad_glDeleteObjectARB: PFNGLDELETEOBJECTARBPROC;
pub extern var glad_glDeleteOcclusionQueriesNV: PFNGLDELETEOCCLUSIONQUERIESNVPROC;
pub extern var glad_glDeletePathsNV: PFNGLDELETEPATHSNVPROC;
pub extern var glad_glDeletePerfMonitorsAMD: PFNGLDELETEPERFMONITORSAMDPROC;
pub extern var glad_glDeletePerfQueryINTEL: PFNGLDELETEPERFQUERYINTELPROC;
pub extern var glad_glDeleteProgram: PFNGLDELETEPROGRAMPROC;
pub extern var glad_glDeleteProgramPipelines: PFNGLDELETEPROGRAMPIPELINESPROC;
pub extern var glad_glDeleteProgramsARB: PFNGLDELETEPROGRAMSARBPROC;
pub extern var glad_glDeleteProgramsNV: PFNGLDELETEPROGRAMSNVPROC;
pub extern var glad_glDeleteQueries: PFNGLDELETEQUERIESPROC;
pub extern var glad_glDeleteQueriesARB: PFNGLDELETEQUERIESARBPROC;
pub extern var glad_glDeleteQueryResourceTagNV: PFNGLDELETEQUERYRESOURCETAGNVPROC;
pub extern var glad_glDeleteRenderbuffers: PFNGLDELETERENDERBUFFERSPROC;
pub extern var glad_glDeleteRenderbuffersEXT: PFNGLDELETERENDERBUFFERSEXTPROC;
pub extern var glad_glDeleteSamplers: PFNGLDELETESAMPLERSPROC;
pub extern var glad_glDeleteSemaphoresEXT: PFNGLDELETESEMAPHORESEXTPROC;
pub extern var glad_glDeleteShader: PFNGLDELETESHADERPROC;
pub extern var glad_glDeleteStatesNV: PFNGLDELETESTATESNVPROC;
pub extern var glad_glDeleteSync: PFNGLDELETESYNCPROC;
pub extern var glad_glDeleteTextures: PFNGLDELETETEXTURESPROC;
pub extern var glad_glDeleteTexturesEXT: PFNGLDELETETEXTURESEXTPROC;
pub extern var glad_glDeleteTransformFeedbacks: PFNGLDELETETRANSFORMFEEDBACKSPROC;
pub extern var glad_glDeleteTransformFeedbacksNV: PFNGLDELETETRANSFORMFEEDBACKSNVPROC;
pub extern var glad_glDeleteVertexArrays: PFNGLDELETEVERTEXARRAYSPROC;
pub extern var glad_glDeleteVertexArraysAPPLE: PFNGLDELETEVERTEXARRAYSAPPLEPROC;
pub extern var glad_glDeleteVertexShaderEXT: PFNGLDELETEVERTEXSHADEREXTPROC;
pub extern var glad_glDepthBoundsEXT: PFNGLDEPTHBOUNDSEXTPROC;
pub extern var glad_glDepthBoundsdNV: PFNGLDEPTHBOUNDSDNVPROC;
pub extern var glad_glDepthFunc: PFNGLDEPTHFUNCPROC;
pub extern var glad_glDepthMask: PFNGLDEPTHMASKPROC;
pub extern var glad_glDepthRange: PFNGLDEPTHRANGEPROC;
pub extern var glad_glDepthRangeArraydvNV: PFNGLDEPTHRANGEARRAYDVNVPROC;
pub extern var glad_glDepthRangeArrayv: PFNGLDEPTHRANGEARRAYVPROC;
pub extern var glad_glDepthRangeIndexed: PFNGLDEPTHRANGEINDEXEDPROC;
pub extern var glad_glDepthRangeIndexeddNV: PFNGLDEPTHRANGEINDEXEDDNVPROC;
pub extern var glad_glDepthRangedNV: PFNGLDEPTHRANGEDNVPROC;
pub extern var glad_glDepthRangef: PFNGLDEPTHRANGEFPROC;
pub extern var glad_glDepthRangefOES: PFNGLDEPTHRANGEFOESPROC;
pub extern var glad_glDepthRangexOES: PFNGLDEPTHRANGEXOESPROC;
pub extern var glad_glDetachObjectARB: PFNGLDETACHOBJECTARBPROC;
pub extern var glad_glDetachShader: PFNGLDETACHSHADERPROC;
pub extern var glad_glDetailTexFuncSGIS: PFNGLDETAILTEXFUNCSGISPROC;
pub extern var glad_glDisable: PFNGLDISABLEPROC;
pub extern var glad_glDisableClientStateIndexedEXT: PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC;
pub extern var glad_glDisableClientStateiEXT: PFNGLDISABLECLIENTSTATEIEXTPROC;
pub extern var glad_glDisableIndexedEXT: PFNGLDISABLEINDEXEDEXTPROC;
pub extern var glad_glDisableVariantClientStateEXT: PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC;
pub extern var glad_glDisableVertexArrayAttrib: PFNGLDISABLEVERTEXARRAYATTRIBPROC;
pub extern var glad_glDisableVertexArrayAttribEXT: PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC;
pub extern var glad_glDisableVertexArrayEXT: PFNGLDISABLEVERTEXARRAYEXTPROC;
pub extern var glad_glDisableVertexAttribAPPLE: PFNGLDISABLEVERTEXATTRIBAPPLEPROC;
pub extern var glad_glDisableVertexAttribArray: PFNGLDISABLEVERTEXATTRIBARRAYPROC;
pub extern var glad_glDisableVertexAttribArrayARB: PFNGLDISABLEVERTEXATTRIBARRAYARBPROC;
pub extern var glad_glDisablei: PFNGLDISABLEIPROC;
pub extern var glad_glDispatchCompute: PFNGLDISPATCHCOMPUTEPROC;
pub extern var glad_glDispatchComputeGroupSizeARB: PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC;
pub extern var glad_glDispatchComputeIndirect: PFNGLDISPATCHCOMPUTEINDIRECTPROC;
pub extern var glad_glDrawArrays: PFNGLDRAWARRAYSPROC;
pub extern var glad_glDrawArraysEXT: PFNGLDRAWARRAYSEXTPROC;
pub extern var glad_glDrawArraysIndirect: PFNGLDRAWARRAYSINDIRECTPROC;
pub extern var glad_glDrawArraysInstanced: PFNGLDRAWARRAYSINSTANCEDPROC;
pub extern var glad_glDrawArraysInstancedARB: PFNGLDRAWARRAYSINSTANCEDARBPROC;
pub extern var glad_glDrawArraysInstancedBaseInstance: PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC;
pub extern var glad_glDrawArraysInstancedEXT: PFNGLDRAWARRAYSINSTANCEDEXTPROC;
pub extern var glad_glDrawBuffer: PFNGLDRAWBUFFERPROC;
pub extern var glad_glDrawBuffers: PFNGLDRAWBUFFERSPROC;
pub extern var glad_glDrawBuffersARB: PFNGLDRAWBUFFERSARBPROC;
pub extern var glad_glDrawBuffersATI: PFNGLDRAWBUFFERSATIPROC;
pub extern var glad_glDrawCommandsAddressNV: PFNGLDRAWCOMMANDSADDRESSNVPROC;
pub extern var glad_glDrawCommandsNV: PFNGLDRAWCOMMANDSNVPROC;
pub extern var glad_glDrawCommandsStatesAddressNV: PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC;
pub extern var glad_glDrawCommandsStatesNV: PFNGLDRAWCOMMANDSSTATESNVPROC;
pub extern var glad_glDrawElementArrayAPPLE: PFNGLDRAWELEMENTARRAYAPPLEPROC;
pub extern var glad_glDrawElementArrayATI: PFNGLDRAWELEMENTARRAYATIPROC;
pub extern var glad_glDrawElements: PFNGLDRAWELEMENTSPROC;
pub extern var glad_glDrawElementsBaseVertex: PFNGLDRAWELEMENTSBASEVERTEXPROC;
pub extern var glad_glDrawElementsIndirect: PFNGLDRAWELEMENTSINDIRECTPROC;
pub extern var glad_glDrawElementsInstanced: PFNGLDRAWELEMENTSINSTANCEDPROC;
pub extern var glad_glDrawElementsInstancedARB: PFNGLDRAWELEMENTSINSTANCEDARBPROC;
pub extern var glad_glDrawElementsInstancedBaseInstance: PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC;
pub extern var glad_glDrawElementsInstancedBaseVertex: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC;
pub extern var glad_glDrawElementsInstancedBaseVertexBaseInstance: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC;
pub extern var glad_glDrawElementsInstancedEXT: PFNGLDRAWELEMENTSINSTANCEDEXTPROC;
pub extern var glad_glDrawMeshArraysSUN: PFNGLDRAWMESHARRAYSSUNPROC;
pub extern var glad_glDrawMeshTasksIndirectNV: PFNGLDRAWMESHTASKSINDIRECTNVPROC;
pub extern var glad_glDrawMeshTasksNV: PFNGLDRAWMESHTASKSNVPROC;
pub extern var glad_glDrawRangeElementArrayAPPLE: PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC;
pub extern var glad_glDrawRangeElementArrayATI: PFNGLDRAWRANGEELEMENTARRAYATIPROC;
pub extern var glad_glDrawRangeElements: PFNGLDRAWRANGEELEMENTSPROC;
pub extern var glad_glDrawRangeElementsBaseVertex: PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC;
pub extern var glad_glDrawRangeElementsEXT: PFNGLDRAWRANGEELEMENTSEXTPROC;
pub extern var glad_glDrawTextureNV: PFNGLDRAWTEXTURENVPROC;
pub extern var glad_glDrawTransformFeedback: PFNGLDRAWTRANSFORMFEEDBACKPROC;
pub extern var glad_glDrawTransformFeedbackInstanced: PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC;
pub extern var glad_glDrawTransformFeedbackNV: PFNGLDRAWTRANSFORMFEEDBACKNVPROC;
pub extern var glad_glDrawTransformFeedbackStream: PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC;
pub extern var glad_glDrawTransformFeedbackStreamInstanced: PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC;
pub extern var glad_glDrawVkImageNV: PFNGLDRAWVKIMAGENVPROC;
pub extern var glad_glEGLImageTargetTexStorageEXT: PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC;
pub extern var glad_glEGLImageTargetTextureStorageEXT: PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC;
pub extern var glad_glEdgeFlagFormatNV: PFNGLEDGEFLAGFORMATNVPROC;
pub extern var glad_glEdgeFlagPointerEXT: PFNGLEDGEFLAGPOINTEREXTPROC;
pub extern var glad_glEdgeFlagPointerListIBM: PFNGLEDGEFLAGPOINTERLISTIBMPROC;
pub extern var glad_glElementPointerAPPLE: PFNGLELEMENTPOINTERAPPLEPROC;
pub extern var glad_glElementPointerATI: PFNGLELEMENTPOINTERATIPROC;
pub extern var glad_glEnable: PFNGLENABLEPROC;
pub extern var glad_glEnableClientStateIndexedEXT: PFNGLENABLECLIENTSTATEINDEXEDEXTPROC;
pub extern var glad_glEnableClientStateiEXT: PFNGLENABLECLIENTSTATEIEXTPROC;
pub extern var glad_glEnableIndexedEXT: PFNGLENABLEINDEXEDEXTPROC;
pub extern var glad_glEnableVariantClientStateEXT: PFNGLENABLEVARIANTCLIENTSTATEEXTPROC;
pub extern var glad_glEnableVertexArrayAttrib: PFNGLENABLEVERTEXARRAYATTRIBPROC;
pub extern var glad_glEnableVertexArrayAttribEXT: PFNGLENABLEVERTEXARRAYATTRIBEXTPROC;
pub extern var glad_glEnableVertexArrayEXT: PFNGLENABLEVERTEXARRAYEXTPROC;
pub extern var glad_glEnableVertexAttribAPPLE: PFNGLENABLEVERTEXATTRIBAPPLEPROC;
pub extern var glad_glEnableVertexAttribArray: PFNGLENABLEVERTEXATTRIBARRAYPROC;
pub extern var glad_glEnableVertexAttribArrayARB: PFNGLENABLEVERTEXATTRIBARRAYARBPROC;
pub extern var glad_glEnablei: PFNGLENABLEIPROC;
pub extern var glad_glEndConditionalRender: PFNGLENDCONDITIONALRENDERPROC;
pub extern var glad_glEndConditionalRenderNV: PFNGLENDCONDITIONALRENDERNVPROC;
pub extern var glad_glEndConditionalRenderNVX: PFNGLENDCONDITIONALRENDERNVXPROC;
pub extern var glad_glEndFragmentShaderATI: PFNGLENDFRAGMENTSHADERATIPROC;
pub extern var glad_glEndOcclusionQueryNV: PFNGLENDOCCLUSIONQUERYNVPROC;
pub extern var glad_glEndPerfMonitorAMD: PFNGLENDPERFMONITORAMDPROC;
pub extern var glad_glEndPerfQueryINTEL: PFNGLENDPERFQUERYINTELPROC;
pub extern var glad_glEndQuery: PFNGLENDQUERYPROC;
pub extern var glad_glEndQueryARB: PFNGLENDQUERYARBPROC;
pub extern var glad_glEndQueryIndexed: PFNGLENDQUERYINDEXEDPROC;
pub extern var glad_glEndTransformFeedback: PFNGLENDTRANSFORMFEEDBACKPROC;
pub extern var glad_glEndTransformFeedbackEXT: PFNGLENDTRANSFORMFEEDBACKEXTPROC;
pub extern var glad_glEndTransformFeedbackNV: PFNGLENDTRANSFORMFEEDBACKNVPROC;
pub extern var glad_glEndVertexShaderEXT: PFNGLENDVERTEXSHADEREXTPROC;
pub extern var glad_glEndVideoCaptureNV: PFNGLENDVIDEOCAPTURENVPROC;
pub extern var glad_glEvalCoord1xOES: PFNGLEVALCOORD1XOESPROC;
pub extern var glad_glEvalCoord1xvOES: PFNGLEVALCOORD1XVOESPROC;
pub extern var glad_glEvalCoord2xOES: PFNGLEVALCOORD2XOESPROC;
pub extern var glad_glEvalCoord2xvOES: PFNGLEVALCOORD2XVOESPROC;
pub extern var glad_glEvalMapsNV: PFNGLEVALMAPSNVPROC;
pub extern var glad_glEvaluateDepthValuesARB: PFNGLEVALUATEDEPTHVALUESARBPROC;
pub extern var glad_glExecuteProgramNV: PFNGLEXECUTEPROGRAMNVPROC;
pub extern var glad_glExtractComponentEXT: PFNGLEXTRACTCOMPONENTEXTPROC;
pub extern var glad_glFeedbackBufferxOES: PFNGLFEEDBACKBUFFERXOESPROC;
pub extern var glad_glFenceSync: PFNGLFENCESYNCPROC;
pub extern var glad_glFinalCombinerInputNV: PFNGLFINALCOMBINERINPUTNVPROC;
pub extern var glad_glFinish: PFNGLFINISHPROC;
pub extern var glad_glFinishAsyncSGIX: PFNGLFINISHASYNCSGIXPROC;
pub extern var glad_glFinishFenceAPPLE: PFNGLFINISHFENCEAPPLEPROC;
pub extern var glad_glFinishFenceNV: PFNGLFINISHFENCENVPROC;
pub extern var glad_glFinishObjectAPPLE: PFNGLFINISHOBJECTAPPLEPROC;
pub extern var glad_glFinishTextureSUNX: PFNGLFINISHTEXTURESUNXPROC;
pub extern var glad_glFlush: PFNGLFLUSHPROC;
pub extern var glad_glFlushMappedBufferRange: PFNGLFLUSHMAPPEDBUFFERRANGEPROC;
pub extern var glad_glFlushMappedBufferRangeAPPLE: PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC;
pub extern var glad_glFlushMappedNamedBufferRange: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC;
pub extern var glad_glFlushMappedNamedBufferRangeEXT: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC;
pub extern var glad_glFlushPixelDataRangeNV: PFNGLFLUSHPIXELDATARANGENVPROC;
pub extern var glad_glFlushRasterSGIX: PFNGLFLUSHRASTERSGIXPROC;
pub extern var glad_glFlushStaticDataIBM: PFNGLFLUSHSTATICDATAIBMPROC;
pub extern var glad_glFlushVertexArrayRangeAPPLE: PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC;
pub extern var glad_glFlushVertexArrayRangeNV: PFNGLFLUSHVERTEXARRAYRANGENVPROC;
pub extern var glad_glFogCoordFormatNV: PFNGLFOGCOORDFORMATNVPROC;
pub extern var glad_glFogCoordPointerEXT: PFNGLFOGCOORDPOINTEREXTPROC;
pub extern var glad_glFogCoordPointerListIBM: PFNGLFOGCOORDPOINTERLISTIBMPROC;
pub extern var glad_glFogCoorddEXT: PFNGLFOGCOORDDEXTPROC;
pub extern var glad_glFogCoorddvEXT: PFNGLFOGCOORDDVEXTPROC;
pub extern var glad_glFogCoordfEXT: PFNGLFOGCOORDFEXTPROC;
pub extern var glad_glFogCoordfvEXT: PFNGLFOGCOORDFVEXTPROC;
pub extern var glad_glFogCoordhNV: PFNGLFOGCOORDHNVPROC;
pub extern var glad_glFogCoordhvNV: PFNGLFOGCOORDHVNVPROC;
pub extern var glad_glFogFuncSGIS: PFNGLFOGFUNCSGISPROC;
pub extern var glad_glFogxOES: PFNGLFOGXOESPROC;
pub extern var glad_glFogxvOES: PFNGLFOGXVOESPROC;
pub extern var glad_glFragmentColorMaterialSGIX: PFNGLFRAGMENTCOLORMATERIALSGIXPROC;
pub extern var glad_glFragmentCoverageColorNV: PFNGLFRAGMENTCOVERAGECOLORNVPROC;
pub extern var glad_glFragmentLightModelfSGIX: PFNGLFRAGMENTLIGHTMODELFSGIXPROC;
pub extern var glad_glFragmentLightModelfvSGIX: PFNGLFRAGMENTLIGHTMODELFVSGIXPROC;
pub extern var glad_glFragmentLightModeliSGIX: PFNGLFRAGMENTLIGHTMODELISGIXPROC;
pub extern var glad_glFragmentLightModelivSGIX: PFNGLFRAGMENTLIGHTMODELIVSGIXPROC;
pub extern var glad_glFragmentLightfSGIX: PFNGLFRAGMENTLIGHTFSGIXPROC;
pub extern var glad_glFragmentLightfvSGIX: PFNGLFRAGMENTLIGHTFVSGIXPROC;
pub extern var glad_glFragmentLightiSGIX: PFNGLFRAGMENTLIGHTISGIXPROC;
pub extern var glad_glFragmentLightivSGIX: PFNGLFRAGMENTLIGHTIVSGIXPROC;
pub extern var glad_glFragmentMaterialfSGIX: PFNGLFRAGMENTMATERIALFSGIXPROC;
pub extern var glad_glFragmentMaterialfvSGIX: PFNGLFRAGMENTMATERIALFVSGIXPROC;
pub extern var glad_glFragmentMaterialiSGIX: PFNGLFRAGMENTMATERIALISGIXPROC;
pub extern var glad_glFragmentMaterialivSGIX: PFNGLFRAGMENTMATERIALIVSGIXPROC;
pub extern var glad_glFrameTerminatorGREMEDY: PFNGLFRAMETERMINATORGREMEDYPROC;
pub extern var glad_glFrameZoomSGIX: PFNGLFRAMEZOOMSGIXPROC;
pub extern var glad_glFramebufferDrawBufferEXT: PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC;
pub extern var glad_glFramebufferDrawBuffersEXT: PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC;
pub extern var glad_glFramebufferFetchBarrierEXT: PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC;
pub extern var glad_glFramebufferParameteri: PFNGLFRAMEBUFFERPARAMETERIPROC;
pub extern var glad_glFramebufferParameteriMESA: PFNGLFRAMEBUFFERPARAMETERIMESAPROC;
pub extern var glad_glFramebufferReadBufferEXT: PFNGLFRAMEBUFFERREADBUFFEREXTPROC;
pub extern var glad_glFramebufferRenderbuffer: PFNGLFRAMEBUFFERRENDERBUFFERPROC;
pub extern var glad_glFramebufferRenderbufferEXT: PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC;
pub extern var glad_glFramebufferSampleLocationsfvARB: PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC;
pub extern var glad_glFramebufferSampleLocationsfvNV: PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var glad_glFramebufferSamplePositionsfvAMD: PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC;
pub extern var glad_glFramebufferTexture: PFNGLFRAMEBUFFERTEXTUREPROC;
pub extern var glad_glFramebufferTexture1D: PFNGLFRAMEBUFFERTEXTURE1DPROC;
pub extern var glad_glFramebufferTexture1DEXT: PFNGLFRAMEBUFFERTEXTURE1DEXTPROC;
pub extern var glad_glFramebufferTexture2D: PFNGLFRAMEBUFFERTEXTURE2DPROC;
pub extern var glad_glFramebufferTexture2DEXT: PFNGLFRAMEBUFFERTEXTURE2DEXTPROC;
pub extern var glad_glFramebufferTexture3D: PFNGLFRAMEBUFFERTEXTURE3DPROC;
pub extern var glad_glFramebufferTexture3DEXT: PFNGLFRAMEBUFFERTEXTURE3DEXTPROC;
pub extern var glad_glFramebufferTextureARB: PFNGLFRAMEBUFFERTEXTUREARBPROC;
pub extern var glad_glFramebufferTextureEXT: PFNGLFRAMEBUFFERTEXTUREEXTPROC;
pub extern var glad_glFramebufferTextureFaceARB: PFNGLFRAMEBUFFERTEXTUREFACEARBPROC;
pub extern var glad_glFramebufferTextureFaceEXT: PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC;
pub extern var glad_glFramebufferTextureLayer: PFNGLFRAMEBUFFERTEXTURELAYERPROC;
pub extern var glad_glFramebufferTextureLayerARB: PFNGLFRAMEBUFFERTEXTURELAYERARBPROC;
pub extern var glad_glFramebufferTextureLayerEXT: PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC;
pub extern var glad_glFramebufferTextureMultiviewOVR: PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC;
pub extern var glad_glFreeObjectBufferATI: PFNGLFREEOBJECTBUFFERATIPROC;
pub extern var glad_glFrontFace: PFNGLFRONTFACEPROC;
pub extern var glad_glFrustumfOES: PFNGLFRUSTUMFOESPROC;
pub extern var glad_glFrustumxOES: PFNGLFRUSTUMXOESPROC;
pub extern var glad_glGenAsyncMarkersSGIX: PFNGLGENASYNCMARKERSSGIXPROC;
pub extern var glad_glGenBuffers: PFNGLGENBUFFERSPROC;
pub extern var glad_glGenBuffersARB: PFNGLGENBUFFERSARBPROC;
pub extern var glad_glGenFencesAPPLE: PFNGLGENFENCESAPPLEPROC;
pub extern var glad_glGenFencesNV: PFNGLGENFENCESNVPROC;
pub extern var glad_glGenFragmentShadersATI: PFNGLGENFRAGMENTSHADERSATIPROC;
pub extern var glad_glGenFramebuffers: PFNGLGENFRAMEBUFFERSPROC;
pub extern var glad_glGenFramebuffersEXT: PFNGLGENFRAMEBUFFERSEXTPROC;
pub extern var glad_glGenNamesAMD: PFNGLGENNAMESAMDPROC;
pub extern var glad_glGenOcclusionQueriesNV: PFNGLGENOCCLUSIONQUERIESNVPROC;
pub extern var glad_glGenPathsNV: PFNGLGENPATHSNVPROC;
pub extern var glad_glGenPerfMonitorsAMD: PFNGLGENPERFMONITORSAMDPROC;
pub extern var glad_glGenProgramPipelines: PFNGLGENPROGRAMPIPELINESPROC;
pub extern var glad_glGenProgramsARB: PFNGLGENPROGRAMSARBPROC;
pub extern var glad_glGenProgramsNV: PFNGLGENPROGRAMSNVPROC;
pub extern var glad_glGenQueries: PFNGLGENQUERIESPROC;
pub extern var glad_glGenQueriesARB: PFNGLGENQUERIESARBPROC;
pub extern var glad_glGenQueryResourceTagNV: PFNGLGENQUERYRESOURCETAGNVPROC;
pub extern var glad_glGenRenderbuffers: PFNGLGENRENDERBUFFERSPROC;
pub extern var glad_glGenRenderbuffersEXT: PFNGLGENRENDERBUFFERSEXTPROC;
pub extern var glad_glGenSamplers: PFNGLGENSAMPLERSPROC;
pub extern var glad_glGenSemaphoresEXT: PFNGLGENSEMAPHORESEXTPROC;
pub extern var glad_glGenSymbolsEXT: PFNGLGENSYMBOLSEXTPROC;
pub extern var glad_glGenTextures: PFNGLGENTEXTURESPROC;
pub extern var glad_glGenTexturesEXT: PFNGLGENTEXTURESEXTPROC;
pub extern var glad_glGenTransformFeedbacks: PFNGLGENTRANSFORMFEEDBACKSPROC;
pub extern var glad_glGenTransformFeedbacksNV: PFNGLGENTRANSFORMFEEDBACKSNVPROC;
pub extern var glad_glGenVertexArrays: PFNGLGENVERTEXARRAYSPROC;
pub extern var glad_glGenVertexArraysAPPLE: PFNGLGENVERTEXARRAYSAPPLEPROC;
pub extern var glad_glGenVertexShadersEXT: PFNGLGENVERTEXSHADERSEXTPROC;
pub extern var glad_glGenerateMipmap: PFNGLGENERATEMIPMAPPROC;
pub extern var glad_glGenerateMipmapEXT: PFNGLGENERATEMIPMAPEXTPROC;
pub extern var glad_glGenerateMultiTexMipmapEXT: PFNGLGENERATEMULTITEXMIPMAPEXTPROC;
pub extern var glad_glGenerateTextureMipmap: PFNGLGENERATETEXTUREMIPMAPPROC;
pub extern var glad_glGenerateTextureMipmapEXT: PFNGLGENERATETEXTUREMIPMAPEXTPROC;
pub extern var glad_glGetActiveAtomicCounterBufferiv: PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC;
pub extern var glad_glGetActiveAttrib: PFNGLGETACTIVEATTRIBPROC;
pub extern var glad_glGetActiveAttribARB: PFNGLGETACTIVEATTRIBARBPROC;
pub extern var glad_glGetActiveSubroutineName: PFNGLGETACTIVESUBROUTINENAMEPROC;
pub extern var glad_glGetActiveSubroutineUniformName: PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC;
pub extern var glad_glGetActiveSubroutineUniformiv: PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC;
pub extern var glad_glGetActiveUniform: PFNGLGETACTIVEUNIFORMPROC;
pub extern var glad_glGetActiveUniformARB: PFNGLGETACTIVEUNIFORMARBPROC;
pub extern var glad_glGetActiveUniformBlockName: PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC;
pub extern var glad_glGetActiveUniformBlockiv: PFNGLGETACTIVEUNIFORMBLOCKIVPROC;
pub extern var glad_glGetActiveUniformName: PFNGLGETACTIVEUNIFORMNAMEPROC;
pub extern var glad_glGetActiveUniformsiv: PFNGLGETACTIVEUNIFORMSIVPROC;
pub extern var glad_glGetActiveVaryingNV: PFNGLGETACTIVEVARYINGNVPROC;
pub extern var glad_glGetArrayObjectfvATI: PFNGLGETARRAYOBJECTFVATIPROC;
pub extern var glad_glGetArrayObjectivATI: PFNGLGETARRAYOBJECTIVATIPROC;
pub extern var glad_glGetAttachedObjectsARB: PFNGLGETATTACHEDOBJECTSARBPROC;
pub extern var glad_glGetAttachedShaders: PFNGLGETATTACHEDSHADERSPROC;
pub extern var glad_glGetAttribLocation: PFNGLGETATTRIBLOCATIONPROC;
pub extern var glad_glGetAttribLocationARB: PFNGLGETATTRIBLOCATIONARBPROC;
pub extern var glad_glGetBooleanIndexedvEXT: PFNGLGETBOOLEANINDEXEDVEXTPROC;
pub extern var glad_glGetBooleani_v: PFNGLGETBOOLEANI_VPROC;
pub extern var glad_glGetBooleanv: PFNGLGETBOOLEANVPROC;
pub extern var glad_glGetBufferParameteri64v: PFNGLGETBUFFERPARAMETERI64VPROC;
pub extern var glad_glGetBufferParameteriv: PFNGLGETBUFFERPARAMETERIVPROC;
pub extern var glad_glGetBufferParameterivARB: PFNGLGETBUFFERPARAMETERIVARBPROC;
pub extern var glad_glGetBufferParameterui64vNV: PFNGLGETBUFFERPARAMETERUI64VNVPROC;
pub extern var glad_glGetBufferPointerv: PFNGLGETBUFFERPOINTERVPROC;
pub extern var glad_glGetBufferPointervARB: PFNGLGETBUFFERPOINTERVARBPROC;
pub extern var glad_glGetBufferSubData: PFNGLGETBUFFERSUBDATAPROC;
pub extern var glad_glGetBufferSubDataARB: PFNGLGETBUFFERSUBDATAARBPROC;
pub extern var glad_glGetClipPlanefOES: PFNGLGETCLIPPLANEFOESPROC;
pub extern var glad_glGetClipPlanexOES: PFNGLGETCLIPPLANEXOESPROC;
pub extern var glad_glGetColorTableEXT: PFNGLGETCOLORTABLEEXTPROC;
pub extern var glad_glGetColorTableParameterfvEXT: PFNGLGETCOLORTABLEPARAMETERFVEXTPROC;
pub extern var glad_glGetColorTableParameterfvSGI: PFNGLGETCOLORTABLEPARAMETERFVSGIPROC;
pub extern var glad_glGetColorTableParameterivEXT: PFNGLGETCOLORTABLEPARAMETERIVEXTPROC;
pub extern var glad_glGetColorTableParameterivSGI: PFNGLGETCOLORTABLEPARAMETERIVSGIPROC;
pub extern var glad_glGetColorTableSGI: PFNGLGETCOLORTABLESGIPROC;
pub extern var glad_glGetCombinerInputParameterfvNV: PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC;
pub extern var glad_glGetCombinerInputParameterivNV: PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC;
pub extern var glad_glGetCombinerOutputParameterfvNV: PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC;
pub extern var glad_glGetCombinerOutputParameterivNV: PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC;
pub extern var glad_glGetCombinerStageParameterfvNV: PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC;
pub extern var glad_glGetCommandHeaderNV: PFNGLGETCOMMANDHEADERNVPROC;
pub extern var glad_glGetCompressedMultiTexImageEXT: PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC;
pub extern var glad_glGetCompressedTexImage: PFNGLGETCOMPRESSEDTEXIMAGEPROC;
pub extern var glad_glGetCompressedTexImageARB: PFNGLGETCOMPRESSEDTEXIMAGEARBPROC;
pub extern var glad_glGetCompressedTextureImage: PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC;
pub extern var glad_glGetCompressedTextureImageEXT: PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC;
pub extern var glad_glGetCompressedTextureSubImage: PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC;
pub extern var glad_glGetConvolutionFilterEXT: PFNGLGETCONVOLUTIONFILTEREXTPROC;
pub extern var glad_glGetConvolutionParameterfvEXT: PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC;
pub extern var glad_glGetConvolutionParameterivEXT: PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC;
pub extern var glad_glGetConvolutionParameterxvOES: PFNGLGETCONVOLUTIONPARAMETERXVOESPROC;
pub extern var glad_glGetCoverageModulationTableNV: PFNGLGETCOVERAGEMODULATIONTABLENVPROC;
pub extern var glad_glGetDebugMessageLog: PFNGLGETDEBUGMESSAGELOGPROC;
pub extern var glad_glGetDebugMessageLogAMD: PFNGLGETDEBUGMESSAGELOGAMDPROC;
pub extern var glad_glGetDebugMessageLogARB: PFNGLGETDEBUGMESSAGELOGARBPROC;
pub extern var glad_glGetDetailTexFuncSGIS: PFNGLGETDETAILTEXFUNCSGISPROC;
pub extern var glad_glGetDoubleIndexedvEXT: PFNGLGETDOUBLEINDEXEDVEXTPROC;
pub extern var glad_glGetDoublei_v: PFNGLGETDOUBLEI_VPROC;
pub extern var glad_glGetDoublei_vEXT: PFNGLGETDOUBLEI_VEXTPROC;
pub extern var glad_glGetDoublev: PFNGLGETDOUBLEVPROC;
pub extern var glad_glGetError: PFNGLGETERRORPROC;
pub extern var glad_glGetFenceivNV: PFNGLGETFENCEIVNVPROC;
pub extern var glad_glGetFinalCombinerInputParameterfvNV: PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC;
pub extern var glad_glGetFinalCombinerInputParameterivNV: PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC;
pub extern var glad_glGetFirstPerfQueryIdINTEL: PFNGLGETFIRSTPERFQUERYIDINTELPROC;
pub extern var glad_glGetFixedvOES: PFNGLGETFIXEDVOESPROC;
pub extern var glad_glGetFloatIndexedvEXT: PFNGLGETFLOATINDEXEDVEXTPROC;
pub extern var glad_glGetFloati_v: PFNGLGETFLOATI_VPROC;
pub extern var glad_glGetFloati_vEXT: PFNGLGETFLOATI_VEXTPROC;
pub extern var glad_glGetFloatv: PFNGLGETFLOATVPROC;
pub extern var glad_glGetFogFuncSGIS: PFNGLGETFOGFUNCSGISPROC;
pub extern var glad_glGetFragDataIndex: PFNGLGETFRAGDATAINDEXPROC;
pub extern var glad_glGetFragDataLocation: PFNGLGETFRAGDATALOCATIONPROC;
pub extern var glad_glGetFragDataLocationEXT: PFNGLGETFRAGDATALOCATIONEXTPROC;
pub extern var glad_glGetFragmentLightfvSGIX: PFNGLGETFRAGMENTLIGHTFVSGIXPROC;
pub extern var glad_glGetFragmentLightivSGIX: PFNGLGETFRAGMENTLIGHTIVSGIXPROC;
pub extern var glad_glGetFragmentMaterialfvSGIX: PFNGLGETFRAGMENTMATERIALFVSGIXPROC;
pub extern var glad_glGetFragmentMaterialivSGIX: PFNGLGETFRAGMENTMATERIALIVSGIXPROC;
pub extern var glad_glGetFramebufferAttachmentParameteriv: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
pub extern var glad_glGetFramebufferAttachmentParameterivEXT: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC;
pub extern var glad_glGetFramebufferParameterfvAMD: PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC;
pub extern var glad_glGetFramebufferParameteriv: PFNGLGETFRAMEBUFFERPARAMETERIVPROC;
pub extern var glad_glGetFramebufferParameterivEXT: PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC;
pub extern var glad_glGetFramebufferParameterivMESA: PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC;
pub extern var glad_glGetGraphicsResetStatus: PFNGLGETGRAPHICSRESETSTATUSPROC;
pub extern var glad_glGetGraphicsResetStatusARB: PFNGLGETGRAPHICSRESETSTATUSARBPROC;
pub extern var glad_glGetHandleARB: PFNGLGETHANDLEARBPROC;
pub extern var glad_glGetHistogramEXT: PFNGLGETHISTOGRAMEXTPROC;
pub extern var glad_glGetHistogramParameterfvEXT: PFNGLGETHISTOGRAMPARAMETERFVEXTPROC;
pub extern var glad_glGetHistogramParameterivEXT: PFNGLGETHISTOGRAMPARAMETERIVEXTPROC;
pub extern var glad_glGetHistogramParameterxvOES: PFNGLGETHISTOGRAMPARAMETERXVOESPROC;
pub extern var glad_glGetImageHandleARB: PFNGLGETIMAGEHANDLEARBPROC;
pub extern var glad_glGetImageHandleNV: PFNGLGETIMAGEHANDLENVPROC;
pub extern var glad_glGetImageTransformParameterfvHP: PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC;
pub extern var glad_glGetImageTransformParameterivHP: PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC;
pub extern var glad_glGetInfoLogARB: PFNGLGETINFOLOGARBPROC;
pub extern var glad_glGetInstrumentsSGIX: PFNGLGETINSTRUMENTSSGIXPROC;
pub extern var glad_glGetInteger64i_v: PFNGLGETINTEGER64I_VPROC;
pub extern var glad_glGetInteger64v: PFNGLGETINTEGER64VPROC;
pub extern var glad_glGetIntegerIndexedvEXT: PFNGLGETINTEGERINDEXEDVEXTPROC;
pub extern var glad_glGetIntegeri_v: PFNGLGETINTEGERI_VPROC;
pub extern var glad_glGetIntegerui64i_vNV: PFNGLGETINTEGERUI64I_VNVPROC;
pub extern var glad_glGetIntegerui64vNV: PFNGLGETINTEGERUI64VNVPROC;
pub extern var glad_glGetIntegerv: PFNGLGETINTEGERVPROC;
pub extern var glad_glGetInternalformatSampleivNV: PFNGLGETINTERNALFORMATSAMPLEIVNVPROC;
pub extern var glad_glGetInternalformati64v: PFNGLGETINTERNALFORMATI64VPROC;
pub extern var glad_glGetInternalformativ: PFNGLGETINTERNALFORMATIVPROC;
pub extern var glad_glGetInvariantBooleanvEXT: PFNGLGETINVARIANTBOOLEANVEXTPROC;
pub extern var glad_glGetInvariantFloatvEXT: PFNGLGETINVARIANTFLOATVEXTPROC;
pub extern var glad_glGetInvariantIntegervEXT: PFNGLGETINVARIANTINTEGERVEXTPROC;
pub extern var glad_glGetLightxOES: PFNGLGETLIGHTXOESPROC;
pub extern var glad_glGetListParameterfvSGIX: PFNGLGETLISTPARAMETERFVSGIXPROC;
pub extern var glad_glGetListParameterivSGIX: PFNGLGETLISTPARAMETERIVSGIXPROC;
pub extern var glad_glGetLocalConstantBooleanvEXT: PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC;
pub extern var glad_glGetLocalConstantFloatvEXT: PFNGLGETLOCALCONSTANTFLOATVEXTPROC;
pub extern var glad_glGetLocalConstantIntegervEXT: PFNGLGETLOCALCONSTANTINTEGERVEXTPROC;
pub extern var glad_glGetMapAttribParameterfvNV: PFNGLGETMAPATTRIBPARAMETERFVNVPROC;
pub extern var glad_glGetMapAttribParameterivNV: PFNGLGETMAPATTRIBPARAMETERIVNVPROC;
pub extern var glad_glGetMapControlPointsNV: PFNGLGETMAPCONTROLPOINTSNVPROC;
pub extern var glad_glGetMapParameterfvNV: PFNGLGETMAPPARAMETERFVNVPROC;
pub extern var glad_glGetMapParameterivNV: PFNGLGETMAPPARAMETERIVNVPROC;
pub extern var glad_glGetMapxvOES: PFNGLGETMAPXVOESPROC;
pub extern var glad_glGetMaterialxOES: PFNGLGETMATERIALXOESPROC;
pub extern var glad_glGetMemoryObjectDetachedResourcesuivNV: PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC;
pub extern var glad_glGetMemoryObjectParameterivEXT: PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC;
pub extern var glad_glGetMinmaxEXT: PFNGLGETMINMAXEXTPROC;
pub extern var glad_glGetMinmaxParameterfvEXT: PFNGLGETMINMAXPARAMETERFVEXTPROC;
pub extern var glad_glGetMinmaxParameterivEXT: PFNGLGETMINMAXPARAMETERIVEXTPROC;
pub extern var glad_glGetMultiTexEnvfvEXT: PFNGLGETMULTITEXENVFVEXTPROC;
pub extern var glad_glGetMultiTexEnvivEXT: PFNGLGETMULTITEXENVIVEXTPROC;
pub extern var glad_glGetMultiTexGendvEXT: PFNGLGETMULTITEXGENDVEXTPROC;
pub extern var glad_glGetMultiTexGenfvEXT: PFNGLGETMULTITEXGENFVEXTPROC;
pub extern var glad_glGetMultiTexGenivEXT: PFNGLGETMULTITEXGENIVEXTPROC;
pub extern var glad_glGetMultiTexImageEXT: PFNGLGETMULTITEXIMAGEEXTPROC;
pub extern var glad_glGetMultiTexLevelParameterfvEXT: PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC;
pub extern var glad_glGetMultiTexLevelParameterivEXT: PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC;
pub extern var glad_glGetMultiTexParameterIivEXT: PFNGLGETMULTITEXPARAMETERIIVEXTPROC;
pub extern var glad_glGetMultiTexParameterIuivEXT: PFNGLGETMULTITEXPARAMETERIUIVEXTPROC;
pub extern var glad_glGetMultiTexParameterfvEXT: PFNGLGETMULTITEXPARAMETERFVEXTPROC;
pub extern var glad_glGetMultiTexParameterivEXT: PFNGLGETMULTITEXPARAMETERIVEXTPROC;
pub extern var glad_glGetMultisamplefv: PFNGLGETMULTISAMPLEFVPROC;
pub extern var glad_glGetMultisamplefvNV: PFNGLGETMULTISAMPLEFVNVPROC;
pub extern var glad_glGetNamedBufferParameteri64v: PFNGLGETNAMEDBUFFERPARAMETERI64VPROC;
pub extern var glad_glGetNamedBufferParameteriv: PFNGLGETNAMEDBUFFERPARAMETERIVPROC;
pub extern var glad_glGetNamedBufferParameterivEXT: PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC;
pub extern var glad_glGetNamedBufferParameterui64vNV: PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC;
pub extern var glad_glGetNamedBufferPointerv: PFNGLGETNAMEDBUFFERPOINTERVPROC;
pub extern var glad_glGetNamedBufferPointervEXT: PFNGLGETNAMEDBUFFERPOINTERVEXTPROC;
pub extern var glad_glGetNamedBufferSubData: PFNGLGETNAMEDBUFFERSUBDATAPROC;
pub extern var glad_glGetNamedBufferSubDataEXT: PFNGLGETNAMEDBUFFERSUBDATAEXTPROC;
pub extern var glad_glGetNamedFramebufferAttachmentParameteriv: PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
pub extern var glad_glGetNamedFramebufferAttachmentParameterivEXT: PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC;
pub extern var glad_glGetNamedFramebufferParameterfvAMD: PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC;
pub extern var glad_glGetNamedFramebufferParameteriv: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC;
pub extern var glad_glGetNamedFramebufferParameterivEXT: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC;
pub extern var glad_glGetNamedProgramLocalParameterIivEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC;
pub extern var glad_glGetNamedProgramLocalParameterIuivEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC;
pub extern var glad_glGetNamedProgramLocalParameterdvEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC;
pub extern var glad_glGetNamedProgramLocalParameterfvEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC;
pub extern var glad_glGetNamedProgramStringEXT: PFNGLGETNAMEDPROGRAMSTRINGEXTPROC;
pub extern var glad_glGetNamedProgramivEXT: PFNGLGETNAMEDPROGRAMIVEXTPROC;
pub extern var glad_glGetNamedRenderbufferParameteriv: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC;
pub extern var glad_glGetNamedRenderbufferParameterivEXT: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC;
pub extern var glad_glGetNamedStringARB: PFNGLGETNAMEDSTRINGARBPROC;
pub extern var glad_glGetNamedStringivARB: PFNGLGETNAMEDSTRINGIVARBPROC;
pub extern var glad_glGetNextPerfQueryIdINTEL: PFNGLGETNEXTPERFQUERYIDINTELPROC;
pub extern var glad_glGetObjectBufferfvATI: PFNGLGETOBJECTBUFFERFVATIPROC;
pub extern var glad_glGetObjectBufferivATI: PFNGLGETOBJECTBUFFERIVATIPROC;
pub extern var glad_glGetObjectLabel: PFNGLGETOBJECTLABELPROC;
pub extern var glad_glGetObjectLabelEXT: PFNGLGETOBJECTLABELEXTPROC;
pub extern var glad_glGetObjectParameterfvARB: PFNGLGETOBJECTPARAMETERFVARBPROC;
pub extern var glad_glGetObjectParameterivAPPLE: PFNGLGETOBJECTPARAMETERIVAPPLEPROC;
pub extern var glad_glGetObjectParameterivARB: PFNGLGETOBJECTPARAMETERIVARBPROC;
pub extern var glad_glGetObjectPtrLabel: PFNGLGETOBJECTPTRLABELPROC;
pub extern var glad_glGetOcclusionQueryivNV: PFNGLGETOCCLUSIONQUERYIVNVPROC;
pub extern var glad_glGetOcclusionQueryuivNV: PFNGLGETOCCLUSIONQUERYUIVNVPROC;
pub extern var glad_glGetPathCommandsNV: PFNGLGETPATHCOMMANDSNVPROC;
pub extern var glad_glGetPathCoordsNV: PFNGLGETPATHCOORDSNVPROC;
pub extern var glad_glGetPathDashArrayNV: PFNGLGETPATHDASHARRAYNVPROC;
pub extern var glad_glGetPathLengthNV: PFNGLGETPATHLENGTHNVPROC;
pub extern var glad_glGetPathMetricRangeNV: PFNGLGETPATHMETRICRANGENVPROC;
pub extern var glad_glGetPathMetricsNV: PFNGLGETPATHMETRICSNVPROC;
pub extern var glad_glGetPathParameterfvNV: PFNGLGETPATHPARAMETERFVNVPROC;
pub extern var glad_glGetPathParameterivNV: PFNGLGETPATHPARAMETERIVNVPROC;
pub extern var glad_glGetPathSpacingNV: PFNGLGETPATHSPACINGNVPROC;
pub extern var glad_glGetPerfCounterInfoINTEL: PFNGLGETPERFCOUNTERINFOINTELPROC;
pub extern var glad_glGetPerfMonitorCounterDataAMD: PFNGLGETPERFMONITORCOUNTERDATAAMDPROC;
pub extern var glad_glGetPerfMonitorCounterInfoAMD: PFNGLGETPERFMONITORCOUNTERINFOAMDPROC;
pub extern var glad_glGetPerfMonitorCounterStringAMD: PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC;
pub extern var glad_glGetPerfMonitorCountersAMD: PFNGLGETPERFMONITORCOUNTERSAMDPROC;
pub extern var glad_glGetPerfMonitorGroupStringAMD: PFNGLGETPERFMONITORGROUPSTRINGAMDPROC;
pub extern var glad_glGetPerfMonitorGroupsAMD: PFNGLGETPERFMONITORGROUPSAMDPROC;
pub extern var glad_glGetPerfQueryDataINTEL: PFNGLGETPERFQUERYDATAINTELPROC;
pub extern var glad_glGetPerfQueryIdByNameINTEL: PFNGLGETPERFQUERYIDBYNAMEINTELPROC;
pub extern var glad_glGetPerfQueryInfoINTEL: PFNGLGETPERFQUERYINFOINTELPROC;
pub extern var glad_glGetPixelMapxv: PFNGLGETPIXELMAPXVPROC;
pub extern var glad_glGetPixelTexGenParameterfvSGIS: PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC;
pub extern var glad_glGetPixelTexGenParameterivSGIS: PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC;
pub extern var glad_glGetPixelTransformParameterfvEXT: PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC;
pub extern var glad_glGetPixelTransformParameterivEXT: PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC;
pub extern var glad_glGetPointerIndexedvEXT: PFNGLGETPOINTERINDEXEDVEXTPROC;
pub extern var glad_glGetPointeri_vEXT: PFNGLGETPOINTERI_VEXTPROC;
pub extern var glad_glGetPointerv: PFNGLGETPOINTERVPROC;
pub extern var glad_glGetPointervEXT: PFNGLGETPOINTERVEXTPROC;
pub extern var glad_glGetProgramBinary: PFNGLGETPROGRAMBINARYPROC;
pub extern var glad_glGetProgramEnvParameterIivNV: PFNGLGETPROGRAMENVPARAMETERIIVNVPROC;
pub extern var glad_glGetProgramEnvParameterIuivNV: PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC;
pub extern var glad_glGetProgramEnvParameterdvARB: PFNGLGETPROGRAMENVPARAMETERDVARBPROC;
pub extern var glad_glGetProgramEnvParameterfvARB: PFNGLGETPROGRAMENVPARAMETERFVARBPROC;
pub extern var glad_glGetProgramInfoLog: PFNGLGETPROGRAMINFOLOGPROC;
pub extern var glad_glGetProgramInterfaceiv: PFNGLGETPROGRAMINTERFACEIVPROC;
pub extern var glad_glGetProgramLocalParameterIivNV: PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC;
pub extern var glad_glGetProgramLocalParameterIuivNV: PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC;
pub extern var glad_glGetProgramLocalParameterdvARB: PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC;
pub extern var glad_glGetProgramLocalParameterfvARB: PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC;
pub extern var glad_glGetProgramNamedParameterdvNV: PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC;
pub extern var glad_glGetProgramNamedParameterfvNV: PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC;
pub extern var glad_glGetProgramParameterdvNV: PFNGLGETPROGRAMPARAMETERDVNVPROC;
pub extern var glad_glGetProgramParameterfvNV: PFNGLGETPROGRAMPARAMETERFVNVPROC;
pub extern var glad_glGetProgramPipelineInfoLog: PFNGLGETPROGRAMPIPELINEINFOLOGPROC;
pub extern var glad_glGetProgramPipelineiv: PFNGLGETPROGRAMPIPELINEIVPROC;
pub extern var glad_glGetProgramResourceIndex: PFNGLGETPROGRAMRESOURCEINDEXPROC;
pub extern var glad_glGetProgramResourceLocation: PFNGLGETPROGRAMRESOURCELOCATIONPROC;
pub extern var glad_glGetProgramResourceLocationIndex: PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC;
pub extern var glad_glGetProgramResourceName: PFNGLGETPROGRAMRESOURCENAMEPROC;
pub extern var glad_glGetProgramResourcefvNV: PFNGLGETPROGRAMRESOURCEFVNVPROC;
pub extern var glad_glGetProgramResourceiv: PFNGLGETPROGRAMRESOURCEIVPROC;
pub extern var glad_glGetProgramStageiv: PFNGLGETPROGRAMSTAGEIVPROC;
pub extern var glad_glGetProgramStringARB: PFNGLGETPROGRAMSTRINGARBPROC;
pub extern var glad_glGetProgramStringNV: PFNGLGETPROGRAMSTRINGNVPROC;
pub extern var glad_glGetProgramSubroutineParameteruivNV: PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC;
pub extern var glad_glGetProgramiv: PFNGLGETPROGRAMIVPROC;
pub extern var glad_glGetProgramivARB: PFNGLGETPROGRAMIVARBPROC;
pub extern var glad_glGetProgramivNV: PFNGLGETPROGRAMIVNVPROC;
pub extern var glad_glGetQueryBufferObjecti64v: PFNGLGETQUERYBUFFEROBJECTI64VPROC;
pub extern var glad_glGetQueryBufferObjectiv: PFNGLGETQUERYBUFFEROBJECTIVPROC;
pub extern var glad_glGetQueryBufferObjectui64v: PFNGLGETQUERYBUFFEROBJECTUI64VPROC;
pub extern var glad_glGetQueryBufferObjectuiv: PFNGLGETQUERYBUFFEROBJECTUIVPROC;
pub extern var glad_glGetQueryIndexediv: PFNGLGETQUERYINDEXEDIVPROC;
pub extern var glad_glGetQueryObjecti64v: PFNGLGETQUERYOBJECTI64VPROC;
pub extern var glad_glGetQueryObjecti64vEXT: PFNGLGETQUERYOBJECTI64VEXTPROC;
pub extern var glad_glGetQueryObjectiv: PFNGLGETQUERYOBJECTIVPROC;
pub extern var glad_glGetQueryObjectivARB: PFNGLGETQUERYOBJECTIVARBPROC;
pub extern var glad_glGetQueryObjectui64v: PFNGLGETQUERYOBJECTUI64VPROC;
pub extern var glad_glGetQueryObjectui64vEXT: PFNGLGETQUERYOBJECTUI64VEXTPROC;
pub extern var glad_glGetQueryObjectuiv: PFNGLGETQUERYOBJECTUIVPROC;
pub extern var glad_glGetQueryObjectuivARB: PFNGLGETQUERYOBJECTUIVARBPROC;
pub extern var glad_glGetQueryiv: PFNGLGETQUERYIVPROC;
pub extern var glad_glGetQueryivARB: PFNGLGETQUERYIVARBPROC;
pub extern var glad_glGetRenderbufferParameteriv: PFNGLGETRENDERBUFFERPARAMETERIVPROC;
pub extern var glad_glGetRenderbufferParameterivEXT: PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC;
pub extern var glad_glGetSamplerParameterIiv: PFNGLGETSAMPLERPARAMETERIIVPROC;
pub extern var glad_glGetSamplerParameterIuiv: PFNGLGETSAMPLERPARAMETERIUIVPROC;
pub extern var glad_glGetSamplerParameterfv: PFNGLGETSAMPLERPARAMETERFVPROC;
pub extern var glad_glGetSamplerParameteriv: PFNGLGETSAMPLERPARAMETERIVPROC;
pub extern var glad_glGetSemaphoreParameterivNV: PFNGLGETSEMAPHOREPARAMETERIVNVPROC;
pub extern var glad_glGetSemaphoreParameterui64vEXT: PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC;
pub extern var glad_glGetSeparableFilterEXT: PFNGLGETSEPARABLEFILTEREXTPROC;
pub extern var glad_glGetShaderInfoLog: PFNGLGETSHADERINFOLOGPROC;
pub extern var glad_glGetShaderPrecisionFormat: PFNGLGETSHADERPRECISIONFORMATPROC;
pub extern var glad_glGetShaderSource: PFNGLGETSHADERSOURCEPROC;
pub extern var glad_glGetShaderSourceARB: PFNGLGETSHADERSOURCEARBPROC;
pub extern var glad_glGetShaderiv: PFNGLGETSHADERIVPROC;
pub extern var glad_glGetShadingRateImagePaletteNV: PFNGLGETSHADINGRATEIMAGEPALETTENVPROC;
pub extern var glad_glGetShadingRateSampleLocationivNV: PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC;
pub extern var glad_glGetSharpenTexFuncSGIS: PFNGLGETSHARPENTEXFUNCSGISPROC;
pub extern var glad_glGetStageIndexNV: PFNGLGETSTAGEINDEXNVPROC;
pub extern var glad_glGetString: PFNGLGETSTRINGPROC;
pub extern var glad_glGetStringi: PFNGLGETSTRINGIPROC;
pub extern var glad_glGetSubroutineIndex: PFNGLGETSUBROUTINEINDEXPROC;
pub extern var glad_glGetSubroutineUniformLocation: PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC;
pub extern var glad_glGetSynciv: PFNGLGETSYNCIVPROC;
pub extern var glad_glGetTexBumpParameterfvATI: PFNGLGETTEXBUMPPARAMETERFVATIPROC;
pub extern var glad_glGetTexBumpParameterivATI: PFNGLGETTEXBUMPPARAMETERIVATIPROC;
pub extern var glad_glGetTexEnvxvOES: PFNGLGETTEXENVXVOESPROC;
pub extern var glad_glGetTexFilterFuncSGIS: PFNGLGETTEXFILTERFUNCSGISPROC;
pub extern var glad_glGetTexGenxvOES: PFNGLGETTEXGENXVOESPROC;
pub extern var glad_glGetTexImage: PFNGLGETTEXIMAGEPROC;
pub extern var glad_glGetTexLevelParameterfv: PFNGLGETTEXLEVELPARAMETERFVPROC;
pub extern var glad_glGetTexLevelParameteriv: PFNGLGETTEXLEVELPARAMETERIVPROC;
pub extern var glad_glGetTexLevelParameterxvOES: PFNGLGETTEXLEVELPARAMETERXVOESPROC;
pub extern var glad_glGetTexParameterIiv: PFNGLGETTEXPARAMETERIIVPROC;
pub extern var glad_glGetTexParameterIivEXT: PFNGLGETTEXPARAMETERIIVEXTPROC;
pub extern var glad_glGetTexParameterIuiv: PFNGLGETTEXPARAMETERIUIVPROC;
pub extern var glad_glGetTexParameterIuivEXT: PFNGLGETTEXPARAMETERIUIVEXTPROC;
pub extern var glad_glGetTexParameterPointervAPPLE: PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC;
pub extern var glad_glGetTexParameterfv: PFNGLGETTEXPARAMETERFVPROC;
pub extern var glad_glGetTexParameteriv: PFNGLGETTEXPARAMETERIVPROC;
pub extern var glad_glGetTexParameterxvOES: PFNGLGETTEXPARAMETERXVOESPROC;
pub extern var glad_glGetTextureHandleARB: PFNGLGETTEXTUREHANDLEARBPROC;
pub extern var glad_glGetTextureHandleNV: PFNGLGETTEXTUREHANDLENVPROC;
pub extern var glad_glGetTextureImage: PFNGLGETTEXTUREIMAGEPROC;
pub extern var glad_glGetTextureImageEXT: PFNGLGETTEXTUREIMAGEEXTPROC;
pub extern var glad_glGetTextureLevelParameterfv: PFNGLGETTEXTURELEVELPARAMETERFVPROC;
pub extern var glad_glGetTextureLevelParameterfvEXT: PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC;
pub extern var glad_glGetTextureLevelParameteriv: PFNGLGETTEXTURELEVELPARAMETERIVPROC;
pub extern var glad_glGetTextureLevelParameterivEXT: PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC;
pub extern var glad_glGetTextureParameterIiv: PFNGLGETTEXTUREPARAMETERIIVPROC;
pub extern var glad_glGetTextureParameterIivEXT: PFNGLGETTEXTUREPARAMETERIIVEXTPROC;
pub extern var glad_glGetTextureParameterIuiv: PFNGLGETTEXTUREPARAMETERIUIVPROC;
pub extern var glad_glGetTextureParameterIuivEXT: PFNGLGETTEXTUREPARAMETERIUIVEXTPROC;
pub extern var glad_glGetTextureParameterfv: PFNGLGETTEXTUREPARAMETERFVPROC;
pub extern var glad_glGetTextureParameterfvEXT: PFNGLGETTEXTUREPARAMETERFVEXTPROC;
pub extern var glad_glGetTextureParameteriv: PFNGLGETTEXTUREPARAMETERIVPROC;
pub extern var glad_glGetTextureParameterivEXT: PFNGLGETTEXTUREPARAMETERIVEXTPROC;
pub extern var glad_glGetTextureSamplerHandleARB: PFNGLGETTEXTURESAMPLERHANDLEARBPROC;
pub extern var glad_glGetTextureSamplerHandleNV: PFNGLGETTEXTURESAMPLERHANDLENVPROC;
pub extern var glad_glGetTextureSubImage: PFNGLGETTEXTURESUBIMAGEPROC;
pub extern var glad_glGetTrackMatrixivNV: PFNGLGETTRACKMATRIXIVNVPROC;
pub extern var glad_glGetTransformFeedbackVarying: PFNGLGETTRANSFORMFEEDBACKVARYINGPROC;
pub extern var glad_glGetTransformFeedbackVaryingEXT: PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC;
pub extern var glad_glGetTransformFeedbackVaryingNV: PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC;
pub extern var glad_glGetTransformFeedbacki64_v: PFNGLGETTRANSFORMFEEDBACKI64_VPROC;
pub extern var glad_glGetTransformFeedbacki_v: PFNGLGETTRANSFORMFEEDBACKI_VPROC;
pub extern var glad_glGetTransformFeedbackiv: PFNGLGETTRANSFORMFEEDBACKIVPROC;
pub extern var glad_glGetUniformBlockIndex: PFNGLGETUNIFORMBLOCKINDEXPROC;
pub extern var glad_glGetUniformBufferSizeEXT: PFNGLGETUNIFORMBUFFERSIZEEXTPROC;
pub extern var glad_glGetUniformIndices: PFNGLGETUNIFORMINDICESPROC;
pub extern var glad_glGetUniformLocation: PFNGLGETUNIFORMLOCATIONPROC;
pub extern var glad_glGetUniformLocationARB: PFNGLGETUNIFORMLOCATIONARBPROC;
pub extern var glad_glGetUniformOffsetEXT: PFNGLGETUNIFORMOFFSETEXTPROC;
pub extern var glad_glGetUniformSubroutineuiv: PFNGLGETUNIFORMSUBROUTINEUIVPROC;
pub extern var glad_glGetUniformdv: PFNGLGETUNIFORMDVPROC;
pub extern var glad_glGetUniformfv: PFNGLGETUNIFORMFVPROC;
pub extern var glad_glGetUniformfvARB: PFNGLGETUNIFORMFVARBPROC;
pub extern var glad_glGetUniformi64vARB: PFNGLGETUNIFORMI64VARBPROC;
pub extern var glad_glGetUniformi64vNV: PFNGLGETUNIFORMI64VNVPROC;
pub extern var glad_glGetUniformiv: PFNGLGETUNIFORMIVPROC;
pub extern var glad_glGetUniformivARB: PFNGLGETUNIFORMIVARBPROC;
pub extern var glad_glGetUniformui64vARB: PFNGLGETUNIFORMUI64VARBPROC;
pub extern var glad_glGetUniformui64vNV: PFNGLGETUNIFORMUI64VNVPROC;
pub extern var glad_glGetUniformuiv: PFNGLGETUNIFORMUIVPROC;
pub extern var glad_glGetUniformuivEXT: PFNGLGETUNIFORMUIVEXTPROC;
pub extern var glad_glGetUnsignedBytei_vEXT: PFNGLGETUNSIGNEDBYTEI_VEXTPROC;
pub extern var glad_glGetUnsignedBytevEXT: PFNGLGETUNSIGNEDBYTEVEXTPROC;
pub extern var glad_glGetVariantArrayObjectfvATI: PFNGLGETVARIANTARRAYOBJECTFVATIPROC;
pub extern var glad_glGetVariantArrayObjectivATI: PFNGLGETVARIANTARRAYOBJECTIVATIPROC;
pub extern var glad_glGetVariantBooleanvEXT: PFNGLGETVARIANTBOOLEANVEXTPROC;
pub extern var glad_glGetVariantFloatvEXT: PFNGLGETVARIANTFLOATVEXTPROC;
pub extern var glad_glGetVariantIntegervEXT: PFNGLGETVARIANTINTEGERVEXTPROC;
pub extern var glad_glGetVariantPointervEXT: PFNGLGETVARIANTPOINTERVEXTPROC;
pub extern var glad_glGetVaryingLocationNV: PFNGLGETVARYINGLOCATIONNVPROC;
pub extern var glad_glGetVertexArrayIndexed64iv: PFNGLGETVERTEXARRAYINDEXED64IVPROC;
pub extern var glad_glGetVertexArrayIndexediv: PFNGLGETVERTEXARRAYINDEXEDIVPROC;
pub extern var glad_glGetVertexArrayIntegeri_vEXT: PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC;
pub extern var glad_glGetVertexArrayIntegervEXT: PFNGLGETVERTEXARRAYINTEGERVEXTPROC;
pub extern var glad_glGetVertexArrayPointeri_vEXT: PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC;
pub extern var glad_glGetVertexArrayPointervEXT: PFNGLGETVERTEXARRAYPOINTERVEXTPROC;
pub extern var glad_glGetVertexArrayiv: PFNGLGETVERTEXARRAYIVPROC;
pub extern var glad_glGetVertexAttribArrayObjectfvATI: PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC;
pub extern var glad_glGetVertexAttribArrayObjectivATI: PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC;
pub extern var glad_glGetVertexAttribIiv: PFNGLGETVERTEXATTRIBIIVPROC;
pub extern var glad_glGetVertexAttribIivEXT: PFNGLGETVERTEXATTRIBIIVEXTPROC;
pub extern var glad_glGetVertexAttribIuiv: PFNGLGETVERTEXATTRIBIUIVPROC;
pub extern var glad_glGetVertexAttribIuivEXT: PFNGLGETVERTEXATTRIBIUIVEXTPROC;
pub extern var glad_glGetVertexAttribLdv: PFNGLGETVERTEXATTRIBLDVPROC;
pub extern var glad_glGetVertexAttribLdvEXT: PFNGLGETVERTEXATTRIBLDVEXTPROC;
pub extern var glad_glGetVertexAttribLi64vNV: PFNGLGETVERTEXATTRIBLI64VNVPROC;
pub extern var glad_glGetVertexAttribLui64vARB: PFNGLGETVERTEXATTRIBLUI64VARBPROC;
pub extern var glad_glGetVertexAttribLui64vNV: PFNGLGETVERTEXATTRIBLUI64VNVPROC;
pub extern var glad_glGetVertexAttribPointerv: PFNGLGETVERTEXATTRIBPOINTERVPROC;
pub extern var glad_glGetVertexAttribPointervARB: PFNGLGETVERTEXATTRIBPOINTERVARBPROC;
pub extern var glad_glGetVertexAttribPointervNV: PFNGLGETVERTEXATTRIBPOINTERVNVPROC;
pub extern var glad_glGetVertexAttribdv: PFNGLGETVERTEXATTRIBDVPROC;
pub extern var glad_glGetVertexAttribdvARB: PFNGLGETVERTEXATTRIBDVARBPROC;
pub extern var glad_glGetVertexAttribdvNV: PFNGLGETVERTEXATTRIBDVNVPROC;
pub extern var glad_glGetVertexAttribfv: PFNGLGETVERTEXATTRIBFVPROC;
pub extern var glad_glGetVertexAttribfvARB: PFNGLGETVERTEXATTRIBFVARBPROC;
pub extern var glad_glGetVertexAttribfvNV: PFNGLGETVERTEXATTRIBFVNVPROC;
pub extern var glad_glGetVertexAttribiv: PFNGLGETVERTEXATTRIBIVPROC;
pub extern var glad_glGetVertexAttribivARB: PFNGLGETVERTEXATTRIBIVARBPROC;
pub extern var glad_glGetVertexAttribivNV: PFNGLGETVERTEXATTRIBIVNVPROC;
pub extern var glad_glGetVideoCaptureStreamdvNV: PFNGLGETVIDEOCAPTURESTREAMDVNVPROC;
pub extern var glad_glGetVideoCaptureStreamfvNV: PFNGLGETVIDEOCAPTURESTREAMFVNVPROC;
pub extern var glad_glGetVideoCaptureStreamivNV: PFNGLGETVIDEOCAPTURESTREAMIVNVPROC;
pub extern var glad_glGetVideoCaptureivNV: PFNGLGETVIDEOCAPTUREIVNVPROC;
pub extern var glad_glGetVideoi64vNV: PFNGLGETVIDEOI64VNVPROC;
pub extern var glad_glGetVideoivNV: PFNGLGETVIDEOIVNVPROC;
pub extern var glad_glGetVideoui64vNV: PFNGLGETVIDEOUI64VNVPROC;
pub extern var glad_glGetVideouivNV: PFNGLGETVIDEOUIVNVPROC;
pub extern var glad_glGetVkProcAddrNV: PFNGLGETVKPROCADDRNVPROC;
pub extern var glad_glGetnCompressedTexImage: PFNGLGETNCOMPRESSEDTEXIMAGEPROC;
pub extern var glad_glGetnCompressedTexImageARB: PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC;
pub extern var glad_glGetnTexImage: PFNGLGETNTEXIMAGEPROC;
pub extern var glad_glGetnTexImageARB: PFNGLGETNTEXIMAGEARBPROC;
pub extern var glad_glGetnUniformdv: PFNGLGETNUNIFORMDVPROC;
pub extern var glad_glGetnUniformdvARB: PFNGLGETNUNIFORMDVARBPROC;
pub extern var glad_glGetnUniformfv: PFNGLGETNUNIFORMFVPROC;
pub extern var glad_glGetnUniformfvARB: PFNGLGETNUNIFORMFVARBPROC;
pub extern var glad_glGetnUniformi64vARB: PFNGLGETNUNIFORMI64VARBPROC;
pub extern var glad_glGetnUniformiv: PFNGLGETNUNIFORMIVPROC;
pub extern var glad_glGetnUniformivARB: PFNGLGETNUNIFORMIVARBPROC;
pub extern var glad_glGetnUniformui64vARB: PFNGLGETNUNIFORMUI64VARBPROC;
pub extern var glad_glGetnUniformuiv: PFNGLGETNUNIFORMUIVPROC;
pub extern var glad_glGetnUniformuivARB: PFNGLGETNUNIFORMUIVARBPROC;
pub extern var glad_glGlobalAlphaFactorbSUN: PFNGLGLOBALALPHAFACTORBSUNPROC;
pub extern var glad_glGlobalAlphaFactordSUN: PFNGLGLOBALALPHAFACTORDSUNPROC;
pub extern var glad_glGlobalAlphaFactorfSUN: PFNGLGLOBALALPHAFACTORFSUNPROC;
pub extern var glad_glGlobalAlphaFactoriSUN: PFNGLGLOBALALPHAFACTORISUNPROC;
pub extern var glad_glGlobalAlphaFactorsSUN: PFNGLGLOBALALPHAFACTORSSUNPROC;
pub extern var glad_glGlobalAlphaFactorubSUN: PFNGLGLOBALALPHAFACTORUBSUNPROC;
pub extern var glad_glGlobalAlphaFactoruiSUN: PFNGLGLOBALALPHAFACTORUISUNPROC;
pub extern var glad_glGlobalAlphaFactorusSUN: PFNGLGLOBALALPHAFACTORUSSUNPROC;
pub extern var glad_glHint: PFNGLHINTPROC;
pub extern var glad_glHintPGI: PFNGLHINTPGIPROC;
pub extern var glad_glHistogramEXT: PFNGLHISTOGRAMEXTPROC;
pub extern var glad_glIglooInterfaceSGIX: PFNGLIGLOOINTERFACESGIXPROC;
pub extern var glad_glImageTransformParameterfHP: PFNGLIMAGETRANSFORMPARAMETERFHPPROC;
pub extern var glad_glImageTransformParameterfvHP: PFNGLIMAGETRANSFORMPARAMETERFVHPPROC;
pub extern var glad_glImageTransformParameteriHP: PFNGLIMAGETRANSFORMPARAMETERIHPPROC;
pub extern var glad_glImageTransformParameterivHP: PFNGLIMAGETRANSFORMPARAMETERIVHPPROC;
pub extern var glad_glImportMemoryFdEXT: PFNGLIMPORTMEMORYFDEXTPROC;
pub extern var glad_glImportMemoryWin32HandleEXT: PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC;
pub extern var glad_glImportMemoryWin32NameEXT: PFNGLIMPORTMEMORYWIN32NAMEEXTPROC;
pub extern var glad_glImportSemaphoreFdEXT: PFNGLIMPORTSEMAPHOREFDEXTPROC;
pub extern var glad_glImportSemaphoreWin32HandleEXT: PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC;
pub extern var glad_glImportSemaphoreWin32NameEXT: PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC;
pub extern var glad_glImportSyncEXT: PFNGLIMPORTSYNCEXTPROC;
pub extern var glad_glIndexFormatNV: PFNGLINDEXFORMATNVPROC;
pub extern var glad_glIndexFuncEXT: PFNGLINDEXFUNCEXTPROC;
pub extern var glad_glIndexMaterialEXT: PFNGLINDEXMATERIALEXTPROC;
pub extern var glad_glIndexPointerEXT: PFNGLINDEXPOINTEREXTPROC;
pub extern var glad_glIndexPointerListIBM: PFNGLINDEXPOINTERLISTIBMPROC;
pub extern var glad_glIndexxOES: PFNGLINDEXXOESPROC;
pub extern var glad_glIndexxvOES: PFNGLINDEXXVOESPROC;
pub extern var glad_glInsertComponentEXT: PFNGLINSERTCOMPONENTEXTPROC;
pub extern var glad_glInsertEventMarkerEXT: PFNGLINSERTEVENTMARKEREXTPROC;
pub extern var glad_glInstrumentsBufferSGIX: PFNGLINSTRUMENTSBUFFERSGIXPROC;
pub extern var glad_glInterpolatePathsNV: PFNGLINTERPOLATEPATHSNVPROC;
pub extern var glad_glInvalidateBufferData: PFNGLINVALIDATEBUFFERDATAPROC;
pub extern var glad_glInvalidateBufferSubData: PFNGLINVALIDATEBUFFERSUBDATAPROC;
pub extern var glad_glInvalidateFramebuffer: PFNGLINVALIDATEFRAMEBUFFERPROC;
pub extern var glad_glInvalidateNamedFramebufferData: PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC;
pub extern var glad_glInvalidateNamedFramebufferSubData: PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC;
pub extern var glad_glInvalidateSubFramebuffer: PFNGLINVALIDATESUBFRAMEBUFFERPROC;
pub extern var glad_glInvalidateTexImage: PFNGLINVALIDATETEXIMAGEPROC;
pub extern var glad_glInvalidateTexSubImage: PFNGLINVALIDATETEXSUBIMAGEPROC;
pub extern var glad_glIsAsyncMarkerSGIX: PFNGLISASYNCMARKERSGIXPROC;
pub extern var glad_glIsBuffer: PFNGLISBUFFERPROC;
pub extern var glad_glIsBufferARB: PFNGLISBUFFERARBPROC;
pub extern var glad_glIsBufferResidentNV: PFNGLISBUFFERRESIDENTNVPROC;
pub extern var glad_glIsCommandListNV: PFNGLISCOMMANDLISTNVPROC;
pub extern var glad_glIsEnabled: PFNGLISENABLEDPROC;
pub extern var glad_glIsEnabledIndexedEXT: PFNGLISENABLEDINDEXEDEXTPROC;
pub extern var glad_glIsEnabledi: PFNGLISENABLEDIPROC;
pub extern var glad_glIsFenceAPPLE: PFNGLISFENCEAPPLEPROC;
pub extern var glad_glIsFenceNV: PFNGLISFENCENVPROC;
pub extern var glad_glIsFramebuffer: PFNGLISFRAMEBUFFERPROC;
pub extern var glad_glIsFramebufferEXT: PFNGLISFRAMEBUFFEREXTPROC;
pub extern var glad_glIsImageHandleResidentARB: PFNGLISIMAGEHANDLERESIDENTARBPROC;
pub extern var glad_glIsImageHandleResidentNV: PFNGLISIMAGEHANDLERESIDENTNVPROC;
pub extern var glad_glIsMemoryObjectEXT: PFNGLISMEMORYOBJECTEXTPROC;
pub extern var glad_glIsNameAMD: PFNGLISNAMEAMDPROC;
pub extern var glad_glIsNamedBufferResidentNV: PFNGLISNAMEDBUFFERRESIDENTNVPROC;
pub extern var glad_glIsNamedStringARB: PFNGLISNAMEDSTRINGARBPROC;
pub extern var glad_glIsObjectBufferATI: PFNGLISOBJECTBUFFERATIPROC;
pub extern var glad_glIsOcclusionQueryNV: PFNGLISOCCLUSIONQUERYNVPROC;
pub extern var glad_glIsPathNV: PFNGLISPATHNVPROC;
pub extern var glad_glIsPointInFillPathNV: PFNGLISPOINTINFILLPATHNVPROC;
pub extern var glad_glIsPointInStrokePathNV: PFNGLISPOINTINSTROKEPATHNVPROC;
pub extern var glad_glIsProgram: PFNGLISPROGRAMPROC;
pub extern var glad_glIsProgramARB: PFNGLISPROGRAMARBPROC;
pub extern var glad_glIsProgramNV: PFNGLISPROGRAMNVPROC;
pub extern var glad_glIsProgramPipeline: PFNGLISPROGRAMPIPELINEPROC;
pub extern var glad_glIsQuery: PFNGLISQUERYPROC;
pub extern var glad_glIsQueryARB: PFNGLISQUERYARBPROC;
pub extern var glad_glIsRenderbuffer: PFNGLISRENDERBUFFERPROC;
pub extern var glad_glIsRenderbufferEXT: PFNGLISRENDERBUFFEREXTPROC;
pub extern var glad_glIsSampler: PFNGLISSAMPLERPROC;
pub extern var glad_glIsSemaphoreEXT: PFNGLISSEMAPHOREEXTPROC;
pub extern var glad_glIsShader: PFNGLISSHADERPROC;
pub extern var glad_glIsStateNV: PFNGLISSTATENVPROC;
pub extern var glad_glIsSync: PFNGLISSYNCPROC;
pub extern var glad_glIsTexture: PFNGLISTEXTUREPROC;
pub extern var glad_glIsTextureEXT: PFNGLISTEXTUREEXTPROC;
pub extern var glad_glIsTextureHandleResidentARB: PFNGLISTEXTUREHANDLERESIDENTARBPROC;
pub extern var glad_glIsTextureHandleResidentNV: PFNGLISTEXTUREHANDLERESIDENTNVPROC;
pub extern var glad_glIsTransformFeedback: PFNGLISTRANSFORMFEEDBACKPROC;
pub extern var glad_glIsTransformFeedbackNV: PFNGLISTRANSFORMFEEDBACKNVPROC;
pub extern var glad_glIsVariantEnabledEXT: PFNGLISVARIANTENABLEDEXTPROC;
pub extern var glad_glIsVertexArray: PFNGLISVERTEXARRAYPROC;
pub extern var glad_glIsVertexArrayAPPLE: PFNGLISVERTEXARRAYAPPLEPROC;
pub extern var glad_glIsVertexAttribEnabledAPPLE: PFNGLISVERTEXATTRIBENABLEDAPPLEPROC;
pub extern var glad_glLGPUCopyImageSubDataNVX: PFNGLLGPUCOPYIMAGESUBDATANVXPROC;
pub extern var glad_glLGPUInterlockNVX: PFNGLLGPUINTERLOCKNVXPROC;
pub extern var glad_glLGPUNamedBufferSubDataNVX: PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC;
pub extern var glad_glLabelObjectEXT: PFNGLLABELOBJECTEXTPROC;
pub extern var glad_glLightEnviSGIX: PFNGLLIGHTENVISGIXPROC;
pub extern var glad_glLightModelxOES: PFNGLLIGHTMODELXOESPROC;
pub extern var glad_glLightModelxvOES: PFNGLLIGHTMODELXVOESPROC;
pub extern var glad_glLightxOES: PFNGLLIGHTXOESPROC;
pub extern var glad_glLightxvOES: PFNGLLIGHTXVOESPROC;
pub extern var glad_glLineWidth: PFNGLLINEWIDTHPROC;
pub extern var glad_glLineWidthxOES: PFNGLLINEWIDTHXOESPROC;
pub extern var glad_glLinkProgram: PFNGLLINKPROGRAMPROC;
pub extern var glad_glLinkProgramARB: PFNGLLINKPROGRAMARBPROC;
pub extern var glad_glListDrawCommandsStatesClientNV: PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC;
pub extern var glad_glListParameterfSGIX: PFNGLLISTPARAMETERFSGIXPROC;
pub extern var glad_glListParameterfvSGIX: PFNGLLISTPARAMETERFVSGIXPROC;
pub extern var glad_glListParameteriSGIX: PFNGLLISTPARAMETERISGIXPROC;
pub extern var glad_glListParameterivSGIX: PFNGLLISTPARAMETERIVSGIXPROC;
pub extern var glad_glLoadIdentityDeformationMapSGIX: PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC;
pub extern var glad_glLoadMatrixxOES: PFNGLLOADMATRIXXOESPROC;
pub extern var glad_glLoadProgramNV: PFNGLLOADPROGRAMNVPROC;
pub extern var glad_glLoadTransposeMatrixdARB: PFNGLLOADTRANSPOSEMATRIXDARBPROC;
pub extern var glad_glLoadTransposeMatrixfARB: PFNGLLOADTRANSPOSEMATRIXFARBPROC;
pub extern var glad_glLoadTransposeMatrixxOES: PFNGLLOADTRANSPOSEMATRIXXOESPROC;
pub extern var glad_glLockArraysEXT: PFNGLLOCKARRAYSEXTPROC;
pub extern var glad_glLogicOp: PFNGLLOGICOPPROC;
pub extern var glad_glMakeBufferNonResidentNV: PFNGLMAKEBUFFERNONRESIDENTNVPROC;
pub extern var glad_glMakeBufferResidentNV: PFNGLMAKEBUFFERRESIDENTNVPROC;
pub extern var glad_glMakeImageHandleNonResidentARB: PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC;
pub extern var glad_glMakeImageHandleNonResidentNV: PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC;
pub extern var glad_glMakeImageHandleResidentARB: PFNGLMAKEIMAGEHANDLERESIDENTARBPROC;
pub extern var glad_glMakeImageHandleResidentNV: PFNGLMAKEIMAGEHANDLERESIDENTNVPROC;
pub extern var glad_glMakeNamedBufferNonResidentNV: PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC;
pub extern var glad_glMakeNamedBufferResidentNV: PFNGLMAKENAMEDBUFFERRESIDENTNVPROC;
pub extern var glad_glMakeTextureHandleNonResidentARB: PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC;
pub extern var glad_glMakeTextureHandleNonResidentNV: PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC;
pub extern var glad_glMakeTextureHandleResidentARB: PFNGLMAKETEXTUREHANDLERESIDENTARBPROC;
pub extern var glad_glMakeTextureHandleResidentNV: PFNGLMAKETEXTUREHANDLERESIDENTNVPROC;
pub extern var glad_glMap1xOES: PFNGLMAP1XOESPROC;
pub extern var glad_glMap2xOES: PFNGLMAP2XOESPROC;
pub extern var glad_glMapBuffer: PFNGLMAPBUFFERPROC;
pub extern var glad_glMapBufferARB: PFNGLMAPBUFFERARBPROC;
pub extern var glad_glMapBufferRange: PFNGLMAPBUFFERRANGEPROC;
pub extern var glad_glMapControlPointsNV: PFNGLMAPCONTROLPOINTSNVPROC;
pub extern var glad_glMapGrid1xOES: PFNGLMAPGRID1XOESPROC;
pub extern var glad_glMapGrid2xOES: PFNGLMAPGRID2XOESPROC;
pub extern var glad_glMapNamedBuffer: PFNGLMAPNAMEDBUFFERPROC;
pub extern var glad_glMapNamedBufferEXT: PFNGLMAPNAMEDBUFFEREXTPROC;
pub extern var glad_glMapNamedBufferRange: PFNGLMAPNAMEDBUFFERRANGEPROC;
pub extern var glad_glMapNamedBufferRangeEXT: PFNGLMAPNAMEDBUFFERRANGEEXTPROC;
pub extern var glad_glMapObjectBufferATI: PFNGLMAPOBJECTBUFFERATIPROC;
pub extern var glad_glMapParameterfvNV: PFNGLMAPPARAMETERFVNVPROC;
pub extern var glad_glMapParameterivNV: PFNGLMAPPARAMETERIVNVPROC;
pub extern var glad_glMapTexture2DINTEL: PFNGLMAPTEXTURE2DINTELPROC;
pub extern var glad_glMapVertexAttrib1dAPPLE: PFNGLMAPVERTEXATTRIB1DAPPLEPROC;
pub extern var glad_glMapVertexAttrib1fAPPLE: PFNGLMAPVERTEXATTRIB1FAPPLEPROC;
pub extern var glad_glMapVertexAttrib2dAPPLE: PFNGLMAPVERTEXATTRIB2DAPPLEPROC;
pub extern var glad_glMapVertexAttrib2fAPPLE: PFNGLMAPVERTEXATTRIB2FAPPLEPROC;
pub extern var glad_glMaterialxOES: PFNGLMATERIALXOESPROC;
pub extern var glad_glMaterialxvOES: PFNGLMATERIALXVOESPROC;
pub extern var glad_glMatrixFrustumEXT: PFNGLMATRIXFRUSTUMEXTPROC;
pub extern var glad_glMatrixIndexPointerARB: PFNGLMATRIXINDEXPOINTERARBPROC;
pub extern var glad_glMatrixIndexubvARB: PFNGLMATRIXINDEXUBVARBPROC;
pub extern var glad_glMatrixIndexuivARB: PFNGLMATRIXINDEXUIVARBPROC;
pub extern var glad_glMatrixIndexusvARB: PFNGLMATRIXINDEXUSVARBPROC;
pub extern var glad_glMatrixLoad3x2fNV: PFNGLMATRIXLOAD3X2FNVPROC;
pub extern var glad_glMatrixLoad3x3fNV: PFNGLMATRIXLOAD3X3FNVPROC;
pub extern var glad_glMatrixLoadIdentityEXT: PFNGLMATRIXLOADIDENTITYEXTPROC;
pub extern var glad_glMatrixLoadTranspose3x3fNV: PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC;
pub extern var glad_glMatrixLoadTransposedEXT: PFNGLMATRIXLOADTRANSPOSEDEXTPROC;
pub extern var glad_glMatrixLoadTransposefEXT: PFNGLMATRIXLOADTRANSPOSEFEXTPROC;
pub extern var glad_glMatrixLoaddEXT: PFNGLMATRIXLOADDEXTPROC;
pub extern var glad_glMatrixLoadfEXT: PFNGLMATRIXLOADFEXTPROC;
pub extern var glad_glMatrixMult3x2fNV: PFNGLMATRIXMULT3X2FNVPROC;
pub extern var glad_glMatrixMult3x3fNV: PFNGLMATRIXMULT3X3FNVPROC;
pub extern var glad_glMatrixMultTranspose3x3fNV: PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC;
pub extern var glad_glMatrixMultTransposedEXT: PFNGLMATRIXMULTTRANSPOSEDEXTPROC;
pub extern var glad_glMatrixMultTransposefEXT: PFNGLMATRIXMULTTRANSPOSEFEXTPROC;
pub extern var glad_glMatrixMultdEXT: PFNGLMATRIXMULTDEXTPROC;
pub extern var glad_glMatrixMultfEXT: PFNGLMATRIXMULTFEXTPROC;
pub extern var glad_glMatrixOrthoEXT: PFNGLMATRIXORTHOEXTPROC;
pub extern var glad_glMatrixPopEXT: PFNGLMATRIXPOPEXTPROC;
pub extern var glad_glMatrixPushEXT: PFNGLMATRIXPUSHEXTPROC;
pub extern var glad_glMatrixRotatedEXT: PFNGLMATRIXROTATEDEXTPROC;
pub extern var glad_glMatrixRotatefEXT: PFNGLMATRIXROTATEFEXTPROC;
pub extern var glad_glMatrixScaledEXT: PFNGLMATRIXSCALEDEXTPROC;
pub extern var glad_glMatrixScalefEXT: PFNGLMATRIXSCALEFEXTPROC;
pub extern var glad_glMatrixTranslatedEXT: PFNGLMATRIXTRANSLATEDEXTPROC;
pub extern var glad_glMatrixTranslatefEXT: PFNGLMATRIXTRANSLATEFEXTPROC;
pub extern var glad_glMaxShaderCompilerThreadsARB: PFNGLMAXSHADERCOMPILERTHREADSARBPROC;
pub extern var glad_glMaxShaderCompilerThreadsKHR: PFNGLMAXSHADERCOMPILERTHREADSKHRPROC;
pub extern var glad_glMemoryBarrier: PFNGLMEMORYBARRIERPROC;
pub extern var glad_glMemoryBarrierByRegion: PFNGLMEMORYBARRIERBYREGIONPROC;
pub extern var glad_glMemoryBarrierEXT: PFNGLMEMORYBARRIEREXTPROC;
pub extern var glad_glMemoryObjectParameterivEXT: PFNGLMEMORYOBJECTPARAMETERIVEXTPROC;
pub extern var glad_glMinSampleShading: PFNGLMINSAMPLESHADINGPROC;
pub extern var glad_glMinSampleShadingARB: PFNGLMINSAMPLESHADINGARBPROC;
pub extern var glad_glMinmaxEXT: PFNGLMINMAXEXTPROC;
pub extern var glad_glMultMatrixxOES: PFNGLMULTMATRIXXOESPROC;
pub extern var glad_glMultTransposeMatrixdARB: PFNGLMULTTRANSPOSEMATRIXDARBPROC;
pub extern var glad_glMultTransposeMatrixfARB: PFNGLMULTTRANSPOSEMATRIXFARBPROC;
pub extern var glad_glMultTransposeMatrixxOES: PFNGLMULTTRANSPOSEMATRIXXOESPROC;
pub extern var glad_glMultiDrawArrays: PFNGLMULTIDRAWARRAYSPROC;
pub extern var glad_glMultiDrawArraysEXT: PFNGLMULTIDRAWARRAYSEXTPROC;
pub extern var glad_glMultiDrawArraysIndirect: PFNGLMULTIDRAWARRAYSINDIRECTPROC;
pub extern var glad_glMultiDrawArraysIndirectAMD: PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC;
pub extern var glad_glMultiDrawArraysIndirectBindlessCountNV: PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC;
pub extern var glad_glMultiDrawArraysIndirectBindlessNV: PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC;
pub extern var glad_glMultiDrawArraysIndirectCount: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC;
pub extern var glad_glMultiDrawArraysIndirectCountARB: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC;
pub extern var glad_glMultiDrawElementArrayAPPLE: PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC;
pub extern var glad_glMultiDrawElements: PFNGLMULTIDRAWELEMENTSPROC;
pub extern var glad_glMultiDrawElementsBaseVertex: PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC;
pub extern var glad_glMultiDrawElementsEXT: PFNGLMULTIDRAWELEMENTSEXTPROC;
pub extern var glad_glMultiDrawElementsIndirect: PFNGLMULTIDRAWELEMENTSINDIRECTPROC;
pub extern var glad_glMultiDrawElementsIndirectAMD: PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC;
pub extern var glad_glMultiDrawElementsIndirectBindlessCountNV: PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC;
pub extern var glad_glMultiDrawElementsIndirectBindlessNV: PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC;
pub extern var glad_glMultiDrawElementsIndirectCount: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC;
pub extern var glad_glMultiDrawElementsIndirectCountARB: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC;
pub extern var glad_glMultiDrawMeshTasksIndirectCountNV: PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC;
pub extern var glad_glMultiDrawMeshTasksIndirectNV: PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC;
pub extern var glad_glMultiDrawRangeElementArrayAPPLE: PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC;
pub extern var glad_glMultiModeDrawArraysIBM: PFNGLMULTIMODEDRAWARRAYSIBMPROC;
pub extern var glad_glMultiModeDrawElementsIBM: PFNGLMULTIMODEDRAWELEMENTSIBMPROC;
pub extern var glad_glMultiTexBufferEXT: PFNGLMULTITEXBUFFEREXTPROC;
pub extern var glad_glMultiTexCoord1bOES: PFNGLMULTITEXCOORD1BOESPROC;
pub extern var glad_glMultiTexCoord1bvOES: PFNGLMULTITEXCOORD1BVOESPROC;
pub extern var glad_glMultiTexCoord1dARB: PFNGLMULTITEXCOORD1DARBPROC;
pub extern var glad_glMultiTexCoord1dvARB: PFNGLMULTITEXCOORD1DVARBPROC;
pub extern var glad_glMultiTexCoord1fARB: PFNGLMULTITEXCOORD1FARBPROC;
pub extern var glad_glMultiTexCoord1fvARB: PFNGLMULTITEXCOORD1FVARBPROC;
pub extern var glad_glMultiTexCoord1hNV: PFNGLMULTITEXCOORD1HNVPROC;
pub extern var glad_glMultiTexCoord1hvNV: PFNGLMULTITEXCOORD1HVNVPROC;
pub extern var glad_glMultiTexCoord1iARB: PFNGLMULTITEXCOORD1IARBPROC;
pub extern var glad_glMultiTexCoord1ivARB: PFNGLMULTITEXCOORD1IVARBPROC;
pub extern var glad_glMultiTexCoord1sARB: PFNGLMULTITEXCOORD1SARBPROC;
pub extern var glad_glMultiTexCoord1svARB: PFNGLMULTITEXCOORD1SVARBPROC;
pub extern var glad_glMultiTexCoord1xOES: PFNGLMULTITEXCOORD1XOESPROC;
pub extern var glad_glMultiTexCoord1xvOES: PFNGLMULTITEXCOORD1XVOESPROC;
pub extern var glad_glMultiTexCoord2bOES: PFNGLMULTITEXCOORD2BOESPROC;
pub extern var glad_glMultiTexCoord2bvOES: PFNGLMULTITEXCOORD2BVOESPROC;
pub extern var glad_glMultiTexCoord2dARB: PFNGLMULTITEXCOORD2DARBPROC;
pub extern var glad_glMultiTexCoord2dvARB: PFNGLMULTITEXCOORD2DVARBPROC;
pub extern var glad_glMultiTexCoord2fARB: PFNGLMULTITEXCOORD2FARBPROC;
pub extern var glad_glMultiTexCoord2fvARB: PFNGLMULTITEXCOORD2FVARBPROC;
pub extern var glad_glMultiTexCoord2hNV: PFNGLMULTITEXCOORD2HNVPROC;
pub extern var glad_glMultiTexCoord2hvNV: PFNGLMULTITEXCOORD2HVNVPROC;
pub extern var glad_glMultiTexCoord2iARB: PFNGLMULTITEXCOORD2IARBPROC;
pub extern var glad_glMultiTexCoord2ivARB: PFNGLMULTITEXCOORD2IVARBPROC;
pub extern var glad_glMultiTexCoord2sARB: PFNGLMULTITEXCOORD2SARBPROC;
pub extern var glad_glMultiTexCoord2svARB: PFNGLMULTITEXCOORD2SVARBPROC;
pub extern var glad_glMultiTexCoord2xOES: PFNGLMULTITEXCOORD2XOESPROC;
pub extern var glad_glMultiTexCoord2xvOES: PFNGLMULTITEXCOORD2XVOESPROC;
pub extern var glad_glMultiTexCoord3bOES: PFNGLMULTITEXCOORD3BOESPROC;
pub extern var glad_glMultiTexCoord3bvOES: PFNGLMULTITEXCOORD3BVOESPROC;
pub extern var glad_glMultiTexCoord3dARB: PFNGLMULTITEXCOORD3DARBPROC;
pub extern var glad_glMultiTexCoord3dvARB: PFNGLMULTITEXCOORD3DVARBPROC;
pub extern var glad_glMultiTexCoord3fARB: PFNGLMULTITEXCOORD3FARBPROC;
pub extern var glad_glMultiTexCoord3fvARB: PFNGLMULTITEXCOORD3FVARBPROC;
pub extern var glad_glMultiTexCoord3hNV: PFNGLMULTITEXCOORD3HNVPROC;
pub extern var glad_glMultiTexCoord3hvNV: PFNGLMULTITEXCOORD3HVNVPROC;
pub extern var glad_glMultiTexCoord3iARB: PFNGLMULTITEXCOORD3IARBPROC;
pub extern var glad_glMultiTexCoord3ivARB: PFNGLMULTITEXCOORD3IVARBPROC;
pub extern var glad_glMultiTexCoord3sARB: PFNGLMULTITEXCOORD3SARBPROC;
pub extern var glad_glMultiTexCoord3svARB: PFNGLMULTITEXCOORD3SVARBPROC;
pub extern var glad_glMultiTexCoord3xOES: PFNGLMULTITEXCOORD3XOESPROC;
pub extern var glad_glMultiTexCoord3xvOES: PFNGLMULTITEXCOORD3XVOESPROC;
pub extern var glad_glMultiTexCoord4bOES: PFNGLMULTITEXCOORD4BOESPROC;
pub extern var glad_glMultiTexCoord4bvOES: PFNGLMULTITEXCOORD4BVOESPROC;
pub extern var glad_glMultiTexCoord4dARB: PFNGLMULTITEXCOORD4DARBPROC;
pub extern var glad_glMultiTexCoord4dvARB: PFNGLMULTITEXCOORD4DVARBPROC;
pub extern var glad_glMultiTexCoord4fARB: PFNGLMULTITEXCOORD4FARBPROC;
pub extern var glad_glMultiTexCoord4fvARB: PFNGLMULTITEXCOORD4FVARBPROC;
pub extern var glad_glMultiTexCoord4hNV: PFNGLMULTITEXCOORD4HNVPROC;
pub extern var glad_glMultiTexCoord4hvNV: PFNGLMULTITEXCOORD4HVNVPROC;
pub extern var glad_glMultiTexCoord4iARB: PFNGLMULTITEXCOORD4IARBPROC;
pub extern var glad_glMultiTexCoord4ivARB: PFNGLMULTITEXCOORD4IVARBPROC;
pub extern var glad_glMultiTexCoord4sARB: PFNGLMULTITEXCOORD4SARBPROC;
pub extern var glad_glMultiTexCoord4svARB: PFNGLMULTITEXCOORD4SVARBPROC;
pub extern var glad_glMultiTexCoord4xOES: PFNGLMULTITEXCOORD4XOESPROC;
pub extern var glad_glMultiTexCoord4xvOES: PFNGLMULTITEXCOORD4XVOESPROC;
pub extern var glad_glMultiTexCoordPointerEXT: PFNGLMULTITEXCOORDPOINTEREXTPROC;
pub extern var glad_glMultiTexEnvfEXT: PFNGLMULTITEXENVFEXTPROC;
pub extern var glad_glMultiTexEnvfvEXT: PFNGLMULTITEXENVFVEXTPROC;
pub extern var glad_glMultiTexEnviEXT: PFNGLMULTITEXENVIEXTPROC;
pub extern var glad_glMultiTexEnvivEXT: PFNGLMULTITEXENVIVEXTPROC;
pub extern var glad_glMultiTexGendEXT: PFNGLMULTITEXGENDEXTPROC;
pub extern var glad_glMultiTexGendvEXT: PFNGLMULTITEXGENDVEXTPROC;
pub extern var glad_glMultiTexGenfEXT: PFNGLMULTITEXGENFEXTPROC;
pub extern var glad_glMultiTexGenfvEXT: PFNGLMULTITEXGENFVEXTPROC;
pub extern var glad_glMultiTexGeniEXT: PFNGLMULTITEXGENIEXTPROC;
pub extern var glad_glMultiTexGenivEXT: PFNGLMULTITEXGENIVEXTPROC;
pub extern var glad_glMultiTexImage1DEXT: PFNGLMULTITEXIMAGE1DEXTPROC;
pub extern var glad_glMultiTexImage2DEXT: PFNGLMULTITEXIMAGE2DEXTPROC;
pub extern var glad_glMultiTexImage3DEXT: PFNGLMULTITEXIMAGE3DEXTPROC;
pub extern var glad_glMultiTexParameterIivEXT: PFNGLMULTITEXPARAMETERIIVEXTPROC;
pub extern var glad_glMultiTexParameterIuivEXT: PFNGLMULTITEXPARAMETERIUIVEXTPROC;
pub extern var glad_glMultiTexParameterfEXT: PFNGLMULTITEXPARAMETERFEXTPROC;
pub extern var glad_glMultiTexParameterfvEXT: PFNGLMULTITEXPARAMETERFVEXTPROC;
pub extern var glad_glMultiTexParameteriEXT: PFNGLMULTITEXPARAMETERIEXTPROC;
pub extern var glad_glMultiTexParameterivEXT: PFNGLMULTITEXPARAMETERIVEXTPROC;
pub extern var glad_glMultiTexRenderbufferEXT: PFNGLMULTITEXRENDERBUFFEREXTPROC;
pub extern var glad_glMultiTexSubImage1DEXT: PFNGLMULTITEXSUBIMAGE1DEXTPROC;
pub extern var glad_glMultiTexSubImage2DEXT: PFNGLMULTITEXSUBIMAGE2DEXTPROC;
pub extern var glad_glMultiTexSubImage3DEXT: PFNGLMULTITEXSUBIMAGE3DEXTPROC;
pub extern var glad_glMulticastBarrierNV: PFNGLMULTICASTBARRIERNVPROC;
pub extern var glad_glMulticastBlitFramebufferNV: PFNGLMULTICASTBLITFRAMEBUFFERNVPROC;
pub extern var glad_glMulticastBufferSubDataNV: PFNGLMULTICASTBUFFERSUBDATANVPROC;
pub extern var glad_glMulticastCopyBufferSubDataNV: PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC;
pub extern var glad_glMulticastCopyImageSubDataNV: PFNGLMULTICASTCOPYIMAGESUBDATANVPROC;
pub extern var glad_glMulticastFramebufferSampleLocationsfvNV: PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var glad_glMulticastGetQueryObjecti64vNV: PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC;
pub extern var glad_glMulticastGetQueryObjectivNV: PFNGLMULTICASTGETQUERYOBJECTIVNVPROC;
pub extern var glad_glMulticastGetQueryObjectui64vNV: PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC;
pub extern var glad_glMulticastGetQueryObjectuivNV: PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC;
pub extern var glad_glMulticastScissorArrayvNVX: PFNGLMULTICASTSCISSORARRAYVNVXPROC;
pub extern var glad_glMulticastViewportArrayvNVX: PFNGLMULTICASTVIEWPORTARRAYVNVXPROC;
pub extern var glad_glMulticastViewportPositionWScaleNVX: PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC;
pub extern var glad_glMulticastWaitSyncNV: PFNGLMULTICASTWAITSYNCNVPROC;
pub extern var glad_glNamedBufferAttachMemoryNV: PFNGLNAMEDBUFFERATTACHMEMORYNVPROC;
pub extern var glad_glNamedBufferData: PFNGLNAMEDBUFFERDATAPROC;
pub extern var glad_glNamedBufferDataEXT: PFNGLNAMEDBUFFERDATAEXTPROC;
pub extern var glad_glNamedBufferPageCommitmentARB: PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC;
pub extern var glad_glNamedBufferPageCommitmentEXT: PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC;
pub extern var glad_glNamedBufferPageCommitmentMemNV: PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC;
pub extern var glad_glNamedBufferStorage: PFNGLNAMEDBUFFERSTORAGEPROC;
pub extern var glad_glNamedBufferStorageEXT: PFNGLNAMEDBUFFERSTORAGEEXTPROC;
pub extern var glad_glNamedBufferStorageExternalEXT: PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC;
pub extern var glad_glNamedBufferStorageMemEXT: PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC;
pub extern var glad_glNamedBufferSubData: PFNGLNAMEDBUFFERSUBDATAPROC;
pub extern var glad_glNamedBufferSubDataEXT: PFNGLNAMEDBUFFERSUBDATAEXTPROC;
pub extern var glad_glNamedCopyBufferSubDataEXT: PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC;
pub extern var glad_glNamedFramebufferDrawBuffer: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC;
pub extern var glad_glNamedFramebufferDrawBuffers: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC;
pub extern var glad_glNamedFramebufferParameteri: PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC;
pub extern var glad_glNamedFramebufferParameteriEXT: PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC;
pub extern var glad_glNamedFramebufferReadBuffer: PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC;
pub extern var glad_glNamedFramebufferRenderbuffer: PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC;
pub extern var glad_glNamedFramebufferRenderbufferEXT: PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC;
pub extern var glad_glNamedFramebufferSampleLocationsfvARB: PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC;
pub extern var glad_glNamedFramebufferSampleLocationsfvNV: PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var glad_glNamedFramebufferSamplePositionsfvAMD: PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC;
pub extern var glad_glNamedFramebufferTexture: PFNGLNAMEDFRAMEBUFFERTEXTUREPROC;
pub extern var glad_glNamedFramebufferTexture1DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC;
pub extern var glad_glNamedFramebufferTexture2DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC;
pub extern var glad_glNamedFramebufferTexture3DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC;
pub extern var glad_glNamedFramebufferTextureEXT: PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC;
pub extern var glad_glNamedFramebufferTextureFaceEXT: PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC;
pub extern var glad_glNamedFramebufferTextureLayer: PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC;
pub extern var glad_glNamedFramebufferTextureLayerEXT: PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC;
pub extern var glad_glNamedProgramLocalParameter4dEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC;
pub extern var glad_glNamedProgramLocalParameter4dvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC;
pub extern var glad_glNamedProgramLocalParameter4fEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC;
pub extern var glad_glNamedProgramLocalParameter4fvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC;
pub extern var glad_glNamedProgramLocalParameterI4iEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC;
pub extern var glad_glNamedProgramLocalParameterI4ivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC;
pub extern var glad_glNamedProgramLocalParameterI4uiEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC;
pub extern var glad_glNamedProgramLocalParameterI4uivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC;
pub extern var glad_glNamedProgramLocalParameters4fvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC;
pub extern var glad_glNamedProgramLocalParametersI4ivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC;
pub extern var glad_glNamedProgramLocalParametersI4uivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC;
pub extern var glad_glNamedProgramStringEXT: PFNGLNAMEDPROGRAMSTRINGEXTPROC;
pub extern var glad_glNamedRenderbufferStorage: PFNGLNAMEDRENDERBUFFERSTORAGEPROC;
pub extern var glad_glNamedRenderbufferStorageEXT: PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC;
pub extern var glad_glNamedRenderbufferStorageMultisample: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC;
pub extern var glad_glNamedRenderbufferStorageMultisampleAdvancedAMD: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC;
pub extern var glad_glNamedRenderbufferStorageMultisampleCoverageEXT: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC;
pub extern var glad_glNamedRenderbufferStorageMultisampleEXT: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC;
pub extern var glad_glNamedStringARB: PFNGLNAMEDSTRINGARBPROC;
pub extern var glad_glNewObjectBufferATI: PFNGLNEWOBJECTBUFFERATIPROC;
pub extern var glad_glNormal3fVertex3fSUN: PFNGLNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glNormal3fVertex3fvSUN: PFNGLNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glNormal3hNV: PFNGLNORMAL3HNVPROC;
pub extern var glad_glNormal3hvNV: PFNGLNORMAL3HVNVPROC;
pub extern var glad_glNormal3xOES: PFNGLNORMAL3XOESPROC;
pub extern var glad_glNormal3xvOES: PFNGLNORMAL3XVOESPROC;
pub extern var glad_glNormalFormatNV: PFNGLNORMALFORMATNVPROC;
pub extern var glad_glNormalPointerEXT: PFNGLNORMALPOINTEREXTPROC;
pub extern var glad_glNormalPointerListIBM: PFNGLNORMALPOINTERLISTIBMPROC;
pub extern var glad_glNormalPointervINTEL: PFNGLNORMALPOINTERVINTELPROC;
pub extern var glad_glNormalStream3bATI: PFNGLNORMALSTREAM3BATIPROC;
pub extern var glad_glNormalStream3bvATI: PFNGLNORMALSTREAM3BVATIPROC;
pub extern var glad_glNormalStream3dATI: PFNGLNORMALSTREAM3DATIPROC;
pub extern var glad_glNormalStream3dvATI: PFNGLNORMALSTREAM3DVATIPROC;
pub extern var glad_glNormalStream3fATI: PFNGLNORMALSTREAM3FATIPROC;
pub extern var glad_glNormalStream3fvATI: PFNGLNORMALSTREAM3FVATIPROC;
pub extern var glad_glNormalStream3iATI: PFNGLNORMALSTREAM3IATIPROC;
pub extern var glad_glNormalStream3ivATI: PFNGLNORMALSTREAM3IVATIPROC;
pub extern var glad_glNormalStream3sATI: PFNGLNORMALSTREAM3SATIPROC;
pub extern var glad_glNormalStream3svATI: PFNGLNORMALSTREAM3SVATIPROC;
pub extern var glad_glObjectLabel: PFNGLOBJECTLABELPROC;
pub extern var glad_glObjectPtrLabel: PFNGLOBJECTPTRLABELPROC;
pub extern var glad_glObjectPurgeableAPPLE: PFNGLOBJECTPURGEABLEAPPLEPROC;
pub extern var glad_glObjectUnpurgeableAPPLE: PFNGLOBJECTUNPURGEABLEAPPLEPROC;
pub extern var glad_glOrthofOES: PFNGLORTHOFOESPROC;
pub extern var glad_glOrthoxOES: PFNGLORTHOXOESPROC;
pub extern var glad_glPNTrianglesfATI: PFNGLPNTRIANGLESFATIPROC;
pub extern var glad_glPNTrianglesiATI: PFNGLPNTRIANGLESIATIPROC;
pub extern var glad_glPassTexCoordATI: PFNGLPASSTEXCOORDATIPROC;
pub extern var glad_glPassThroughxOES: PFNGLPASSTHROUGHXOESPROC;
pub extern var glad_glPatchParameterfv: PFNGLPATCHPARAMETERFVPROC;
pub extern var glad_glPatchParameteri: PFNGLPATCHPARAMETERIPROC;
pub extern var glad_glPathCommandsNV: PFNGLPATHCOMMANDSNVPROC;
pub extern var glad_glPathCoordsNV: PFNGLPATHCOORDSNVPROC;
pub extern var glad_glPathCoverDepthFuncNV: PFNGLPATHCOVERDEPTHFUNCNVPROC;
pub extern var glad_glPathDashArrayNV: PFNGLPATHDASHARRAYNVPROC;
pub extern var glad_glPathGlyphIndexArrayNV: PFNGLPATHGLYPHINDEXARRAYNVPROC;
pub extern var glad_glPathGlyphIndexRangeNV: PFNGLPATHGLYPHINDEXRANGENVPROC;
pub extern var glad_glPathGlyphRangeNV: PFNGLPATHGLYPHRANGENVPROC;
pub extern var glad_glPathGlyphsNV: PFNGLPATHGLYPHSNVPROC;
pub extern var glad_glPathMemoryGlyphIndexArrayNV: PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC;
pub extern var glad_glPathParameterfNV: PFNGLPATHPARAMETERFNVPROC;
pub extern var glad_glPathParameterfvNV: PFNGLPATHPARAMETERFVNVPROC;
pub extern var glad_glPathParameteriNV: PFNGLPATHPARAMETERINVPROC;
pub extern var glad_glPathParameterivNV: PFNGLPATHPARAMETERIVNVPROC;
pub extern var glad_glPathStencilDepthOffsetNV: PFNGLPATHSTENCILDEPTHOFFSETNVPROC;
pub extern var glad_glPathStencilFuncNV: PFNGLPATHSTENCILFUNCNVPROC;
pub extern var glad_glPathStringNV: PFNGLPATHSTRINGNVPROC;
pub extern var glad_glPathSubCommandsNV: PFNGLPATHSUBCOMMANDSNVPROC;
pub extern var glad_glPathSubCoordsNV: PFNGLPATHSUBCOORDSNVPROC;
pub extern var glad_glPauseTransformFeedback: PFNGLPAUSETRANSFORMFEEDBACKPROC;
pub extern var glad_glPauseTransformFeedbackNV: PFNGLPAUSETRANSFORMFEEDBACKNVPROC;
pub extern var glad_glPixelDataRangeNV: PFNGLPIXELDATARANGENVPROC;
pub extern var glad_glPixelMapx: PFNGLPIXELMAPXPROC;
pub extern var glad_glPixelStoref: PFNGLPIXELSTOREFPROC;
pub extern var glad_glPixelStorei: PFNGLPIXELSTOREIPROC;
pub extern var glad_glPixelStorex: PFNGLPIXELSTOREXPROC;
pub extern var glad_glPixelTexGenParameterfSGIS: PFNGLPIXELTEXGENPARAMETERFSGISPROC;
pub extern var glad_glPixelTexGenParameterfvSGIS: PFNGLPIXELTEXGENPARAMETERFVSGISPROC;
pub extern var glad_glPixelTexGenParameteriSGIS: PFNGLPIXELTEXGENPARAMETERISGISPROC;
pub extern var glad_glPixelTexGenParameterivSGIS: PFNGLPIXELTEXGENPARAMETERIVSGISPROC;
pub extern var glad_glPixelTexGenSGIX: PFNGLPIXELTEXGENSGIXPROC;
pub extern var glad_glPixelTransferxOES: PFNGLPIXELTRANSFERXOESPROC;
pub extern var glad_glPixelTransformParameterfEXT: PFNGLPIXELTRANSFORMPARAMETERFEXTPROC;
pub extern var glad_glPixelTransformParameterfvEXT: PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC;
pub extern var glad_glPixelTransformParameteriEXT: PFNGLPIXELTRANSFORMPARAMETERIEXTPROC;
pub extern var glad_glPixelTransformParameterivEXT: PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC;
pub extern var glad_glPixelZoomxOES: PFNGLPIXELZOOMXOESPROC;
pub extern var glad_glPointAlongPathNV: PFNGLPOINTALONGPATHNVPROC;
pub extern var glad_glPointParameterf: PFNGLPOINTPARAMETERFPROC;
pub extern var glad_glPointParameterfARB: PFNGLPOINTPARAMETERFARBPROC;
pub extern var glad_glPointParameterfEXT: PFNGLPOINTPARAMETERFEXTPROC;
pub extern var glad_glPointParameterfSGIS: PFNGLPOINTPARAMETERFSGISPROC;
pub extern var glad_glPointParameterfv: PFNGLPOINTPARAMETERFVPROC;
pub extern var glad_glPointParameterfvARB: PFNGLPOINTPARAMETERFVARBPROC;
pub extern var glad_glPointParameterfvEXT: PFNGLPOINTPARAMETERFVEXTPROC;
pub extern var glad_glPointParameterfvSGIS: PFNGLPOINTPARAMETERFVSGISPROC;
pub extern var glad_glPointParameteri: PFNGLPOINTPARAMETERIPROC;
pub extern var glad_glPointParameteriNV: PFNGLPOINTPARAMETERINVPROC;
pub extern var glad_glPointParameteriv: PFNGLPOINTPARAMETERIVPROC;
pub extern var glad_glPointParameterivNV: PFNGLPOINTPARAMETERIVNVPROC;
pub extern var glad_glPointParameterxvOES: PFNGLPOINTPARAMETERXVOESPROC;
pub extern var glad_glPointSize: PFNGLPOINTSIZEPROC;
pub extern var glad_glPointSizexOES: PFNGLPOINTSIZEXOESPROC;
pub extern var glad_glPollAsyncSGIX: PFNGLPOLLASYNCSGIXPROC;
pub extern var glad_glPollInstrumentsSGIX: PFNGLPOLLINSTRUMENTSSGIXPROC;
pub extern var glad_glPolygonMode: PFNGLPOLYGONMODEPROC;
pub extern var glad_glPolygonOffset: PFNGLPOLYGONOFFSETPROC;
pub extern var glad_glPolygonOffsetClamp: PFNGLPOLYGONOFFSETCLAMPPROC;
pub extern var glad_glPolygonOffsetClampEXT: PFNGLPOLYGONOFFSETCLAMPEXTPROC;
pub extern var glad_glPolygonOffsetEXT: PFNGLPOLYGONOFFSETEXTPROC;
pub extern var glad_glPolygonOffsetxOES: PFNGLPOLYGONOFFSETXOESPROC;
pub extern var glad_glPopDebugGroup: PFNGLPOPDEBUGGROUPPROC;
pub extern var glad_glPopGroupMarkerEXT: PFNGLPOPGROUPMARKEREXTPROC;
pub extern var glad_glPresentFrameDualFillNV: PFNGLPRESENTFRAMEDUALFILLNVPROC;
pub extern var glad_glPresentFrameKeyedNV: PFNGLPRESENTFRAMEKEYEDNVPROC;
pub extern var glad_glPrimitiveBoundingBoxARB: PFNGLPRIMITIVEBOUNDINGBOXARBPROC;
pub extern var glad_glPrimitiveRestartIndex: PFNGLPRIMITIVERESTARTINDEXPROC;
pub extern var glad_glPrimitiveRestartIndexNV: PFNGLPRIMITIVERESTARTINDEXNVPROC;
pub extern var glad_glPrimitiveRestartNV: PFNGLPRIMITIVERESTARTNVPROC;
pub extern var glad_glPrioritizeTexturesEXT: PFNGLPRIORITIZETEXTURESEXTPROC;
pub extern var glad_glPrioritizeTexturesxOES: PFNGLPRIORITIZETEXTURESXOESPROC;
pub extern var glad_glProgramBinary: PFNGLPROGRAMBINARYPROC;
pub extern var glad_glProgramBufferParametersIivNV: PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC;
pub extern var glad_glProgramBufferParametersIuivNV: PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC;
pub extern var glad_glProgramBufferParametersfvNV: PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC;
pub extern var glad_glProgramEnvParameter4dARB: PFNGLPROGRAMENVPARAMETER4DARBPROC;
pub extern var glad_glProgramEnvParameter4dvARB: PFNGLPROGRAMENVPARAMETER4DVARBPROC;
pub extern var glad_glProgramEnvParameter4fARB: PFNGLPROGRAMENVPARAMETER4FARBPROC;
pub extern var glad_glProgramEnvParameter4fvARB: PFNGLPROGRAMENVPARAMETER4FVARBPROC;
pub extern var glad_glProgramEnvParameterI4iNV: PFNGLPROGRAMENVPARAMETERI4INVPROC;
pub extern var glad_glProgramEnvParameterI4ivNV: PFNGLPROGRAMENVPARAMETERI4IVNVPROC;
pub extern var glad_glProgramEnvParameterI4uiNV: PFNGLPROGRAMENVPARAMETERI4UINVPROC;
pub extern var glad_glProgramEnvParameterI4uivNV: PFNGLPROGRAMENVPARAMETERI4UIVNVPROC;
pub extern var glad_glProgramEnvParameters4fvEXT: PFNGLPROGRAMENVPARAMETERS4FVEXTPROC;
pub extern var glad_glProgramEnvParametersI4ivNV: PFNGLPROGRAMENVPARAMETERSI4IVNVPROC;
pub extern var glad_glProgramEnvParametersI4uivNV: PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC;
pub extern var glad_glProgramLocalParameter4dARB: PFNGLPROGRAMLOCALPARAMETER4DARBPROC;
pub extern var glad_glProgramLocalParameter4dvARB: PFNGLPROGRAMLOCALPARAMETER4DVARBPROC;
pub extern var glad_glProgramLocalParameter4fARB: PFNGLPROGRAMLOCALPARAMETER4FARBPROC;
pub extern var glad_glProgramLocalParameter4fvARB: PFNGLPROGRAMLOCALPARAMETER4FVARBPROC;
pub extern var glad_glProgramLocalParameterI4iNV: PFNGLPROGRAMLOCALPARAMETERI4INVPROC;
pub extern var glad_glProgramLocalParameterI4ivNV: PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC;
pub extern var glad_glProgramLocalParameterI4uiNV: PFNGLPROGRAMLOCALPARAMETERI4UINVPROC;
pub extern var glad_glProgramLocalParameterI4uivNV: PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC;
pub extern var glad_glProgramLocalParameters4fvEXT: PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC;
pub extern var glad_glProgramLocalParametersI4ivNV: PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC;
pub extern var glad_glProgramLocalParametersI4uivNV: PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC;
pub extern var glad_glProgramNamedParameter4dNV: PFNGLPROGRAMNAMEDPARAMETER4DNVPROC;
pub extern var glad_glProgramNamedParameter4dvNV: PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC;
pub extern var glad_glProgramNamedParameter4fNV: PFNGLPROGRAMNAMEDPARAMETER4FNVPROC;
pub extern var glad_glProgramNamedParameter4fvNV: PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC;
pub extern var glad_glProgramParameter4dNV: PFNGLPROGRAMPARAMETER4DNVPROC;
pub extern var glad_glProgramParameter4dvNV: PFNGLPROGRAMPARAMETER4DVNVPROC;
pub extern var glad_glProgramParameter4fNV: PFNGLPROGRAMPARAMETER4FNVPROC;
pub extern var glad_glProgramParameter4fvNV: PFNGLPROGRAMPARAMETER4FVNVPROC;
pub extern var glad_glProgramParameteri: PFNGLPROGRAMPARAMETERIPROC;
pub extern var glad_glProgramParameteriARB: PFNGLPROGRAMPARAMETERIARBPROC;
pub extern var glad_glProgramParameteriEXT: PFNGLPROGRAMPARAMETERIEXTPROC;
pub extern var glad_glProgramParameters4dvNV: PFNGLPROGRAMPARAMETERS4DVNVPROC;
pub extern var glad_glProgramParameters4fvNV: PFNGLPROGRAMPARAMETERS4FVNVPROC;
pub extern var glad_glProgramPathFragmentInputGenNV: PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC;
pub extern var glad_glProgramStringARB: PFNGLPROGRAMSTRINGARBPROC;
pub extern var glad_glProgramSubroutineParametersuivNV: PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC;
pub extern var glad_glProgramUniform1d: PFNGLPROGRAMUNIFORM1DPROC;
pub extern var glad_glProgramUniform1dEXT: PFNGLPROGRAMUNIFORM1DEXTPROC;
pub extern var glad_glProgramUniform1dv: PFNGLPROGRAMUNIFORM1DVPROC;
pub extern var glad_glProgramUniform1dvEXT: PFNGLPROGRAMUNIFORM1DVEXTPROC;
pub extern var glad_glProgramUniform1f: PFNGLPROGRAMUNIFORM1FPROC;
pub extern var glad_glProgramUniform1fEXT: PFNGLPROGRAMUNIFORM1FEXTPROC;
pub extern var glad_glProgramUniform1fv: PFNGLPROGRAMUNIFORM1FVPROC;
pub extern var glad_glProgramUniform1fvEXT: PFNGLPROGRAMUNIFORM1FVEXTPROC;
pub extern var glad_glProgramUniform1i: PFNGLPROGRAMUNIFORM1IPROC;
pub extern var glad_glProgramUniform1i64ARB: PFNGLPROGRAMUNIFORM1I64ARBPROC;
pub extern var glad_glProgramUniform1i64NV: PFNGLPROGRAMUNIFORM1I64NVPROC;
pub extern var glad_glProgramUniform1i64vARB: PFNGLPROGRAMUNIFORM1I64VARBPROC;
pub extern var glad_glProgramUniform1i64vNV: PFNGLPROGRAMUNIFORM1I64VNVPROC;
pub extern var glad_glProgramUniform1iEXT: PFNGLPROGRAMUNIFORM1IEXTPROC;
pub extern var glad_glProgramUniform1iv: PFNGLPROGRAMUNIFORM1IVPROC;
pub extern var glad_glProgramUniform1ivEXT: PFNGLPROGRAMUNIFORM1IVEXTPROC;
pub extern var glad_glProgramUniform1ui: PFNGLPROGRAMUNIFORM1UIPROC;
pub extern var glad_glProgramUniform1ui64ARB: PFNGLPROGRAMUNIFORM1UI64ARBPROC;
pub extern var glad_glProgramUniform1ui64NV: PFNGLPROGRAMUNIFORM1UI64NVPROC;
pub extern var glad_glProgramUniform1ui64vARB: PFNGLPROGRAMUNIFORM1UI64VARBPROC;
pub extern var glad_glProgramUniform1ui64vNV: PFNGLPROGRAMUNIFORM1UI64VNVPROC;
pub extern var glad_glProgramUniform1uiEXT: PFNGLPROGRAMUNIFORM1UIEXTPROC;
pub extern var glad_glProgramUniform1uiv: PFNGLPROGRAMUNIFORM1UIVPROC;
pub extern var glad_glProgramUniform1uivEXT: PFNGLPROGRAMUNIFORM1UIVEXTPROC;
pub extern var glad_glProgramUniform2d: PFNGLPROGRAMUNIFORM2DPROC;
pub extern var glad_glProgramUniform2dEXT: PFNGLPROGRAMUNIFORM2DEXTPROC;
pub extern var glad_glProgramUniform2dv: PFNGLPROGRAMUNIFORM2DVPROC;
pub extern var glad_glProgramUniform2dvEXT: PFNGLPROGRAMUNIFORM2DVEXTPROC;
pub extern var glad_glProgramUniform2f: PFNGLPROGRAMUNIFORM2FPROC;
pub extern var glad_glProgramUniform2fEXT: PFNGLPROGRAMUNIFORM2FEXTPROC;
pub extern var glad_glProgramUniform2fv: PFNGLPROGRAMUNIFORM2FVPROC;
pub extern var glad_glProgramUniform2fvEXT: PFNGLPROGRAMUNIFORM2FVEXTPROC;
pub extern var glad_glProgramUniform2i: PFNGLPROGRAMUNIFORM2IPROC;
pub extern var glad_glProgramUniform2i64ARB: PFNGLPROGRAMUNIFORM2I64ARBPROC;
pub extern var glad_glProgramUniform2i64NV: PFNGLPROGRAMUNIFORM2I64NVPROC;
pub extern var glad_glProgramUniform2i64vARB: PFNGLPROGRAMUNIFORM2I64VARBPROC;
pub extern var glad_glProgramUniform2i64vNV: PFNGLPROGRAMUNIFORM2I64VNVPROC;
pub extern var glad_glProgramUniform2iEXT: PFNGLPROGRAMUNIFORM2IEXTPROC;
pub extern var glad_glProgramUniform2iv: PFNGLPROGRAMUNIFORM2IVPROC;
pub extern var glad_glProgramUniform2ivEXT: PFNGLPROGRAMUNIFORM2IVEXTPROC;
pub extern var glad_glProgramUniform2ui: PFNGLPROGRAMUNIFORM2UIPROC;
pub extern var glad_glProgramUniform2ui64ARB: PFNGLPROGRAMUNIFORM2UI64ARBPROC;
pub extern var glad_glProgramUniform2ui64NV: PFNGLPROGRAMUNIFORM2UI64NVPROC;
pub extern var glad_glProgramUniform2ui64vARB: PFNGLPROGRAMUNIFORM2UI64VARBPROC;
pub extern var glad_glProgramUniform2ui64vNV: PFNGLPROGRAMUNIFORM2UI64VNVPROC;
pub extern var glad_glProgramUniform2uiEXT: PFNGLPROGRAMUNIFORM2UIEXTPROC;
pub extern var glad_glProgramUniform2uiv: PFNGLPROGRAMUNIFORM2UIVPROC;
pub extern var glad_glProgramUniform2uivEXT: PFNGLPROGRAMUNIFORM2UIVEXTPROC;
pub extern var glad_glProgramUniform3d: PFNGLPROGRAMUNIFORM3DPROC;
pub extern var glad_glProgramUniform3dEXT: PFNGLPROGRAMUNIFORM3DEXTPROC;
pub extern var glad_glProgramUniform3dv: PFNGLPROGRAMUNIFORM3DVPROC;
pub extern var glad_glProgramUniform3dvEXT: PFNGLPROGRAMUNIFORM3DVEXTPROC;
pub extern var glad_glProgramUniform3f: PFNGLPROGRAMUNIFORM3FPROC;
pub extern var glad_glProgramUniform3fEXT: PFNGLPROGRAMUNIFORM3FEXTPROC;
pub extern var glad_glProgramUniform3fv: PFNGLPROGRAMUNIFORM3FVPROC;
pub extern var glad_glProgramUniform3fvEXT: PFNGLPROGRAMUNIFORM3FVEXTPROC;
pub extern var glad_glProgramUniform3i: PFNGLPROGRAMUNIFORM3IPROC;
pub extern var glad_glProgramUniform3i64ARB: PFNGLPROGRAMUNIFORM3I64ARBPROC;
pub extern var glad_glProgramUniform3i64NV: PFNGLPROGRAMUNIFORM3I64NVPROC;
pub extern var glad_glProgramUniform3i64vARB: PFNGLPROGRAMUNIFORM3I64VARBPROC;
pub extern var glad_glProgramUniform3i64vNV: PFNGLPROGRAMUNIFORM3I64VNVPROC;
pub extern var glad_glProgramUniform3iEXT: PFNGLPROGRAMUNIFORM3IEXTPROC;
pub extern var glad_glProgramUniform3iv: PFNGLPROGRAMUNIFORM3IVPROC;
pub extern var glad_glProgramUniform3ivEXT: PFNGLPROGRAMUNIFORM3IVEXTPROC;
pub extern var glad_glProgramUniform3ui: PFNGLPROGRAMUNIFORM3UIPROC;
pub extern var glad_glProgramUniform3ui64ARB: PFNGLPROGRAMUNIFORM3UI64ARBPROC;
pub extern var glad_glProgramUniform3ui64NV: PFNGLPROGRAMUNIFORM3UI64NVPROC;
pub extern var glad_glProgramUniform3ui64vARB: PFNGLPROGRAMUNIFORM3UI64VARBPROC;
pub extern var glad_glProgramUniform3ui64vNV: PFNGLPROGRAMUNIFORM3UI64VNVPROC;
pub extern var glad_glProgramUniform3uiEXT: PFNGLPROGRAMUNIFORM3UIEXTPROC;
pub extern var glad_glProgramUniform3uiv: PFNGLPROGRAMUNIFORM3UIVPROC;
pub extern var glad_glProgramUniform3uivEXT: PFNGLPROGRAMUNIFORM3UIVEXTPROC;
pub extern var glad_glProgramUniform4d: PFNGLPROGRAMUNIFORM4DPROC;
pub extern var glad_glProgramUniform4dEXT: PFNGLPROGRAMUNIFORM4DEXTPROC;
pub extern var glad_glProgramUniform4dv: PFNGLPROGRAMUNIFORM4DVPROC;
pub extern var glad_glProgramUniform4dvEXT: PFNGLPROGRAMUNIFORM4DVEXTPROC;
pub extern var glad_glProgramUniform4f: PFNGLPROGRAMUNIFORM4FPROC;
pub extern var glad_glProgramUniform4fEXT: PFNGLPROGRAMUNIFORM4FEXTPROC;
pub extern var glad_glProgramUniform4fv: PFNGLPROGRAMUNIFORM4FVPROC;
pub extern var glad_glProgramUniform4fvEXT: PFNGLPROGRAMUNIFORM4FVEXTPROC;
pub extern var glad_glProgramUniform4i: PFNGLPROGRAMUNIFORM4IPROC;
pub extern var glad_glProgramUniform4i64ARB: PFNGLPROGRAMUNIFORM4I64ARBPROC;
pub extern var glad_glProgramUniform4i64NV: PFNGLPROGRAMUNIFORM4I64NVPROC;
pub extern var glad_glProgramUniform4i64vARB: PFNGLPROGRAMUNIFORM4I64VARBPROC;
pub extern var glad_glProgramUniform4i64vNV: PFNGLPROGRAMUNIFORM4I64VNVPROC;
pub extern var glad_glProgramUniform4iEXT: PFNGLPROGRAMUNIFORM4IEXTPROC;
pub extern var glad_glProgramUniform4iv: PFNGLPROGRAMUNIFORM4IVPROC;
pub extern var glad_glProgramUniform4ivEXT: PFNGLPROGRAMUNIFORM4IVEXTPROC;
pub extern var glad_glProgramUniform4ui: PFNGLPROGRAMUNIFORM4UIPROC;
pub extern var glad_glProgramUniform4ui64ARB: PFNGLPROGRAMUNIFORM4UI64ARBPROC;
pub extern var glad_glProgramUniform4ui64NV: PFNGLPROGRAMUNIFORM4UI64NVPROC;
pub extern var glad_glProgramUniform4ui64vARB: PFNGLPROGRAMUNIFORM4UI64VARBPROC;
pub extern var glad_glProgramUniform4ui64vNV: PFNGLPROGRAMUNIFORM4UI64VNVPROC;
pub extern var glad_glProgramUniform4uiEXT: PFNGLPROGRAMUNIFORM4UIEXTPROC;
pub extern var glad_glProgramUniform4uiv: PFNGLPROGRAMUNIFORM4UIVPROC;
pub extern var glad_glProgramUniform4uivEXT: PFNGLPROGRAMUNIFORM4UIVEXTPROC;
pub extern var glad_glProgramUniformHandleui64ARB: PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC;
pub extern var glad_glProgramUniformHandleui64NV: PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC;
pub extern var glad_glProgramUniformHandleui64vARB: PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC;
pub extern var glad_glProgramUniformHandleui64vNV: PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC;
pub extern var glad_glProgramUniformMatrix2dv: PFNGLPROGRAMUNIFORMMATRIX2DVPROC;
pub extern var glad_glProgramUniformMatrix2dvEXT: PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC;
pub extern var glad_glProgramUniformMatrix2fv: PFNGLPROGRAMUNIFORMMATRIX2FVPROC;
pub extern var glad_glProgramUniformMatrix2fvEXT: PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC;
pub extern var glad_glProgramUniformMatrix2x3dv: PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC;
pub extern var glad_glProgramUniformMatrix2x3dvEXT: PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC;
pub extern var glad_glProgramUniformMatrix2x3fv: PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC;
pub extern var glad_glProgramUniformMatrix2x3fvEXT: PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC;
pub extern var glad_glProgramUniformMatrix2x4dv: PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC;
pub extern var glad_glProgramUniformMatrix2x4dvEXT: PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC;
pub extern var glad_glProgramUniformMatrix2x4fv: PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC;
pub extern var glad_glProgramUniformMatrix2x4fvEXT: PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC;
pub extern var glad_glProgramUniformMatrix3dv: PFNGLPROGRAMUNIFORMMATRIX3DVPROC;
pub extern var glad_glProgramUniformMatrix3dvEXT: PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC;
pub extern var glad_glProgramUniformMatrix3fv: PFNGLPROGRAMUNIFORMMATRIX3FVPROC;
pub extern var glad_glProgramUniformMatrix3fvEXT: PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC;
pub extern var glad_glProgramUniformMatrix3x2dv: PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC;
pub extern var glad_glProgramUniformMatrix3x2dvEXT: PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC;
pub extern var glad_glProgramUniformMatrix3x2fv: PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC;
pub extern var glad_glProgramUniformMatrix3x2fvEXT: PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC;
pub extern var glad_glProgramUniformMatrix3x4dv: PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC;
pub extern var glad_glProgramUniformMatrix3x4dvEXT: PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC;
pub extern var glad_glProgramUniformMatrix3x4fv: PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC;
pub extern var glad_glProgramUniformMatrix3x4fvEXT: PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC;
pub extern var glad_glProgramUniformMatrix4dv: PFNGLPROGRAMUNIFORMMATRIX4DVPROC;
pub extern var glad_glProgramUniformMatrix4dvEXT: PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC;
pub extern var glad_glProgramUniformMatrix4fv: PFNGLPROGRAMUNIFORMMATRIX4FVPROC;
pub extern var glad_glProgramUniformMatrix4fvEXT: PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC;
pub extern var glad_glProgramUniformMatrix4x2dv: PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC;
pub extern var glad_glProgramUniformMatrix4x2dvEXT: PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC;
pub extern var glad_glProgramUniformMatrix4x2fv: PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC;
pub extern var glad_glProgramUniformMatrix4x2fvEXT: PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC;
pub extern var glad_glProgramUniformMatrix4x3dv: PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC;
pub extern var glad_glProgramUniformMatrix4x3dvEXT: PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC;
pub extern var glad_glProgramUniformMatrix4x3fv: PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC;
pub extern var glad_glProgramUniformMatrix4x3fvEXT: PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC;
pub extern var glad_glProgramUniformui64NV: PFNGLPROGRAMUNIFORMUI64NVPROC;
pub extern var glad_glProgramUniformui64vNV: PFNGLPROGRAMUNIFORMUI64VNVPROC;
pub extern var glad_glProgramVertexLimitNV: PFNGLPROGRAMVERTEXLIMITNVPROC;
pub extern var glad_glProvokingVertex: PFNGLPROVOKINGVERTEXPROC;
pub extern var glad_glProvokingVertexEXT: PFNGLPROVOKINGVERTEXEXTPROC;
pub extern var glad_glPushClientAttribDefaultEXT: PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC;
pub extern var glad_glPushDebugGroup: PFNGLPUSHDEBUGGROUPPROC;
pub extern var glad_glPushGroupMarkerEXT: PFNGLPUSHGROUPMARKEREXTPROC;
pub extern var glad_glQueryCounter: PFNGLQUERYCOUNTERPROC;
pub extern var glad_glQueryMatrixxOES: PFNGLQUERYMATRIXXOESPROC;
pub extern var glad_glQueryObjectParameteruiAMD: PFNGLQUERYOBJECTPARAMETERUIAMDPROC;
pub extern var glad_glQueryResourceNV: PFNGLQUERYRESOURCENVPROC;
pub extern var glad_glQueryResourceTagNV: PFNGLQUERYRESOURCETAGNVPROC;
pub extern var glad_glRasterPos2xOES: PFNGLRASTERPOS2XOESPROC;
pub extern var glad_glRasterPos2xvOES: PFNGLRASTERPOS2XVOESPROC;
pub extern var glad_glRasterPos3xOES: PFNGLRASTERPOS3XOESPROC;
pub extern var glad_glRasterPos3xvOES: PFNGLRASTERPOS3XVOESPROC;
pub extern var glad_glRasterPos4xOES: PFNGLRASTERPOS4XOESPROC;
pub extern var glad_glRasterPos4xvOES: PFNGLRASTERPOS4XVOESPROC;
pub extern var glad_glRasterSamplesEXT: PFNGLRASTERSAMPLESEXTPROC;
pub extern var glad_glReadBuffer: PFNGLREADBUFFERPROC;
pub extern var glad_glReadInstrumentsSGIX: PFNGLREADINSTRUMENTSSGIXPROC;
pub extern var glad_glReadPixels: PFNGLREADPIXELSPROC;
pub extern var glad_glReadnPixels: PFNGLREADNPIXELSPROC;
pub extern var glad_glReadnPixelsARB: PFNGLREADNPIXELSARBPROC;
pub extern var glad_glRectxOES: PFNGLRECTXOESPROC;
pub extern var glad_glRectxvOES: PFNGLRECTXVOESPROC;
pub extern var glad_glReferencePlaneSGIX: PFNGLREFERENCEPLANESGIXPROC;
pub extern var glad_glReleaseKeyedMutexWin32EXT: PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC;
pub extern var glad_glReleaseShaderCompiler: PFNGLRELEASESHADERCOMPILERPROC;
pub extern var glad_glRenderGpuMaskNV: PFNGLRENDERGPUMASKNVPROC;
pub extern var glad_glRenderbufferStorage: PFNGLRENDERBUFFERSTORAGEPROC;
pub extern var glad_glRenderbufferStorageEXT: PFNGLRENDERBUFFERSTORAGEEXTPROC;
pub extern var glad_glRenderbufferStorageMultisample: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC;
pub extern var glad_glRenderbufferStorageMultisampleAdvancedAMD: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC;
pub extern var glad_glRenderbufferStorageMultisampleCoverageNV: PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC;
pub extern var glad_glRenderbufferStorageMultisampleEXT: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC;
pub extern var glad_glReplacementCodePointerSUN: PFNGLREPLACEMENTCODEPOINTERSUNPROC;
pub extern var glad_glReplacementCodeubSUN: PFNGLREPLACEMENTCODEUBSUNPROC;
pub extern var glad_glReplacementCodeubvSUN: PFNGLREPLACEMENTCODEUBVSUNPROC;
pub extern var glad_glReplacementCodeuiColor3fVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiColor3fVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiColor4ubVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiColor4ubVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiSUN: PFNGLREPLACEMENTCODEUISUNPROC;
pub extern var glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiTexCoord2fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiTexCoord2fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuiVertex3fSUN: PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC;
pub extern var glad_glReplacementCodeuiVertex3fvSUN: PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC;
pub extern var glad_glReplacementCodeuivSUN: PFNGLREPLACEMENTCODEUIVSUNPROC;
pub extern var glad_glReplacementCodeusSUN: PFNGLREPLACEMENTCODEUSSUNPROC;
pub extern var glad_glReplacementCodeusvSUN: PFNGLREPLACEMENTCODEUSVSUNPROC;
pub extern var glad_glRequestResidentProgramsNV: PFNGLREQUESTRESIDENTPROGRAMSNVPROC;
pub extern var glad_glResetHistogramEXT: PFNGLRESETHISTOGRAMEXTPROC;
pub extern var glad_glResetMemoryObjectParameterNV: PFNGLRESETMEMORYOBJECTPARAMETERNVPROC;
pub extern var glad_glResetMinmaxEXT: PFNGLRESETMINMAXEXTPROC;
pub extern var glad_glResizeBuffersMESA: PFNGLRESIZEBUFFERSMESAPROC;
pub extern var glad_glResolveDepthValuesNV: PFNGLRESOLVEDEPTHVALUESNVPROC;
pub extern var glad_glResumeTransformFeedback: PFNGLRESUMETRANSFORMFEEDBACKPROC;
pub extern var glad_glResumeTransformFeedbackNV: PFNGLRESUMETRANSFORMFEEDBACKNVPROC;
pub extern var glad_glRotatexOES: PFNGLROTATEXOESPROC;
pub extern var glad_glSampleCoverage: PFNGLSAMPLECOVERAGEPROC;
pub extern var glad_glSampleCoverageARB: PFNGLSAMPLECOVERAGEARBPROC;
pub extern var glad_glSampleMapATI: PFNGLSAMPLEMAPATIPROC;
pub extern var glad_glSampleMaskEXT: PFNGLSAMPLEMASKEXTPROC;
pub extern var glad_glSampleMaskIndexedNV: PFNGLSAMPLEMASKINDEXEDNVPROC;
pub extern var glad_glSampleMaskSGIS: PFNGLSAMPLEMASKSGISPROC;
pub extern var glad_glSampleMaski: PFNGLSAMPLEMASKIPROC;
pub extern var glad_glSamplePatternEXT: PFNGLSAMPLEPATTERNEXTPROC;
pub extern var glad_glSamplePatternSGIS: PFNGLSAMPLEPATTERNSGISPROC;
pub extern var glad_glSamplerParameterIiv: PFNGLSAMPLERPARAMETERIIVPROC;
pub extern var glad_glSamplerParameterIuiv: PFNGLSAMPLERPARAMETERIUIVPROC;
pub extern var glad_glSamplerParameterf: PFNGLSAMPLERPARAMETERFPROC;
pub extern var glad_glSamplerParameterfv: PFNGLSAMPLERPARAMETERFVPROC;
pub extern var glad_glSamplerParameteri: PFNGLSAMPLERPARAMETERIPROC;
pub extern var glad_glSamplerParameteriv: PFNGLSAMPLERPARAMETERIVPROC;
pub extern var glad_glScalexOES: PFNGLSCALEXOESPROC;
pub extern var glad_glScissor: PFNGLSCISSORPROC;
pub extern var glad_glScissorArrayv: PFNGLSCISSORARRAYVPROC;
pub extern var glad_glScissorExclusiveArrayvNV: PFNGLSCISSOREXCLUSIVEARRAYVNVPROC;
pub extern var glad_glScissorExclusiveNV: PFNGLSCISSOREXCLUSIVENVPROC;
pub extern var glad_glScissorIndexed: PFNGLSCISSORINDEXEDPROC;
pub extern var glad_glScissorIndexedv: PFNGLSCISSORINDEXEDVPROC;
pub extern var glad_glSecondaryColor3bEXT: PFNGLSECONDARYCOLOR3BEXTPROC;
pub extern var glad_glSecondaryColor3bvEXT: PFNGLSECONDARYCOLOR3BVEXTPROC;
pub extern var glad_glSecondaryColor3dEXT: PFNGLSECONDARYCOLOR3DEXTPROC;
pub extern var glad_glSecondaryColor3dvEXT: PFNGLSECONDARYCOLOR3DVEXTPROC;
pub extern var glad_glSecondaryColor3fEXT: PFNGLSECONDARYCOLOR3FEXTPROC;
pub extern var glad_glSecondaryColor3fvEXT: PFNGLSECONDARYCOLOR3FVEXTPROC;
pub extern var glad_glSecondaryColor3hNV: PFNGLSECONDARYCOLOR3HNVPROC;
pub extern var glad_glSecondaryColor3hvNV: PFNGLSECONDARYCOLOR3HVNVPROC;
pub extern var glad_glSecondaryColor3iEXT: PFNGLSECONDARYCOLOR3IEXTPROC;
pub extern var glad_glSecondaryColor3ivEXT: PFNGLSECONDARYCOLOR3IVEXTPROC;
pub extern var glad_glSecondaryColor3sEXT: PFNGLSECONDARYCOLOR3SEXTPROC;
pub extern var glad_glSecondaryColor3svEXT: PFNGLSECONDARYCOLOR3SVEXTPROC;
pub extern var glad_glSecondaryColor3ubEXT: PFNGLSECONDARYCOLOR3UBEXTPROC;
pub extern var glad_glSecondaryColor3ubvEXT: PFNGLSECONDARYCOLOR3UBVEXTPROC;
pub extern var glad_glSecondaryColor3uiEXT: PFNGLSECONDARYCOLOR3UIEXTPROC;
pub extern var glad_glSecondaryColor3uivEXT: PFNGLSECONDARYCOLOR3UIVEXTPROC;
pub extern var glad_glSecondaryColor3usEXT: PFNGLSECONDARYCOLOR3USEXTPROC;
pub extern var glad_glSecondaryColor3usvEXT: PFNGLSECONDARYCOLOR3USVEXTPROC;
pub extern var glad_glSecondaryColorFormatNV: PFNGLSECONDARYCOLORFORMATNVPROC;
pub extern var glad_glSecondaryColorPointerEXT: PFNGLSECONDARYCOLORPOINTEREXTPROC;
pub extern var glad_glSecondaryColorPointerListIBM: PFNGLSECONDARYCOLORPOINTERLISTIBMPROC;
pub extern var glad_glSelectPerfMonitorCountersAMD: PFNGLSELECTPERFMONITORCOUNTERSAMDPROC;
pub extern var glad_glSemaphoreParameterivNV: PFNGLSEMAPHOREPARAMETERIVNVPROC;
pub extern var glad_glSemaphoreParameterui64vEXT: PFNGLSEMAPHOREPARAMETERUI64VEXTPROC;
pub extern var glad_glSeparableFilter2DEXT: PFNGLSEPARABLEFILTER2DEXTPROC;
pub extern var glad_glSetFenceAPPLE: PFNGLSETFENCEAPPLEPROC;
pub extern var glad_glSetFenceNV: PFNGLSETFENCENVPROC;
pub extern var glad_glSetFragmentShaderConstantATI: PFNGLSETFRAGMENTSHADERCONSTANTATIPROC;
pub extern var glad_glSetInvariantEXT: PFNGLSETINVARIANTEXTPROC;
pub extern var glad_glSetLocalConstantEXT: PFNGLSETLOCALCONSTANTEXTPROC;
pub extern var glad_glSetMultisamplefvAMD: PFNGLSETMULTISAMPLEFVAMDPROC;
pub extern var glad_glShaderBinary: PFNGLSHADERBINARYPROC;
pub extern var glad_glShaderOp1EXT: PFNGLSHADEROP1EXTPROC;
pub extern var glad_glShaderOp2EXT: PFNGLSHADEROP2EXTPROC;
pub extern var glad_glShaderOp3EXT: PFNGLSHADEROP3EXTPROC;
pub extern var glad_glShaderSource: PFNGLSHADERSOURCEPROC;
pub extern var glad_glShaderSourceARB: PFNGLSHADERSOURCEARBPROC;
pub extern var glad_glShaderStorageBlockBinding: PFNGLSHADERSTORAGEBLOCKBINDINGPROC;
pub extern var glad_glShadingRateImageBarrierNV: PFNGLSHADINGRATEIMAGEBARRIERNVPROC;
pub extern var glad_glShadingRateImagePaletteNV: PFNGLSHADINGRATEIMAGEPALETTENVPROC;
pub extern var glad_glShadingRateSampleOrderCustomNV: PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC;
pub extern var glad_glShadingRateSampleOrderNV: PFNGLSHADINGRATESAMPLEORDERNVPROC;
pub extern var glad_glSharpenTexFuncSGIS: PFNGLSHARPENTEXFUNCSGISPROC;
pub extern var glad_glSignalSemaphoreEXT: PFNGLSIGNALSEMAPHOREEXTPROC;
pub extern var glad_glSignalSemaphoreui64NVX: PFNGLSIGNALSEMAPHOREUI64NVXPROC;
pub extern var glad_glSignalVkFenceNV: PFNGLSIGNALVKFENCENVPROC;
pub extern var glad_glSignalVkSemaphoreNV: PFNGLSIGNALVKSEMAPHORENVPROC;
pub extern var glad_glSpecializeShader: PFNGLSPECIALIZESHADERPROC;
pub extern var glad_glSpecializeShaderARB: PFNGLSPECIALIZESHADERARBPROC;
pub extern var glad_glSpriteParameterfSGIX: PFNGLSPRITEPARAMETERFSGIXPROC;
pub extern var glad_glSpriteParameterfvSGIX: PFNGLSPRITEPARAMETERFVSGIXPROC;
pub extern var glad_glSpriteParameteriSGIX: PFNGLSPRITEPARAMETERISGIXPROC;
pub extern var glad_glSpriteParameterivSGIX: PFNGLSPRITEPARAMETERIVSGIXPROC;
pub extern var glad_glStartInstrumentsSGIX: PFNGLSTARTINSTRUMENTSSGIXPROC;
pub extern var glad_glStateCaptureNV: PFNGLSTATECAPTURENVPROC;
pub extern var glad_glStencilClearTagEXT: PFNGLSTENCILCLEARTAGEXTPROC;
pub extern var glad_glStencilFillPathInstancedNV: PFNGLSTENCILFILLPATHINSTANCEDNVPROC;
pub extern var glad_glStencilFillPathNV: PFNGLSTENCILFILLPATHNVPROC;
pub extern var glad_glStencilFunc: PFNGLSTENCILFUNCPROC;
pub extern var glad_glStencilFuncSeparate: PFNGLSTENCILFUNCSEPARATEPROC;
pub extern var glad_glStencilFuncSeparateATI: PFNGLSTENCILFUNCSEPARATEATIPROC;
pub extern var glad_glStencilMask: PFNGLSTENCILMASKPROC;
pub extern var glad_glStencilMaskSeparate: PFNGLSTENCILMASKSEPARATEPROC;
pub extern var glad_glStencilOp: PFNGLSTENCILOPPROC;
pub extern var glad_glStencilOpSeparate: PFNGLSTENCILOPSEPARATEPROC;
pub extern var glad_glStencilOpSeparateATI: PFNGLSTENCILOPSEPARATEATIPROC;
pub extern var glad_glStencilOpValueAMD: PFNGLSTENCILOPVALUEAMDPROC;
pub extern var glad_glStencilStrokePathInstancedNV: PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC;
pub extern var glad_glStencilStrokePathNV: PFNGLSTENCILSTROKEPATHNVPROC;
pub extern var glad_glStencilThenCoverFillPathInstancedNV: PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC;
pub extern var glad_glStencilThenCoverFillPathNV: PFNGLSTENCILTHENCOVERFILLPATHNVPROC;
pub extern var glad_glStencilThenCoverStrokePathInstancedNV: PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC;
pub extern var glad_glStencilThenCoverStrokePathNV: PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC;
pub extern var glad_glStopInstrumentsSGIX: PFNGLSTOPINSTRUMENTSSGIXPROC;
pub extern var glad_glStringMarkerGREMEDY: PFNGLSTRINGMARKERGREMEDYPROC;
pub extern var glad_glSubpixelPrecisionBiasNV: PFNGLSUBPIXELPRECISIONBIASNVPROC;
pub extern var glad_glSwizzleEXT: PFNGLSWIZZLEEXTPROC;
pub extern var glad_glSyncTextureINTEL: PFNGLSYNCTEXTUREINTELPROC;
pub extern var glad_glTagSampleBufferSGIX: PFNGLTAGSAMPLEBUFFERSGIXPROC;
pub extern var glad_glTangent3bEXT: PFNGLTANGENT3BEXTPROC;
pub extern var glad_glTangent3bvEXT: PFNGLTANGENT3BVEXTPROC;
pub extern var glad_glTangent3dEXT: PFNGLTANGENT3DEXTPROC;
pub extern var glad_glTangent3dvEXT: PFNGLTANGENT3DVEXTPROC;
pub extern var glad_glTangent3fEXT: PFNGLTANGENT3FEXTPROC;
pub extern var glad_glTangent3fvEXT: PFNGLTANGENT3FVEXTPROC;
pub extern var glad_glTangent3iEXT: PFNGLTANGENT3IEXTPROC;
pub extern var glad_glTangent3ivEXT: PFNGLTANGENT3IVEXTPROC;
pub extern var glad_glTangent3sEXT: PFNGLTANGENT3SEXTPROC;
pub extern var glad_glTangent3svEXT: PFNGLTANGENT3SVEXTPROC;
pub extern var glad_glTangentPointerEXT: PFNGLTANGENTPOINTEREXTPROC;
pub extern var glad_glTbufferMask3DFX: PFNGLTBUFFERMASK3DFXPROC;
pub extern var glad_glTessellationFactorAMD: PFNGLTESSELLATIONFACTORAMDPROC;
pub extern var glad_glTessellationModeAMD: PFNGLTESSELLATIONMODEAMDPROC;
pub extern var glad_glTestFenceAPPLE: PFNGLTESTFENCEAPPLEPROC;
pub extern var glad_glTestFenceNV: PFNGLTESTFENCENVPROC;
pub extern var glad_glTestObjectAPPLE: PFNGLTESTOBJECTAPPLEPROC;
pub extern var glad_glTexAttachMemoryNV: PFNGLTEXATTACHMEMORYNVPROC;
pub extern var glad_glTexBuffer: PFNGLTEXBUFFERPROC;
pub extern var glad_glTexBufferARB: PFNGLTEXBUFFERARBPROC;
pub extern var glad_glTexBufferEXT: PFNGLTEXBUFFEREXTPROC;
pub extern var glad_glTexBufferRange: PFNGLTEXBUFFERRANGEPROC;
pub extern var glad_glTexBumpParameterfvATI: PFNGLTEXBUMPPARAMETERFVATIPROC;
pub extern var glad_glTexBumpParameterivATI: PFNGLTEXBUMPPARAMETERIVATIPROC;
pub extern var glad_glTexCoord1bOES: PFNGLTEXCOORD1BOESPROC;
pub extern var glad_glTexCoord1bvOES: PFNGLTEXCOORD1BVOESPROC;
pub extern var glad_glTexCoord1hNV: PFNGLTEXCOORD1HNVPROC;
pub extern var glad_glTexCoord1hvNV: PFNGLTEXCOORD1HVNVPROC;
pub extern var glad_glTexCoord1xOES: PFNGLTEXCOORD1XOESPROC;
pub extern var glad_glTexCoord1xvOES: PFNGLTEXCOORD1XVOESPROC;
pub extern var glad_glTexCoord2bOES: PFNGLTEXCOORD2BOESPROC;
pub extern var glad_glTexCoord2bvOES: PFNGLTEXCOORD2BVOESPROC;
pub extern var glad_glTexCoord2fColor3fVertex3fSUN: PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC;
pub extern var glad_glTexCoord2fColor3fVertex3fvSUN: PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC;
pub extern var glad_glTexCoord2fColor4fNormal3fVertex3fSUN: PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glTexCoord2fColor4fNormal3fVertex3fvSUN: PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glTexCoord2fColor4ubVertex3fSUN: PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC;
pub extern var glad_glTexCoord2fColor4ubVertex3fvSUN: PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC;
pub extern var glad_glTexCoord2fNormal3fVertex3fSUN: PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC;
pub extern var glad_glTexCoord2fNormal3fVertex3fvSUN: PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC;
pub extern var glad_glTexCoord2fVertex3fSUN: PFNGLTEXCOORD2FVERTEX3FSUNPROC;
pub extern var glad_glTexCoord2fVertex3fvSUN: PFNGLTEXCOORD2FVERTEX3FVSUNPROC;
pub extern var glad_glTexCoord2hNV: PFNGLTEXCOORD2HNVPROC;
pub extern var glad_glTexCoord2hvNV: PFNGLTEXCOORD2HVNVPROC;
pub extern var glad_glTexCoord2xOES: PFNGLTEXCOORD2XOESPROC;
pub extern var glad_glTexCoord2xvOES: PFNGLTEXCOORD2XVOESPROC;
pub extern var glad_glTexCoord3bOES: PFNGLTEXCOORD3BOESPROC;
pub extern var glad_glTexCoord3bvOES: PFNGLTEXCOORD3BVOESPROC;
pub extern var glad_glTexCoord3hNV: PFNGLTEXCOORD3HNVPROC;
pub extern var glad_glTexCoord3hvNV: PFNGLTEXCOORD3HVNVPROC;
pub extern var glad_glTexCoord3xOES: PFNGLTEXCOORD3XOESPROC;
pub extern var glad_glTexCoord3xvOES: PFNGLTEXCOORD3XVOESPROC;
pub extern var glad_glTexCoord4bOES: PFNGLTEXCOORD4BOESPROC;
pub extern var glad_glTexCoord4bvOES: PFNGLTEXCOORD4BVOESPROC;
pub extern var glad_glTexCoord4fColor4fNormal3fVertex4fSUN: PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC;
pub extern var glad_glTexCoord4fColor4fNormal3fVertex4fvSUN: PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC;
pub extern var glad_glTexCoord4fVertex4fSUN: PFNGLTEXCOORD4FVERTEX4FSUNPROC;
pub extern var glad_glTexCoord4fVertex4fvSUN: PFNGLTEXCOORD4FVERTEX4FVSUNPROC;
pub extern var glad_glTexCoord4hNV: PFNGLTEXCOORD4HNVPROC;
pub extern var glad_glTexCoord4hvNV: PFNGLTEXCOORD4HVNVPROC;
pub extern var glad_glTexCoord4xOES: PFNGLTEXCOORD4XOESPROC;
pub extern var glad_glTexCoord4xvOES: PFNGLTEXCOORD4XVOESPROC;
pub extern var glad_glTexCoordFormatNV: PFNGLTEXCOORDFORMATNVPROC;
pub extern var glad_glTexCoordPointerEXT: PFNGLTEXCOORDPOINTEREXTPROC;
pub extern var glad_glTexCoordPointerListIBM: PFNGLTEXCOORDPOINTERLISTIBMPROC;
pub extern var glad_glTexCoordPointervINTEL: PFNGLTEXCOORDPOINTERVINTELPROC;
pub extern var glad_glTexEnvxOES: PFNGLTEXENVXOESPROC;
pub extern var glad_glTexEnvxvOES: PFNGLTEXENVXVOESPROC;
pub extern var glad_glTexFilterFuncSGIS: PFNGLTEXFILTERFUNCSGISPROC;
pub extern var glad_glTexGenxOES: PFNGLTEXGENXOESPROC;
pub extern var glad_glTexGenxvOES: PFNGLTEXGENXVOESPROC;
pub extern var glad_glTexImage1D: PFNGLTEXIMAGE1DPROC;
pub extern var glad_glTexImage2D: PFNGLTEXIMAGE2DPROC;
pub extern var glad_glTexImage2DMultisample: PFNGLTEXIMAGE2DMULTISAMPLEPROC;
pub extern var glad_glTexImage2DMultisampleCoverageNV: PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC;
pub extern var glad_glTexImage3D: PFNGLTEXIMAGE3DPROC;
pub extern var glad_glTexImage3DEXT: PFNGLTEXIMAGE3DEXTPROC;
pub extern var glad_glTexImage3DMultisample: PFNGLTEXIMAGE3DMULTISAMPLEPROC;
pub extern var glad_glTexImage3DMultisampleCoverageNV: PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC;
pub extern var glad_glTexImage4DSGIS: PFNGLTEXIMAGE4DSGISPROC;
pub extern var glad_glTexPageCommitmentARB: PFNGLTEXPAGECOMMITMENTARBPROC;
pub extern var glad_glTexPageCommitmentMemNV: PFNGLTEXPAGECOMMITMENTMEMNVPROC;
pub extern var glad_glTexParameterIiv: PFNGLTEXPARAMETERIIVPROC;
pub extern var glad_glTexParameterIivEXT: PFNGLTEXPARAMETERIIVEXTPROC;
pub extern var glad_glTexParameterIuiv: PFNGLTEXPARAMETERIUIVPROC;
pub extern var glad_glTexParameterIuivEXT: PFNGLTEXPARAMETERIUIVEXTPROC;
pub extern var glad_glTexParameterf: PFNGLTEXPARAMETERFPROC;
pub extern var glad_glTexParameterfv: PFNGLTEXPARAMETERFVPROC;
pub extern var glad_glTexParameteri: PFNGLTEXPARAMETERIPROC;
pub extern var glad_glTexParameteriv: PFNGLTEXPARAMETERIVPROC;
pub extern var glad_glTexParameterxOES: PFNGLTEXPARAMETERXOESPROC;
pub extern var glad_glTexParameterxvOES: PFNGLTEXPARAMETERXVOESPROC;
pub extern var glad_glTexRenderbufferNV: PFNGLTEXRENDERBUFFERNVPROC;
pub extern var glad_glTexStorage1D: PFNGLTEXSTORAGE1DPROC;
pub extern var glad_glTexStorage1DEXT: PFNGLTEXSTORAGE1DEXTPROC;
pub extern var glad_glTexStorage2D: PFNGLTEXSTORAGE2DPROC;
pub extern var glad_glTexStorage2DEXT: PFNGLTEXSTORAGE2DEXTPROC;
pub extern var glad_glTexStorage2DMultisample: PFNGLTEXSTORAGE2DMULTISAMPLEPROC;
pub extern var glad_glTexStorage3D: PFNGLTEXSTORAGE3DPROC;
pub extern var glad_glTexStorage3DEXT: PFNGLTEXSTORAGE3DEXTPROC;
pub extern var glad_glTexStorage3DMultisample: PFNGLTEXSTORAGE3DMULTISAMPLEPROC;
pub extern var glad_glTexStorageMem1DEXT: PFNGLTEXSTORAGEMEM1DEXTPROC;
pub extern var glad_glTexStorageMem2DEXT: PFNGLTEXSTORAGEMEM2DEXTPROC;
pub extern var glad_glTexStorageMem2DMultisampleEXT: PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC;
pub extern var glad_glTexStorageMem3DEXT: PFNGLTEXSTORAGEMEM3DEXTPROC;
pub extern var glad_glTexStorageMem3DMultisampleEXT: PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC;
pub extern var glad_glTexStorageSparseAMD: PFNGLTEXSTORAGESPARSEAMDPROC;
pub extern var glad_glTexSubImage1D: PFNGLTEXSUBIMAGE1DPROC;
pub extern var glad_glTexSubImage1DEXT: PFNGLTEXSUBIMAGE1DEXTPROC;
pub extern var glad_glTexSubImage2D: PFNGLTEXSUBIMAGE2DPROC;
pub extern var glad_glTexSubImage2DEXT: PFNGLTEXSUBIMAGE2DEXTPROC;
pub extern var glad_glTexSubImage3D: PFNGLTEXSUBIMAGE3DPROC;
pub extern var glad_glTexSubImage3DEXT: PFNGLTEXSUBIMAGE3DEXTPROC;
pub extern var glad_glTexSubImage4DSGIS: PFNGLTEXSUBIMAGE4DSGISPROC;
pub extern var glad_glTextureAttachMemoryNV: PFNGLTEXTUREATTACHMEMORYNVPROC;
pub extern var glad_glTextureBarrier: PFNGLTEXTUREBARRIERPROC;
pub extern var glad_glTextureBarrierNV: PFNGLTEXTUREBARRIERNVPROC;
pub extern var glad_glTextureBuffer: PFNGLTEXTUREBUFFERPROC;
pub extern var glad_glTextureBufferEXT: PFNGLTEXTUREBUFFEREXTPROC;
pub extern var glad_glTextureBufferRange: PFNGLTEXTUREBUFFERRANGEPROC;
pub extern var glad_glTextureBufferRangeEXT: PFNGLTEXTUREBUFFERRANGEEXTPROC;
pub extern var glad_glTextureColorMaskSGIS: PFNGLTEXTURECOLORMASKSGISPROC;
pub extern var glad_glTextureImage1DEXT: PFNGLTEXTUREIMAGE1DEXTPROC;
pub extern var glad_glTextureImage2DEXT: PFNGLTEXTUREIMAGE2DEXTPROC;
pub extern var glad_glTextureImage2DMultisampleCoverageNV: PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC;
pub extern var glad_glTextureImage2DMultisampleNV: PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC;
pub extern var glad_glTextureImage3DEXT: PFNGLTEXTUREIMAGE3DEXTPROC;
pub extern var glad_glTextureImage3DMultisampleCoverageNV: PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC;
pub extern var glad_glTextureImage3DMultisampleNV: PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC;
pub extern var glad_glTextureLightEXT: PFNGLTEXTURELIGHTEXTPROC;
pub extern var glad_glTextureMaterialEXT: PFNGLTEXTUREMATERIALEXTPROC;
pub extern var glad_glTextureNormalEXT: PFNGLTEXTURENORMALEXTPROC;
pub extern var glad_glTexturePageCommitmentEXT: PFNGLTEXTUREPAGECOMMITMENTEXTPROC;
pub extern var glad_glTexturePageCommitmentMemNV: PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC;
pub extern var glad_glTextureParameterIiv: PFNGLTEXTUREPARAMETERIIVPROC;
pub extern var glad_glTextureParameterIivEXT: PFNGLTEXTUREPARAMETERIIVEXTPROC;
pub extern var glad_glTextureParameterIuiv: PFNGLTEXTUREPARAMETERIUIVPROC;
pub extern var glad_glTextureParameterIuivEXT: PFNGLTEXTUREPARAMETERIUIVEXTPROC;
pub extern var glad_glTextureParameterf: PFNGLTEXTUREPARAMETERFPROC;
pub extern var glad_glTextureParameterfEXT: PFNGLTEXTUREPARAMETERFEXTPROC;
pub extern var glad_glTextureParameterfv: PFNGLTEXTUREPARAMETERFVPROC;
pub extern var glad_glTextureParameterfvEXT: PFNGLTEXTUREPARAMETERFVEXTPROC;
pub extern var glad_glTextureParameteri: PFNGLTEXTUREPARAMETERIPROC;
pub extern var glad_glTextureParameteriEXT: PFNGLTEXTUREPARAMETERIEXTPROC;
pub extern var glad_glTextureParameteriv: PFNGLTEXTUREPARAMETERIVPROC;
pub extern var glad_glTextureParameterivEXT: PFNGLTEXTUREPARAMETERIVEXTPROC;
pub extern var glad_glTextureRangeAPPLE: PFNGLTEXTURERANGEAPPLEPROC;
pub extern var glad_glTextureRenderbufferEXT: PFNGLTEXTURERENDERBUFFEREXTPROC;
pub extern var glad_glTextureStorage1D: PFNGLTEXTURESTORAGE1DPROC;
pub extern var glad_glTextureStorage1DEXT: PFNGLTEXTURESTORAGE1DEXTPROC;
pub extern var glad_glTextureStorage2D: PFNGLTEXTURESTORAGE2DPROC;
pub extern var glad_glTextureStorage2DEXT: PFNGLTEXTURESTORAGE2DEXTPROC;
pub extern var glad_glTextureStorage2DMultisample: PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC;
pub extern var glad_glTextureStorage2DMultisampleEXT: PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC;
pub extern var glad_glTextureStorage3D: PFNGLTEXTURESTORAGE3DPROC;
pub extern var glad_glTextureStorage3DEXT: PFNGLTEXTURESTORAGE3DEXTPROC;
pub extern var glad_glTextureStorage3DMultisample: PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC;
pub extern var glad_glTextureStorage3DMultisampleEXT: PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC;
pub extern var glad_glTextureStorageMem1DEXT: PFNGLTEXTURESTORAGEMEM1DEXTPROC;
pub extern var glad_glTextureStorageMem2DEXT: PFNGLTEXTURESTORAGEMEM2DEXTPROC;
pub extern var glad_glTextureStorageMem2DMultisampleEXT: PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC;
pub extern var glad_glTextureStorageMem3DEXT: PFNGLTEXTURESTORAGEMEM3DEXTPROC;
pub extern var glad_glTextureStorageMem3DMultisampleEXT: PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC;
pub extern var glad_glTextureStorageSparseAMD: PFNGLTEXTURESTORAGESPARSEAMDPROC;
pub extern var glad_glTextureSubImage1D: PFNGLTEXTURESUBIMAGE1DPROC;
pub extern var glad_glTextureSubImage1DEXT: PFNGLTEXTURESUBIMAGE1DEXTPROC;
pub extern var glad_glTextureSubImage2D: PFNGLTEXTURESUBIMAGE2DPROC;
pub extern var glad_glTextureSubImage2DEXT: PFNGLTEXTURESUBIMAGE2DEXTPROC;
pub extern var glad_glTextureSubImage3D: PFNGLTEXTURESUBIMAGE3DPROC;
pub extern var glad_glTextureSubImage3DEXT: PFNGLTEXTURESUBIMAGE3DEXTPROC;
pub extern var glad_glTextureView: PFNGLTEXTUREVIEWPROC;
pub extern var glad_glTrackMatrixNV: PFNGLTRACKMATRIXNVPROC;
pub extern var glad_glTransformFeedbackAttribsNV: PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC;
pub extern var glad_glTransformFeedbackBufferBase: PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC;
pub extern var glad_glTransformFeedbackBufferRange: PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC;
pub extern var glad_glTransformFeedbackStreamAttribsNV: PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC;
pub extern var glad_glTransformFeedbackVaryings: PFNGLTRANSFORMFEEDBACKVARYINGSPROC;
pub extern var glad_glTransformFeedbackVaryingsEXT: PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC;
pub extern var glad_glTransformFeedbackVaryingsNV: PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC;
pub extern var glad_glTransformPathNV: PFNGLTRANSFORMPATHNVPROC;
pub extern var glad_glTranslatexOES: PFNGLTRANSLATEXOESPROC;
pub extern var glad_glUniform1d: PFNGLUNIFORM1DPROC;
pub extern var glad_glUniform1dv: PFNGLUNIFORM1DVPROC;
pub extern var glad_glUniform1f: PFNGLUNIFORM1FPROC;
pub extern var glad_glUniform1fARB: PFNGLUNIFORM1FARBPROC;
pub extern var glad_glUniform1fv: PFNGLUNIFORM1FVPROC;
pub extern var glad_glUniform1fvARB: PFNGLUNIFORM1FVARBPROC;
pub extern var glad_glUniform1i: PFNGLUNIFORM1IPROC;
pub extern var glad_glUniform1i64ARB: PFNGLUNIFORM1I64ARBPROC;
pub extern var glad_glUniform1i64NV: PFNGLUNIFORM1I64NVPROC;
pub extern var glad_glUniform1i64vARB: PFNGLUNIFORM1I64VARBPROC;
pub extern var glad_glUniform1i64vNV: PFNGLUNIFORM1I64VNVPROC;
pub extern var glad_glUniform1iARB: PFNGLUNIFORM1IARBPROC;
pub extern var glad_glUniform1iv: PFNGLUNIFORM1IVPROC;
pub extern var glad_glUniform1ivARB: PFNGLUNIFORM1IVARBPROC;
pub extern var glad_glUniform1ui: PFNGLUNIFORM1UIPROC;
pub extern var glad_glUniform1ui64ARB: PFNGLUNIFORM1UI64ARBPROC;
pub extern var glad_glUniform1ui64NV: PFNGLUNIFORM1UI64NVPROC;
pub extern var glad_glUniform1ui64vARB: PFNGLUNIFORM1UI64VARBPROC;
pub extern var glad_glUniform1ui64vNV: PFNGLUNIFORM1UI64VNVPROC;
pub extern var glad_glUniform1uiEXT: PFNGLUNIFORM1UIEXTPROC;
pub extern var glad_glUniform1uiv: PFNGLUNIFORM1UIVPROC;
pub extern var glad_glUniform1uivEXT: PFNGLUNIFORM1UIVEXTPROC;
pub extern var glad_glUniform2d: PFNGLUNIFORM2DPROC;
pub extern var glad_glUniform2dv: PFNGLUNIFORM2DVPROC;
pub extern var glad_glUniform2f: PFNGLUNIFORM2FPROC;
pub extern var glad_glUniform2fARB: PFNGLUNIFORM2FARBPROC;
pub extern var glad_glUniform2fv: PFNGLUNIFORM2FVPROC;
pub extern var glad_glUniform2fvARB: PFNGLUNIFORM2FVARBPROC;
pub extern var glad_glUniform2i: PFNGLUNIFORM2IPROC;
pub extern var glad_glUniform2i64ARB: PFNGLUNIFORM2I64ARBPROC;
pub extern var glad_glUniform2i64NV: PFNGLUNIFORM2I64NVPROC;
pub extern var glad_glUniform2i64vARB: PFNGLUNIFORM2I64VARBPROC;
pub extern var glad_glUniform2i64vNV: PFNGLUNIFORM2I64VNVPROC;
pub extern var glad_glUniform2iARB: PFNGLUNIFORM2IARBPROC;
pub extern var glad_glUniform2iv: PFNGLUNIFORM2IVPROC;
pub extern var glad_glUniform2ivARB: PFNGLUNIFORM2IVARBPROC;
pub extern var glad_glUniform2ui: PFNGLUNIFORM2UIPROC;
pub extern var glad_glUniform2ui64ARB: PFNGLUNIFORM2UI64ARBPROC;
pub extern var glad_glUniform2ui64NV: PFNGLUNIFORM2UI64NVPROC;
pub extern var glad_glUniform2ui64vARB: PFNGLUNIFORM2UI64VARBPROC;
pub extern var glad_glUniform2ui64vNV: PFNGLUNIFORM2UI64VNVPROC;
pub extern var glad_glUniform2uiEXT: PFNGLUNIFORM2UIEXTPROC;
pub extern var glad_glUniform2uiv: PFNGLUNIFORM2UIVPROC;
pub extern var glad_glUniform2uivEXT: PFNGLUNIFORM2UIVEXTPROC;
pub extern var glad_glUniform3d: PFNGLUNIFORM3DPROC;
pub extern var glad_glUniform3dv: PFNGLUNIFORM3DVPROC;
pub extern var glad_glUniform3f: PFNGLUNIFORM3FPROC;
pub extern var glad_glUniform3fARB: PFNGLUNIFORM3FARBPROC;
pub extern var glad_glUniform3fv: PFNGLUNIFORM3FVPROC;
pub extern var glad_glUniform3fvARB: PFNGLUNIFORM3FVARBPROC;
pub extern var glad_glUniform3i: PFNGLUNIFORM3IPROC;
pub extern var glad_glUniform3i64ARB: PFNGLUNIFORM3I64ARBPROC;
pub extern var glad_glUniform3i64NV: PFNGLUNIFORM3I64NVPROC;
pub extern var glad_glUniform3i64vARB: PFNGLUNIFORM3I64VARBPROC;
pub extern var glad_glUniform3i64vNV: PFNGLUNIFORM3I64VNVPROC;
pub extern var glad_glUniform3iARB: PFNGLUNIFORM3IARBPROC;
pub extern var glad_glUniform3iv: PFNGLUNIFORM3IVPROC;
pub extern var glad_glUniform3ivARB: PFNGLUNIFORM3IVARBPROC;
pub extern var glad_glUniform3ui: PFNGLUNIFORM3UIPROC;
pub extern var glad_glUniform3ui64ARB: PFNGLUNIFORM3UI64ARBPROC;
pub extern var glad_glUniform3ui64NV: PFNGLUNIFORM3UI64NVPROC;
pub extern var glad_glUniform3ui64vARB: PFNGLUNIFORM3UI64VARBPROC;
pub extern var glad_glUniform3ui64vNV: PFNGLUNIFORM3UI64VNVPROC;
pub extern var glad_glUniform3uiEXT: PFNGLUNIFORM3UIEXTPROC;
pub extern var glad_glUniform3uiv: PFNGLUNIFORM3UIVPROC;
pub extern var glad_glUniform3uivEXT: PFNGLUNIFORM3UIVEXTPROC;
pub extern var glad_glUniform4d: PFNGLUNIFORM4DPROC;
pub extern var glad_glUniform4dv: PFNGLUNIFORM4DVPROC;
pub extern var glad_glUniform4f: PFNGLUNIFORM4FPROC;
pub extern var glad_glUniform4fARB: PFNGLUNIFORM4FARBPROC;
pub extern var glad_glUniform4fv: PFNGLUNIFORM4FVPROC;
pub extern var glad_glUniform4fvARB: PFNGLUNIFORM4FVARBPROC;
pub extern var glad_glUniform4i: PFNGLUNIFORM4IPROC;
pub extern var glad_glUniform4i64ARB: PFNGLUNIFORM4I64ARBPROC;
pub extern var glad_glUniform4i64NV: PFNGLUNIFORM4I64NVPROC;
pub extern var glad_glUniform4i64vARB: PFNGLUNIFORM4I64VARBPROC;
pub extern var glad_glUniform4i64vNV: PFNGLUNIFORM4I64VNVPROC;
pub extern var glad_glUniform4iARB: PFNGLUNIFORM4IARBPROC;
pub extern var glad_glUniform4iv: PFNGLUNIFORM4IVPROC;
pub extern var glad_glUniform4ivARB: PFNGLUNIFORM4IVARBPROC;
pub extern var glad_glUniform4ui: PFNGLUNIFORM4UIPROC;
pub extern var glad_glUniform4ui64ARB: PFNGLUNIFORM4UI64ARBPROC;
pub extern var glad_glUniform4ui64NV: PFNGLUNIFORM4UI64NVPROC;
pub extern var glad_glUniform4ui64vARB: PFNGLUNIFORM4UI64VARBPROC;
pub extern var glad_glUniform4ui64vNV: PFNGLUNIFORM4UI64VNVPROC;
pub extern var glad_glUniform4uiEXT: PFNGLUNIFORM4UIEXTPROC;
pub extern var glad_glUniform4uiv: PFNGLUNIFORM4UIVPROC;
pub extern var glad_glUniform4uivEXT: PFNGLUNIFORM4UIVEXTPROC;
pub extern var glad_glUniformBlockBinding: PFNGLUNIFORMBLOCKBINDINGPROC;
pub extern var glad_glUniformBufferEXT: PFNGLUNIFORMBUFFEREXTPROC;
pub extern var glad_glUniformHandleui64ARB: PFNGLUNIFORMHANDLEUI64ARBPROC;
pub extern var glad_glUniformHandleui64NV: PFNGLUNIFORMHANDLEUI64NVPROC;
pub extern var glad_glUniformHandleui64vARB: PFNGLUNIFORMHANDLEUI64VARBPROC;
pub extern var glad_glUniformHandleui64vNV: PFNGLUNIFORMHANDLEUI64VNVPROC;
pub extern var glad_glUniformMatrix2dv: PFNGLUNIFORMMATRIX2DVPROC;
pub extern var glad_glUniformMatrix2fv: PFNGLUNIFORMMATRIX2FVPROC;
pub extern var glad_glUniformMatrix2fvARB: PFNGLUNIFORMMATRIX2FVARBPROC;
pub extern var glad_glUniformMatrix2x3dv: PFNGLUNIFORMMATRIX2X3DVPROC;
pub extern var glad_glUniformMatrix2x3fv: PFNGLUNIFORMMATRIX2X3FVPROC;
pub extern var glad_glUniformMatrix2x4dv: PFNGLUNIFORMMATRIX2X4DVPROC;
pub extern var glad_glUniformMatrix2x4fv: PFNGLUNIFORMMATRIX2X4FVPROC;
pub extern var glad_glUniformMatrix3dv: PFNGLUNIFORMMATRIX3DVPROC;
pub extern var glad_glUniformMatrix3fv: PFNGLUNIFORMMATRIX3FVPROC;
pub extern var glad_glUniformMatrix3fvARB: PFNGLUNIFORMMATRIX3FVARBPROC;
pub extern var glad_glUniformMatrix3x2dv: PFNGLUNIFORMMATRIX3X2DVPROC;
pub extern var glad_glUniformMatrix3x2fv: PFNGLUNIFORMMATRIX3X2FVPROC;
pub extern var glad_glUniformMatrix3x4dv: PFNGLUNIFORMMATRIX3X4DVPROC;
pub extern var glad_glUniformMatrix3x4fv: PFNGLUNIFORMMATRIX3X4FVPROC;
pub extern var glad_glUniformMatrix4dv: PFNGLUNIFORMMATRIX4DVPROC;
pub extern var glad_glUniformMatrix4fv: PFNGLUNIFORMMATRIX4FVPROC;
pub extern var glad_glUniformMatrix4fvARB: PFNGLUNIFORMMATRIX4FVARBPROC;
pub extern var glad_glUniformMatrix4x2dv: PFNGLUNIFORMMATRIX4X2DVPROC;
pub extern var glad_glUniformMatrix4x2fv: PFNGLUNIFORMMATRIX4X2FVPROC;
pub extern var glad_glUniformMatrix4x3dv: PFNGLUNIFORMMATRIX4X3DVPROC;
pub extern var glad_glUniformMatrix4x3fv: PFNGLUNIFORMMATRIX4X3FVPROC;
pub extern var glad_glUniformSubroutinesuiv: PFNGLUNIFORMSUBROUTINESUIVPROC;
pub extern var glad_glUniformui64NV: PFNGLUNIFORMUI64NVPROC;
pub extern var glad_glUniformui64vNV: PFNGLUNIFORMUI64VNVPROC;
pub extern var glad_glUnlockArraysEXT: PFNGLUNLOCKARRAYSEXTPROC;
pub extern var glad_glUnmapBuffer: PFNGLUNMAPBUFFERPROC;
pub extern var glad_glUnmapBufferARB: PFNGLUNMAPBUFFERARBPROC;
pub extern var glad_glUnmapNamedBuffer: PFNGLUNMAPNAMEDBUFFERPROC;
pub extern var glad_glUnmapNamedBufferEXT: PFNGLUNMAPNAMEDBUFFEREXTPROC;
pub extern var glad_glUnmapObjectBufferATI: PFNGLUNMAPOBJECTBUFFERATIPROC;
pub extern var glad_glUnmapTexture2DINTEL: PFNGLUNMAPTEXTURE2DINTELPROC;
pub extern var glad_glUpdateObjectBufferATI: PFNGLUPDATEOBJECTBUFFERATIPROC;
pub extern var glad_glUploadGpuMaskNVX: PFNGLUPLOADGPUMASKNVXPROC;
pub extern var glad_glUseProgram: PFNGLUSEPROGRAMPROC;
pub extern var glad_glUseProgramObjectARB: PFNGLUSEPROGRAMOBJECTARBPROC;
pub extern var glad_glUseProgramStages: PFNGLUSEPROGRAMSTAGESPROC;
pub extern var glad_glUseShaderProgramEXT: PFNGLUSESHADERPROGRAMEXTPROC;
pub extern var glad_glVDPAUFiniNV: PFNGLVDPAUFININVPROC;
pub extern var glad_glVDPAUGetSurfaceivNV: PFNGLVDPAUGETSURFACEIVNVPROC;
pub extern var glad_glVDPAUInitNV: PFNGLVDPAUINITNVPROC;
pub extern var glad_glVDPAUIsSurfaceNV: PFNGLVDPAUISSURFACENVPROC;
pub extern var glad_glVDPAUMapSurfacesNV: PFNGLVDPAUMAPSURFACESNVPROC;
pub extern var glad_glVDPAURegisterOutputSurfaceNV: PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC;
pub extern var glad_glVDPAURegisterVideoSurfaceNV: PFNGLVDPAUREGISTERVIDEOSURFACENVPROC;
pub extern var glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV: PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC;
pub extern var glad_glVDPAUSurfaceAccessNV: PFNGLVDPAUSURFACEACCESSNVPROC;
pub extern var glad_glVDPAUUnmapSurfacesNV: PFNGLVDPAUUNMAPSURFACESNVPROC;
pub extern var glad_glVDPAUUnregisterSurfaceNV: PFNGLVDPAUUNREGISTERSURFACENVPROC;
pub extern var glad_glValidateProgram: PFNGLVALIDATEPROGRAMPROC;
pub extern var glad_glValidateProgramARB: PFNGLVALIDATEPROGRAMARBPROC;
pub extern var glad_glValidateProgramPipeline: PFNGLVALIDATEPROGRAMPIPELINEPROC;
pub extern var glad_glVariantArrayObjectATI: PFNGLVARIANTARRAYOBJECTATIPROC;
pub extern var glad_glVariantPointerEXT: PFNGLVARIANTPOINTEREXTPROC;
pub extern var glad_glVariantbvEXT: PFNGLVARIANTBVEXTPROC;
pub extern var glad_glVariantdvEXT: PFNGLVARIANTDVEXTPROC;
pub extern var glad_glVariantfvEXT: PFNGLVARIANTFVEXTPROC;
pub extern var glad_glVariantivEXT: PFNGLVARIANTIVEXTPROC;
pub extern var glad_glVariantsvEXT: PFNGLVARIANTSVEXTPROC;
pub extern var glad_glVariantubvEXT: PFNGLVARIANTUBVEXTPROC;
pub extern var glad_glVariantuivEXT: PFNGLVARIANTUIVEXTPROC;
pub extern var glad_glVariantusvEXT: PFNGLVARIANTUSVEXTPROC;
pub extern var glad_glVertex2bOES: PFNGLVERTEX2BOESPROC;
pub extern var glad_glVertex2bvOES: PFNGLVERTEX2BVOESPROC;
pub extern var glad_glVertex2hNV: PFNGLVERTEX2HNVPROC;
pub extern var glad_glVertex2hvNV: PFNGLVERTEX2HVNVPROC;
pub extern var glad_glVertex2xOES: PFNGLVERTEX2XOESPROC;
pub extern var glad_glVertex2xvOES: PFNGLVERTEX2XVOESPROC;
pub extern var glad_glVertex3bOES: PFNGLVERTEX3BOESPROC;
pub extern var glad_glVertex3bvOES: PFNGLVERTEX3BVOESPROC;
pub extern var glad_glVertex3hNV: PFNGLVERTEX3HNVPROC;
pub extern var glad_glVertex3hvNV: PFNGLVERTEX3HVNVPROC;
pub extern var glad_glVertex3xOES: PFNGLVERTEX3XOESPROC;
pub extern var glad_glVertex3xvOES: PFNGLVERTEX3XVOESPROC;
pub extern var glad_glVertex4bOES: PFNGLVERTEX4BOESPROC;
pub extern var glad_glVertex4bvOES: PFNGLVERTEX4BVOESPROC;
pub extern var glad_glVertex4hNV: PFNGLVERTEX4HNVPROC;
pub extern var glad_glVertex4hvNV: PFNGLVERTEX4HVNVPROC;
pub extern var glad_glVertex4xOES: PFNGLVERTEX4XOESPROC;
pub extern var glad_glVertex4xvOES: PFNGLVERTEX4XVOESPROC;
pub extern var glad_glVertexArrayAttribBinding: PFNGLVERTEXARRAYATTRIBBINDINGPROC;
pub extern var glad_glVertexArrayAttribFormat: PFNGLVERTEXARRAYATTRIBFORMATPROC;
pub extern var glad_glVertexArrayAttribIFormat: PFNGLVERTEXARRAYATTRIBIFORMATPROC;
pub extern var glad_glVertexArrayAttribLFormat: PFNGLVERTEXARRAYATTRIBLFORMATPROC;
pub extern var glad_glVertexArrayBindVertexBufferEXT: PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC;
pub extern var glad_glVertexArrayBindingDivisor: PFNGLVERTEXARRAYBINDINGDIVISORPROC;
pub extern var glad_glVertexArrayColorOffsetEXT: PFNGLVERTEXARRAYCOLOROFFSETEXTPROC;
pub extern var glad_glVertexArrayEdgeFlagOffsetEXT: PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC;
pub extern var glad_glVertexArrayElementBuffer: PFNGLVERTEXARRAYELEMENTBUFFERPROC;
pub extern var glad_glVertexArrayFogCoordOffsetEXT: PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC;
pub extern var glad_glVertexArrayIndexOffsetEXT: PFNGLVERTEXARRAYINDEXOFFSETEXTPROC;
pub extern var glad_glVertexArrayMultiTexCoordOffsetEXT: PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC;
pub extern var glad_glVertexArrayNormalOffsetEXT: PFNGLVERTEXARRAYNORMALOFFSETEXTPROC;
pub extern var glad_glVertexArrayParameteriAPPLE: PFNGLVERTEXARRAYPARAMETERIAPPLEPROC;
pub extern var glad_glVertexArrayRangeAPPLE: PFNGLVERTEXARRAYRANGEAPPLEPROC;
pub extern var glad_glVertexArrayRangeNV: PFNGLVERTEXARRAYRANGENVPROC;
pub extern var glad_glVertexArraySecondaryColorOffsetEXT: PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC;
pub extern var glad_glVertexArrayTexCoordOffsetEXT: PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC;
pub extern var glad_glVertexArrayVertexAttribBindingEXT: PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC;
pub extern var glad_glVertexArrayVertexAttribDivisorEXT: PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC;
pub extern var glad_glVertexArrayVertexAttribFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC;
pub extern var glad_glVertexArrayVertexAttribIFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC;
pub extern var glad_glVertexArrayVertexAttribIOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC;
pub extern var glad_glVertexArrayVertexAttribLFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC;
pub extern var glad_glVertexArrayVertexAttribLOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC;
pub extern var glad_glVertexArrayVertexAttribOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC;
pub extern var glad_glVertexArrayVertexBindingDivisorEXT: PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC;
pub extern var glad_glVertexArrayVertexBuffer: PFNGLVERTEXARRAYVERTEXBUFFERPROC;
pub extern var glad_glVertexArrayVertexBuffers: PFNGLVERTEXARRAYVERTEXBUFFERSPROC;
pub extern var glad_glVertexArrayVertexOffsetEXT: PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC;
pub extern var glad_glVertexAttrib1d: PFNGLVERTEXATTRIB1DPROC;
pub extern var glad_glVertexAttrib1dARB: PFNGLVERTEXATTRIB1DARBPROC;
pub extern var glad_glVertexAttrib1dNV: PFNGLVERTEXATTRIB1DNVPROC;
pub extern var glad_glVertexAttrib1dv: PFNGLVERTEXATTRIB1DVPROC;
pub extern var glad_glVertexAttrib1dvARB: PFNGLVERTEXATTRIB1DVARBPROC;
pub extern var glad_glVertexAttrib1dvNV: PFNGLVERTEXATTRIB1DVNVPROC;
pub extern var glad_glVertexAttrib1f: PFNGLVERTEXATTRIB1FPROC;
pub extern var glad_glVertexAttrib1fARB: PFNGLVERTEXATTRIB1FARBPROC;
pub extern var glad_glVertexAttrib1fNV: PFNGLVERTEXATTRIB1FNVPROC;
pub extern var glad_glVertexAttrib1fv: PFNGLVERTEXATTRIB1FVPROC;
pub extern var glad_glVertexAttrib1fvARB: PFNGLVERTEXATTRIB1FVARBPROC;
pub extern var glad_glVertexAttrib1fvNV: PFNGLVERTEXATTRIB1FVNVPROC;
pub extern var glad_glVertexAttrib1hNV: PFNGLVERTEXATTRIB1HNVPROC;
pub extern var glad_glVertexAttrib1hvNV: PFNGLVERTEXATTRIB1HVNVPROC;
pub extern var glad_glVertexAttrib1s: PFNGLVERTEXATTRIB1SPROC;
pub extern var glad_glVertexAttrib1sARB: PFNGLVERTEXATTRIB1SARBPROC;
pub extern var glad_glVertexAttrib1sNV: PFNGLVERTEXATTRIB1SNVPROC;
pub extern var glad_glVertexAttrib1sv: PFNGLVERTEXATTRIB1SVPROC;
pub extern var glad_glVertexAttrib1svARB: PFNGLVERTEXATTRIB1SVARBPROC;
pub extern var glad_glVertexAttrib1svNV: PFNGLVERTEXATTRIB1SVNVPROC;
pub extern var glad_glVertexAttrib2d: PFNGLVERTEXATTRIB2DPROC;
pub extern var glad_glVertexAttrib2dARB: PFNGLVERTEXATTRIB2DARBPROC;
pub extern var glad_glVertexAttrib2dNV: PFNGLVERTEXATTRIB2DNVPROC;
pub extern var glad_glVertexAttrib2dv: PFNGLVERTEXATTRIB2DVPROC;
pub extern var glad_glVertexAttrib2dvARB: PFNGLVERTEXATTRIB2DVARBPROC;
pub extern var glad_glVertexAttrib2dvNV: PFNGLVERTEXATTRIB2DVNVPROC;
pub extern var glad_glVertexAttrib2f: PFNGLVERTEXATTRIB2FPROC;
pub extern var glad_glVertexAttrib2fARB: PFNGLVERTEXATTRIB2FARBPROC;
pub extern var glad_glVertexAttrib2fNV: PFNGLVERTEXATTRIB2FNVPROC;
pub extern var glad_glVertexAttrib2fv: PFNGLVERTEXATTRIB2FVPROC;
pub extern var glad_glVertexAttrib2fvARB: PFNGLVERTEXATTRIB2FVARBPROC;
pub extern var glad_glVertexAttrib2fvNV: PFNGLVERTEXATTRIB2FVNVPROC;
pub extern var glad_glVertexAttrib2hNV: PFNGLVERTEXATTRIB2HNVPROC;
pub extern var glad_glVertexAttrib2hvNV: PFNGLVERTEXATTRIB2HVNVPROC;
pub extern var glad_glVertexAttrib2s: PFNGLVERTEXATTRIB2SPROC;
pub extern var glad_glVertexAttrib2sARB: PFNGLVERTEXATTRIB2SARBPROC;
pub extern var glad_glVertexAttrib2sNV: PFNGLVERTEXATTRIB2SNVPROC;
pub extern var glad_glVertexAttrib2sv: PFNGLVERTEXATTRIB2SVPROC;
pub extern var glad_glVertexAttrib2svARB: PFNGLVERTEXATTRIB2SVARBPROC;
pub extern var glad_glVertexAttrib2svNV: PFNGLVERTEXATTRIB2SVNVPROC;
pub extern var glad_glVertexAttrib3d: PFNGLVERTEXATTRIB3DPROC;
pub extern var glad_glVertexAttrib3dARB: PFNGLVERTEXATTRIB3DARBPROC;
pub extern var glad_glVertexAttrib3dNV: PFNGLVERTEXATTRIB3DNVPROC;
pub extern var glad_glVertexAttrib3dv: PFNGLVERTEXATTRIB3DVPROC;
pub extern var glad_glVertexAttrib3dvARB: PFNGLVERTEXATTRIB3DVARBPROC;
pub extern var glad_glVertexAttrib3dvNV: PFNGLVERTEXATTRIB3DVNVPROC;
pub extern var glad_glVertexAttrib3f: PFNGLVERTEXATTRIB3FPROC;
pub extern var glad_glVertexAttrib3fARB: PFNGLVERTEXATTRIB3FARBPROC;
pub extern var glad_glVertexAttrib3fNV: PFNGLVERTEXATTRIB3FNVPROC;
pub extern var glad_glVertexAttrib3fv: PFNGLVERTEXATTRIB3FVPROC;
pub extern var glad_glVertexAttrib3fvARB: PFNGLVERTEXATTRIB3FVARBPROC;
pub extern var glad_glVertexAttrib3fvNV: PFNGLVERTEXATTRIB3FVNVPROC;
pub extern var glad_glVertexAttrib3hNV: PFNGLVERTEXATTRIB3HNVPROC;
pub extern var glad_glVertexAttrib3hvNV: PFNGLVERTEXATTRIB3HVNVPROC;
pub extern var glad_glVertexAttrib3s: PFNGLVERTEXATTRIB3SPROC;
pub extern var glad_glVertexAttrib3sARB: PFNGLVERTEXATTRIB3SARBPROC;
pub extern var glad_glVertexAttrib3sNV: PFNGLVERTEXATTRIB3SNVPROC;
pub extern var glad_glVertexAttrib3sv: PFNGLVERTEXATTRIB3SVPROC;
pub extern var glad_glVertexAttrib3svARB: PFNGLVERTEXATTRIB3SVARBPROC;
pub extern var glad_glVertexAttrib3svNV: PFNGLVERTEXATTRIB3SVNVPROC;
pub extern var glad_glVertexAttrib4Nbv: PFNGLVERTEXATTRIB4NBVPROC;
pub extern var glad_glVertexAttrib4NbvARB: PFNGLVERTEXATTRIB4NBVARBPROC;
pub extern var glad_glVertexAttrib4Niv: PFNGLVERTEXATTRIB4NIVPROC;
pub extern var glad_glVertexAttrib4NivARB: PFNGLVERTEXATTRIB4NIVARBPROC;
pub extern var glad_glVertexAttrib4Nsv: PFNGLVERTEXATTRIB4NSVPROC;
pub extern var glad_glVertexAttrib4NsvARB: PFNGLVERTEXATTRIB4NSVARBPROC;
pub extern var glad_glVertexAttrib4Nub: PFNGLVERTEXATTRIB4NUBPROC;
pub extern var glad_glVertexAttrib4NubARB: PFNGLVERTEXATTRIB4NUBARBPROC;
pub extern var glad_glVertexAttrib4Nubv: PFNGLVERTEXATTRIB4NUBVPROC;
pub extern var glad_glVertexAttrib4NubvARB: PFNGLVERTEXATTRIB4NUBVARBPROC;
pub extern var glad_glVertexAttrib4Nuiv: PFNGLVERTEXATTRIB4NUIVPROC;
pub extern var glad_glVertexAttrib4NuivARB: PFNGLVERTEXATTRIB4NUIVARBPROC;
pub extern var glad_glVertexAttrib4Nusv: PFNGLVERTEXATTRIB4NUSVPROC;
pub extern var glad_glVertexAttrib4NusvARB: PFNGLVERTEXATTRIB4NUSVARBPROC;
pub extern var glad_glVertexAttrib4bv: PFNGLVERTEXATTRIB4BVPROC;
pub extern var glad_glVertexAttrib4bvARB: PFNGLVERTEXATTRIB4BVARBPROC;
pub extern var glad_glVertexAttrib4d: PFNGLVERTEXATTRIB4DPROC;
pub extern var glad_glVertexAttrib4dARB: PFNGLVERTEXATTRIB4DARBPROC;
pub extern var glad_glVertexAttrib4dNV: PFNGLVERTEXATTRIB4DNVPROC;
pub extern var glad_glVertexAttrib4dv: PFNGLVERTEXATTRIB4DVPROC;
pub extern var glad_glVertexAttrib4dvARB: PFNGLVERTEXATTRIB4DVARBPROC;
pub extern var glad_glVertexAttrib4dvNV: PFNGLVERTEXATTRIB4DVNVPROC;
pub extern var glad_glVertexAttrib4f: PFNGLVERTEXATTRIB4FPROC;
pub extern var glad_glVertexAttrib4fARB: PFNGLVERTEXATTRIB4FARBPROC;
pub extern var glad_glVertexAttrib4fNV: PFNGLVERTEXATTRIB4FNVPROC;
pub extern var glad_glVertexAttrib4fv: PFNGLVERTEXATTRIB4FVPROC;
pub extern var glad_glVertexAttrib4fvARB: PFNGLVERTEXATTRIB4FVARBPROC;
pub extern var glad_glVertexAttrib4fvNV: PFNGLVERTEXATTRIB4FVNVPROC;
pub extern var glad_glVertexAttrib4hNV: PFNGLVERTEXATTRIB4HNVPROC;
pub extern var glad_glVertexAttrib4hvNV: PFNGLVERTEXATTRIB4HVNVPROC;
pub extern var glad_glVertexAttrib4iv: PFNGLVERTEXATTRIB4IVPROC;
pub extern var glad_glVertexAttrib4ivARB: PFNGLVERTEXATTRIB4IVARBPROC;
pub extern var glad_glVertexAttrib4s: PFNGLVERTEXATTRIB4SPROC;
pub extern var glad_glVertexAttrib4sARB: PFNGLVERTEXATTRIB4SARBPROC;
pub extern var glad_glVertexAttrib4sNV: PFNGLVERTEXATTRIB4SNVPROC;
pub extern var glad_glVertexAttrib4sv: PFNGLVERTEXATTRIB4SVPROC;
pub extern var glad_glVertexAttrib4svARB: PFNGLVERTEXATTRIB4SVARBPROC;
pub extern var glad_glVertexAttrib4svNV: PFNGLVERTEXATTRIB4SVNVPROC;
pub extern var glad_glVertexAttrib4ubNV: PFNGLVERTEXATTRIB4UBNVPROC;
pub extern var glad_glVertexAttrib4ubv: PFNGLVERTEXATTRIB4UBVPROC;
pub extern var glad_glVertexAttrib4ubvARB: PFNGLVERTEXATTRIB4UBVARBPROC;
pub extern var glad_glVertexAttrib4ubvNV: PFNGLVERTEXATTRIB4UBVNVPROC;
pub extern var glad_glVertexAttrib4uiv: PFNGLVERTEXATTRIB4UIVPROC;
pub extern var glad_glVertexAttrib4uivARB: PFNGLVERTEXATTRIB4UIVARBPROC;
pub extern var glad_glVertexAttrib4usv: PFNGLVERTEXATTRIB4USVPROC;
pub extern var glad_glVertexAttrib4usvARB: PFNGLVERTEXATTRIB4USVARBPROC;
pub extern var glad_glVertexAttribArrayObjectATI: PFNGLVERTEXATTRIBARRAYOBJECTATIPROC;
pub extern var glad_glVertexAttribBinding: PFNGLVERTEXATTRIBBINDINGPROC;
pub extern var glad_glVertexAttribDivisor: PFNGLVERTEXATTRIBDIVISORPROC;
pub extern var glad_glVertexAttribDivisorARB: PFNGLVERTEXATTRIBDIVISORARBPROC;
pub extern var glad_glVertexAttribFormat: PFNGLVERTEXATTRIBFORMATPROC;
pub extern var glad_glVertexAttribFormatNV: PFNGLVERTEXATTRIBFORMATNVPROC;
pub extern var glad_glVertexAttribI1i: PFNGLVERTEXATTRIBI1IPROC;
pub extern var glad_glVertexAttribI1iEXT: PFNGLVERTEXATTRIBI1IEXTPROC;
pub extern var glad_glVertexAttribI1iv: PFNGLVERTEXATTRIBI1IVPROC;
pub extern var glad_glVertexAttribI1ivEXT: PFNGLVERTEXATTRIBI1IVEXTPROC;
pub extern var glad_glVertexAttribI1ui: PFNGLVERTEXATTRIBI1UIPROC;
pub extern var glad_glVertexAttribI1uiEXT: PFNGLVERTEXATTRIBI1UIEXTPROC;
pub extern var glad_glVertexAttribI1uiv: PFNGLVERTEXATTRIBI1UIVPROC;
pub extern var glad_glVertexAttribI1uivEXT: PFNGLVERTEXATTRIBI1UIVEXTPROC;
pub extern var glad_glVertexAttribI2i: PFNGLVERTEXATTRIBI2IPROC;
pub extern var glad_glVertexAttribI2iEXT: PFNGLVERTEXATTRIBI2IEXTPROC;
pub extern var glad_glVertexAttribI2iv: PFNGLVERTEXATTRIBI2IVPROC;
pub extern var glad_glVertexAttribI2ivEXT: PFNGLVERTEXATTRIBI2IVEXTPROC;
pub extern var glad_glVertexAttribI2ui: PFNGLVERTEXATTRIBI2UIPROC;
pub extern var glad_glVertexAttribI2uiEXT: PFNGLVERTEXATTRIBI2UIEXTPROC;
pub extern var glad_glVertexAttribI2uiv: PFNGLVERTEXATTRIBI2UIVPROC;
pub extern var glad_glVertexAttribI2uivEXT: PFNGLVERTEXATTRIBI2UIVEXTPROC;
pub extern var glad_glVertexAttribI3i: PFNGLVERTEXATTRIBI3IPROC;
pub extern var glad_glVertexAttribI3iEXT: PFNGLVERTEXATTRIBI3IEXTPROC;
pub extern var glad_glVertexAttribI3iv: PFNGLVERTEXATTRIBI3IVPROC;
pub extern var glad_glVertexAttribI3ivEXT: PFNGLVERTEXATTRIBI3IVEXTPROC;
pub extern var glad_glVertexAttribI3ui: PFNGLVERTEXATTRIBI3UIPROC;
pub extern var glad_glVertexAttribI3uiEXT: PFNGLVERTEXATTRIBI3UIEXTPROC;
pub extern var glad_glVertexAttribI3uiv: PFNGLVERTEXATTRIBI3UIVPROC;
pub extern var glad_glVertexAttribI3uivEXT: PFNGLVERTEXATTRIBI3UIVEXTPROC;
pub extern var glad_glVertexAttribI4bv: PFNGLVERTEXATTRIBI4BVPROC;
pub extern var glad_glVertexAttribI4bvEXT: PFNGLVERTEXATTRIBI4BVEXTPROC;
pub extern var glad_glVertexAttribI4i: PFNGLVERTEXATTRIBI4IPROC;
pub extern var glad_glVertexAttribI4iEXT: PFNGLVERTEXATTRIBI4IEXTPROC;
pub extern var glad_glVertexAttribI4iv: PFNGLVERTEXATTRIBI4IVPROC;
pub extern var glad_glVertexAttribI4ivEXT: PFNGLVERTEXATTRIBI4IVEXTPROC;
pub extern var glad_glVertexAttribI4sv: PFNGLVERTEXATTRIBI4SVPROC;
pub extern var glad_glVertexAttribI4svEXT: PFNGLVERTEXATTRIBI4SVEXTPROC;
pub extern var glad_glVertexAttribI4ubv: PFNGLVERTEXATTRIBI4UBVPROC;
pub extern var glad_glVertexAttribI4ubvEXT: PFNGLVERTEXATTRIBI4UBVEXTPROC;
pub extern var glad_glVertexAttribI4ui: PFNGLVERTEXATTRIBI4UIPROC;
pub extern var glad_glVertexAttribI4uiEXT: PFNGLVERTEXATTRIBI4UIEXTPROC;
pub extern var glad_glVertexAttribI4uiv: PFNGLVERTEXATTRIBI4UIVPROC;
pub extern var glad_glVertexAttribI4uivEXT: PFNGLVERTEXATTRIBI4UIVEXTPROC;
pub extern var glad_glVertexAttribI4usv: PFNGLVERTEXATTRIBI4USVPROC;
pub extern var glad_glVertexAttribI4usvEXT: PFNGLVERTEXATTRIBI4USVEXTPROC;
pub extern var glad_glVertexAttribIFormat: PFNGLVERTEXATTRIBIFORMATPROC;
pub extern var glad_glVertexAttribIFormatNV: PFNGLVERTEXATTRIBIFORMATNVPROC;
pub extern var glad_glVertexAttribIPointer: PFNGLVERTEXATTRIBIPOINTERPROC;
pub extern var glad_glVertexAttribIPointerEXT: PFNGLVERTEXATTRIBIPOINTEREXTPROC;
pub extern var glad_glVertexAttribL1d: PFNGLVERTEXATTRIBL1DPROC;
pub extern var glad_glVertexAttribL1dEXT: PFNGLVERTEXATTRIBL1DEXTPROC;
pub extern var glad_glVertexAttribL1dv: PFNGLVERTEXATTRIBL1DVPROC;
pub extern var glad_glVertexAttribL1dvEXT: PFNGLVERTEXATTRIBL1DVEXTPROC;
pub extern var glad_glVertexAttribL1i64NV: PFNGLVERTEXATTRIBL1I64NVPROC;
pub extern var glad_glVertexAttribL1i64vNV: PFNGLVERTEXATTRIBL1I64VNVPROC;
pub extern var glad_glVertexAttribL1ui64ARB: PFNGLVERTEXATTRIBL1UI64ARBPROC;
pub extern var glad_glVertexAttribL1ui64NV: PFNGLVERTEXATTRIBL1UI64NVPROC;
pub extern var glad_glVertexAttribL1ui64vARB: PFNGLVERTEXATTRIBL1UI64VARBPROC;
pub extern var glad_glVertexAttribL1ui64vNV: PFNGLVERTEXATTRIBL1UI64VNVPROC;
pub extern var glad_glVertexAttribL2d: PFNGLVERTEXATTRIBL2DPROC;
pub extern var glad_glVertexAttribL2dEXT: PFNGLVERTEXATTRIBL2DEXTPROC;
pub extern var glad_glVertexAttribL2dv: PFNGLVERTEXATTRIBL2DVPROC;
pub extern var glad_glVertexAttribL2dvEXT: PFNGLVERTEXATTRIBL2DVEXTPROC;
pub extern var glad_glVertexAttribL2i64NV: PFNGLVERTEXATTRIBL2I64NVPROC;
pub extern var glad_glVertexAttribL2i64vNV: PFNGLVERTEXATTRIBL2I64VNVPROC;
pub extern var glad_glVertexAttribL2ui64NV: PFNGLVERTEXATTRIBL2UI64NVPROC;
pub extern var glad_glVertexAttribL2ui64vNV: PFNGLVERTEXATTRIBL2UI64VNVPROC;
pub extern var glad_glVertexAttribL3d: PFNGLVERTEXATTRIBL3DPROC;
pub extern var glad_glVertexAttribL3dEXT: PFNGLVERTEXATTRIBL3DEXTPROC;
pub extern var glad_glVertexAttribL3dv: PFNGLVERTEXATTRIBL3DVPROC;
pub extern var glad_glVertexAttribL3dvEXT: PFNGLVERTEXATTRIBL3DVEXTPROC;
pub extern var glad_glVertexAttribL3i64NV: PFNGLVERTEXATTRIBL3I64NVPROC;
pub extern var glad_glVertexAttribL3i64vNV: PFNGLVERTEXATTRIBL3I64VNVPROC;
pub extern var glad_glVertexAttribL3ui64NV: PFNGLVERTEXATTRIBL3UI64NVPROC;
pub extern var glad_glVertexAttribL3ui64vNV: PFNGLVERTEXATTRIBL3UI64VNVPROC;
pub extern var glad_glVertexAttribL4d: PFNGLVERTEXATTRIBL4DPROC;
pub extern var glad_glVertexAttribL4dEXT: PFNGLVERTEXATTRIBL4DEXTPROC;
pub extern var glad_glVertexAttribL4dv: PFNGLVERTEXATTRIBL4DVPROC;
pub extern var glad_glVertexAttribL4dvEXT: PFNGLVERTEXATTRIBL4DVEXTPROC;
pub extern var glad_glVertexAttribL4i64NV: PFNGLVERTEXATTRIBL4I64NVPROC;
pub extern var glad_glVertexAttribL4i64vNV: PFNGLVERTEXATTRIBL4I64VNVPROC;
pub extern var glad_glVertexAttribL4ui64NV: PFNGLVERTEXATTRIBL4UI64NVPROC;
pub extern var glad_glVertexAttribL4ui64vNV: PFNGLVERTEXATTRIBL4UI64VNVPROC;
pub extern var glad_glVertexAttribLFormat: PFNGLVERTEXATTRIBLFORMATPROC;
pub extern var glad_glVertexAttribLFormatNV: PFNGLVERTEXATTRIBLFORMATNVPROC;
pub extern var glad_glVertexAttribLPointer: PFNGLVERTEXATTRIBLPOINTERPROC;
pub extern var glad_glVertexAttribLPointerEXT: PFNGLVERTEXATTRIBLPOINTEREXTPROC;
pub extern var glad_glVertexAttribP1ui: PFNGLVERTEXATTRIBP1UIPROC;
pub extern var glad_glVertexAttribP1uiv: PFNGLVERTEXATTRIBP1UIVPROC;
pub extern var glad_glVertexAttribP2ui: PFNGLVERTEXATTRIBP2UIPROC;
pub extern var glad_glVertexAttribP2uiv: PFNGLVERTEXATTRIBP2UIVPROC;
pub extern var glad_glVertexAttribP3ui: PFNGLVERTEXATTRIBP3UIPROC;
pub extern var glad_glVertexAttribP3uiv: PFNGLVERTEXATTRIBP3UIVPROC;
pub extern var glad_glVertexAttribP4ui: PFNGLVERTEXATTRIBP4UIPROC;
pub extern var glad_glVertexAttribP4uiv: PFNGLVERTEXATTRIBP4UIVPROC;
pub extern var glad_glVertexAttribParameteriAMD: PFNGLVERTEXATTRIBPARAMETERIAMDPROC;
pub extern var glad_glVertexAttribPointer: PFNGLVERTEXATTRIBPOINTERPROC;
pub extern var glad_glVertexAttribPointerARB: PFNGLVERTEXATTRIBPOINTERARBPROC;
pub extern var glad_glVertexAttribPointerNV: PFNGLVERTEXATTRIBPOINTERNVPROC;
pub extern var glad_glVertexAttribs1dvNV: PFNGLVERTEXATTRIBS1DVNVPROC;
pub extern var glad_glVertexAttribs1fvNV: PFNGLVERTEXATTRIBS1FVNVPROC;
pub extern var glad_glVertexAttribs1hvNV: PFNGLVERTEXATTRIBS1HVNVPROC;
pub extern var glad_glVertexAttribs1svNV: PFNGLVERTEXATTRIBS1SVNVPROC;
pub extern var glad_glVertexAttribs2dvNV: PFNGLVERTEXATTRIBS2DVNVPROC;
pub extern var glad_glVertexAttribs2fvNV: PFNGLVERTEXATTRIBS2FVNVPROC;
pub extern var glad_glVertexAttribs2hvNV: PFNGLVERTEXATTRIBS2HVNVPROC;
pub extern var glad_glVertexAttribs2svNV: PFNGLVERTEXATTRIBS2SVNVPROC;
pub extern var glad_glVertexAttribs3dvNV: PFNGLVERTEXATTRIBS3DVNVPROC;
pub extern var glad_glVertexAttribs3fvNV: PFNGLVERTEXATTRIBS3FVNVPROC;
pub extern var glad_glVertexAttribs3hvNV: PFNGLVERTEXATTRIBS3HVNVPROC;
pub extern var glad_glVertexAttribs3svNV: PFNGLVERTEXATTRIBS3SVNVPROC;
pub extern var glad_glVertexAttribs4dvNV: PFNGLVERTEXATTRIBS4DVNVPROC;
pub extern var glad_glVertexAttribs4fvNV: PFNGLVERTEXATTRIBS4FVNVPROC;
pub extern var glad_glVertexAttribs4hvNV: PFNGLVERTEXATTRIBS4HVNVPROC;
pub extern var glad_glVertexAttribs4svNV: PFNGLVERTEXATTRIBS4SVNVPROC;
pub extern var glad_glVertexAttribs4ubvNV: PFNGLVERTEXATTRIBS4UBVNVPROC;
pub extern var glad_glVertexBindingDivisor: PFNGLVERTEXBINDINGDIVISORPROC;
pub extern var glad_glVertexBlendARB: PFNGLVERTEXBLENDARBPROC;
pub extern var glad_glVertexBlendEnvfATI: PFNGLVERTEXBLENDENVFATIPROC;
pub extern var glad_glVertexBlendEnviATI: PFNGLVERTEXBLENDENVIATIPROC;
pub extern var glad_glVertexFormatNV: PFNGLVERTEXFORMATNVPROC;
pub extern var glad_glVertexPointerEXT: PFNGLVERTEXPOINTEREXTPROC;
pub extern var glad_glVertexPointerListIBM: PFNGLVERTEXPOINTERLISTIBMPROC;
pub extern var glad_glVertexPointervINTEL: PFNGLVERTEXPOINTERVINTELPROC;
pub extern var glad_glVertexStream1dATI: PFNGLVERTEXSTREAM1DATIPROC;
pub extern var glad_glVertexStream1dvATI: PFNGLVERTEXSTREAM1DVATIPROC;
pub extern var glad_glVertexStream1fATI: PFNGLVERTEXSTREAM1FATIPROC;
pub extern var glad_glVertexStream1fvATI: PFNGLVERTEXSTREAM1FVATIPROC;
pub extern var glad_glVertexStream1iATI: PFNGLVERTEXSTREAM1IATIPROC;
pub extern var glad_glVertexStream1ivATI: PFNGLVERTEXSTREAM1IVATIPROC;
pub extern var glad_glVertexStream1sATI: PFNGLVERTEXSTREAM1SATIPROC;
pub extern var glad_glVertexStream1svATI: PFNGLVERTEXSTREAM1SVATIPROC;
pub extern var glad_glVertexStream2dATI: PFNGLVERTEXSTREAM2DATIPROC;
pub extern var glad_glVertexStream2dvATI: PFNGLVERTEXSTREAM2DVATIPROC;
pub extern var glad_glVertexStream2fATI: PFNGLVERTEXSTREAM2FATIPROC;
pub extern var glad_glVertexStream2fvATI: PFNGLVERTEXSTREAM2FVATIPROC;
pub extern var glad_glVertexStream2iATI: PFNGLVERTEXSTREAM2IATIPROC;
pub extern var glad_glVertexStream2ivATI: PFNGLVERTEXSTREAM2IVATIPROC;
pub extern var glad_glVertexStream2sATI: PFNGLVERTEXSTREAM2SATIPROC;
pub extern var glad_glVertexStream2svATI: PFNGLVERTEXSTREAM2SVATIPROC;
pub extern var glad_glVertexStream3dATI: PFNGLVERTEXSTREAM3DATIPROC;
pub extern var glad_glVertexStream3dvATI: PFNGLVERTEXSTREAM3DVATIPROC;
pub extern var glad_glVertexStream3fATI: PFNGLVERTEXSTREAM3FATIPROC;
pub extern var glad_glVertexStream3fvATI: PFNGLVERTEXSTREAM3FVATIPROC;
pub extern var glad_glVertexStream3iATI: PFNGLVERTEXSTREAM3IATIPROC;
pub extern var glad_glVertexStream3ivATI: PFNGLVERTEXSTREAM3IVATIPROC;
pub extern var glad_glVertexStream3sATI: PFNGLVERTEXSTREAM3SATIPROC;
pub extern var glad_glVertexStream3svATI: PFNGLVERTEXSTREAM3SVATIPROC;
pub extern var glad_glVertexStream4dATI: PFNGLVERTEXSTREAM4DATIPROC;
pub extern var glad_glVertexStream4dvATI: PFNGLVERTEXSTREAM4DVATIPROC;
pub extern var glad_glVertexStream4fATI: PFNGLVERTEXSTREAM4FATIPROC;
pub extern var glad_glVertexStream4fvATI: PFNGLVERTEXSTREAM4FVATIPROC;
pub extern var glad_glVertexStream4iATI: PFNGLVERTEXSTREAM4IATIPROC;
pub extern var glad_glVertexStream4ivATI: PFNGLVERTEXSTREAM4IVATIPROC;
pub extern var glad_glVertexStream4sATI: PFNGLVERTEXSTREAM4SATIPROC;
pub extern var glad_glVertexStream4svATI: PFNGLVERTEXSTREAM4SVATIPROC;
pub extern var glad_glVertexWeightPointerEXT: PFNGLVERTEXWEIGHTPOINTEREXTPROC;
pub extern var glad_glVertexWeightfEXT: PFNGLVERTEXWEIGHTFEXTPROC;
pub extern var glad_glVertexWeightfvEXT: PFNGLVERTEXWEIGHTFVEXTPROC;
pub extern var glad_glVertexWeighthNV: PFNGLVERTEXWEIGHTHNVPROC;
pub extern var glad_glVertexWeighthvNV: PFNGLVERTEXWEIGHTHVNVPROC;
pub extern var glad_glVideoCaptureNV: PFNGLVIDEOCAPTURENVPROC;
pub extern var glad_glVideoCaptureStreamParameterdvNV: PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC;
pub extern var glad_glVideoCaptureStreamParameterfvNV: PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC;
pub extern var glad_glVideoCaptureStreamParameterivNV: PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC;
pub extern var glad_glViewport: PFNGLVIEWPORTPROC;
pub extern var glad_glViewportArrayv: PFNGLVIEWPORTARRAYVPROC;
pub extern var glad_glViewportIndexedf: PFNGLVIEWPORTINDEXEDFPROC;
pub extern var glad_glViewportIndexedfv: PFNGLVIEWPORTINDEXEDFVPROC;
pub extern var glad_glViewportPositionWScaleNV: PFNGLVIEWPORTPOSITIONWSCALENVPROC;
pub extern var glad_glViewportSwizzleNV: PFNGLVIEWPORTSWIZZLENVPROC;
pub extern var glad_glWaitSemaphoreEXT: PFNGLWAITSEMAPHOREEXTPROC;
pub extern var glad_glWaitSemaphoreui64NVX: PFNGLWAITSEMAPHOREUI64NVXPROC;
pub extern var glad_glWaitSync: PFNGLWAITSYNCPROC;
pub extern var glad_glWaitVkSemaphoreNV: PFNGLWAITVKSEMAPHORENVPROC;
pub extern var glad_glWeightPathsNV: PFNGLWEIGHTPATHSNVPROC;
pub extern var glad_glWeightPointerARB: PFNGLWEIGHTPOINTERARBPROC;
pub extern var glad_glWeightbvARB: PFNGLWEIGHTBVARBPROC;
pub extern var glad_glWeightdvARB: PFNGLWEIGHTDVARBPROC;
pub extern var glad_glWeightfvARB: PFNGLWEIGHTFVARBPROC;
pub extern var glad_glWeightivARB: PFNGLWEIGHTIVARBPROC;
pub extern var glad_glWeightsvARB: PFNGLWEIGHTSVARBPROC;
pub extern var glad_glWeightubvARB: PFNGLWEIGHTUBVARBPROC;
pub extern var glad_glWeightuivARB: PFNGLWEIGHTUIVARBPROC;
pub extern var glad_glWeightusvARB: PFNGLWEIGHTUSVARBPROC;
pub extern var glad_glWindowPos2dARB: PFNGLWINDOWPOS2DARBPROC;
pub extern var glad_glWindowPos2dMESA: PFNGLWINDOWPOS2DMESAPROC;
pub extern var glad_glWindowPos2dvARB: PFNGLWINDOWPOS2DVARBPROC;
pub extern var glad_glWindowPos2dvMESA: PFNGLWINDOWPOS2DVMESAPROC;
pub extern var glad_glWindowPos2fARB: PFNGLWINDOWPOS2FARBPROC;
pub extern var glad_glWindowPos2fMESA: PFNGLWINDOWPOS2FMESAPROC;
pub extern var glad_glWindowPos2fvARB: PFNGLWINDOWPOS2FVARBPROC;
pub extern var glad_glWindowPos2fvMESA: PFNGLWINDOWPOS2FVMESAPROC;
pub extern var glad_glWindowPos2iARB: PFNGLWINDOWPOS2IARBPROC;
pub extern var glad_glWindowPos2iMESA: PFNGLWINDOWPOS2IMESAPROC;
pub extern var glad_glWindowPos2ivARB: PFNGLWINDOWPOS2IVARBPROC;
pub extern var glad_glWindowPos2ivMESA: PFNGLWINDOWPOS2IVMESAPROC;
pub extern var glad_glWindowPos2sARB: PFNGLWINDOWPOS2SARBPROC;
pub extern var glad_glWindowPos2sMESA: PFNGLWINDOWPOS2SMESAPROC;
pub extern var glad_glWindowPos2svARB: PFNGLWINDOWPOS2SVARBPROC;
pub extern var glad_glWindowPos2svMESA: PFNGLWINDOWPOS2SVMESAPROC;
pub extern var glad_glWindowPos3dARB: PFNGLWINDOWPOS3DARBPROC;
pub extern var glad_glWindowPos3dMESA: PFNGLWINDOWPOS3DMESAPROC;
pub extern var glad_glWindowPos3dvARB: PFNGLWINDOWPOS3DVARBPROC;
pub extern var glad_glWindowPos3dvMESA: PFNGLWINDOWPOS3DVMESAPROC;
pub extern var glad_glWindowPos3fARB: PFNGLWINDOWPOS3FARBPROC;
pub extern var glad_glWindowPos3fMESA: PFNGLWINDOWPOS3FMESAPROC;
pub extern var glad_glWindowPos3fvARB: PFNGLWINDOWPOS3FVARBPROC;
pub extern var glad_glWindowPos3fvMESA: PFNGLWINDOWPOS3FVMESAPROC;
pub extern var glad_glWindowPos3iARB: PFNGLWINDOWPOS3IARBPROC;
pub extern var glad_glWindowPos3iMESA: PFNGLWINDOWPOS3IMESAPROC;
pub extern var glad_glWindowPos3ivARB: PFNGLWINDOWPOS3IVARBPROC;
pub extern var glad_glWindowPos3ivMESA: PFNGLWINDOWPOS3IVMESAPROC;
pub extern var glad_glWindowPos3sARB: PFNGLWINDOWPOS3SARBPROC;
pub extern var glad_glWindowPos3sMESA: PFNGLWINDOWPOS3SMESAPROC;
pub extern var glad_glWindowPos3svARB: PFNGLWINDOWPOS3SVARBPROC;
pub extern var glad_glWindowPos3svMESA: PFNGLWINDOWPOS3SVMESAPROC;
pub extern var glad_glWindowPos4dMESA: PFNGLWINDOWPOS4DMESAPROC;
pub extern var glad_glWindowPos4dvMESA: PFNGLWINDOWPOS4DVMESAPROC;
pub extern var glad_glWindowPos4fMESA: PFNGLWINDOWPOS4FMESAPROC;
pub extern var glad_glWindowPos4fvMESA: PFNGLWINDOWPOS4FVMESAPROC;
pub extern var glad_glWindowPos4iMESA: PFNGLWINDOWPOS4IMESAPROC;
pub extern var glad_glWindowPos4ivMESA: PFNGLWINDOWPOS4IVMESAPROC;
pub extern var glad_glWindowPos4sMESA: PFNGLWINDOWPOS4SMESAPROC;
pub extern var glad_glWindowPos4svMESA: PFNGLWINDOWPOS4SVMESAPROC;
pub extern var glad_glWindowRectanglesEXT: PFNGLWINDOWRECTANGLESEXTPROC;
pub extern var glad_glWriteMaskEXT: PFNGLWRITEMASKEXTPROC;
pub extern fn gladLoadGLUserPtr(load: GLADuserptrloadfunc, userptr: ?*anyopaque) c_int;
pub extern fn gladLoadGL(load: GLADloadfunc) c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(16),
};
pub const GLFWglproc = ?*const fn () callconv(.C) void;
pub const GLFWvkproc = ?*const fn () callconv(.C) void;
pub const struct_GLFWmonitor = opaque {};
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = opaque {};
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = opaque {};
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWerrorfun = ?*const fn (c_int, [*c]const u8) callconv(.C) void;
pub const GLFWwindowposfun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowsizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowclosefun = ?*const fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowrefreshfun = ?*const fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowfocusfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowiconifyfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowmaximizefun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWframebuffersizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowcontentscalefun = ?*const fn (?*GLFWwindow, f32, f32) callconv(.C) void;
pub const GLFWmousebuttonfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcursorposfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWcursorenterfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWscrollfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWkeyfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcharfun = ?*const fn (?*GLFWwindow, c_uint) callconv(.C) void;
pub const GLFWcharmodsfun = ?*const fn (?*GLFWwindow, c_uint, c_int) callconv(.C) void;
pub const GLFWdropfun = ?*const fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.C) void;
pub const GLFWmonitorfun = ?*const fn (?*GLFWmonitor, c_int) callconv(.C) void;
pub const GLFWjoystickfun = ?*const fn (c_int, c_int) callconv(.C) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int,
    height: c_int,
    redBits: c_int,
    greenBits: c_int,
    blueBits: c_int,
    refreshRate: c_int,
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort,
    green: [*c]c_ushort,
    blue: [*c]c_ushort,
    size: c_uint,
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int,
    height: c_int,
    pixels: [*c]u8,
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8,
    axes: [6]f32,
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*anyopaque) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*anyopaque;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*anyopaque) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*anyopaque;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*anyopaque) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*anyopaque;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):80:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):86:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):109:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):113:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):119:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):122:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):184:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):206:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):214:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):341:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):342:9
pub const __declspec = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):402:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):403:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):404:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):405:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):406:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):407:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):408:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):409:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):410:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):411:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):412:9
pub const GLAD_GNUC_EXTENSION = @compileError("unable to translate macro: undefined identifier `__extension__`"); // C:\Users\inspe\Documents\Code\boat3d\zig\src\lib\glad\include/glad/gl.h:113:11
pub const GLAD_API_CALL = @compileError("unable to translate C expr: unexpected token 'extern'"); // C:\Users\inspe\Documents\Code\boat3d\zig\src\lib\glad\include/glad/gl.h:142:13
pub const KHRONOS_APICALL = @compileError("unable to translate macro: undefined identifier `dllimport`"); // C:\Users\inspe\Documents\Code\boat3d\zig\src\lib\glad\include/KHR/khrplatform.h:107:12
pub const __STRINGIFY = @compileError("unable to translate C expr: unexpected token '#'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:10:9
pub const __MINGW64_VERSION_STR = @compileError("unable to translate C expr: unexpected token 'StringLiteral'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:26:9
pub const __MINGW_IMP_SYMBOL = @compileError("unable to translate macro: undefined identifier `__imp_`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:119:11
pub const __MINGW_IMP_LSYMBOL = @compileError("unable to translate macro: undefined identifier `__imp_`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:120:11
pub const __MINGW_LSYMBOL = @compileError("unable to translate C expr: unexpected token '##'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:122:11
pub const __MINGW_ASM_CALL = @compileError("unable to translate macro: undefined identifier `__asm__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:130:9
pub const __MINGW_ASM_CRT_CALL = @compileError("unable to translate macro: undefined identifier `__asm__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:131:9
pub const __MINGW_EXTENSION = @compileError("unable to translate macro: undefined identifier `__extension__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:163:13
pub const __MINGW_POISON_NAME = @compileError("unable to translate macro: undefined identifier `_layout_has_not_been_verified_and_its_declaration_is_most_likely_incorrect`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:203:11
pub const __MINGW_ATTRIB_DEPRECATED_STR = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:247:11
pub const __MINGW_MS_PRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:270:9
pub const __MINGW_MS_SCANF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:273:9
pub const __MINGW_GNU_PRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:276:9
pub const __MINGW_GNU_SCANF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:279:9
pub const __mingw_ovr = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:289:11
pub const __MINGW_SELECTANY = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_mac.h:304:9
pub const __MINGW_CRT_NAME_CONCAT2 = @compileError("unable to translate macro: undefined identifier `_s`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_secapi.h:41:9
pub const __CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY_0_3_ = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw_secapi.h:69:9
pub const __MINGW_IMPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:51:12
pub const _CRTIMP = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:59:15
pub const _inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:81:9
pub const __CRT_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:90:11
pub const __MINGW_INTRIN_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:97:9
pub const __UNUSED_PARAM = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:111:11
pub const __restrict_arr = @compileError("unable to translate macro: undefined identifier `__restrict`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:126:10
pub const __MINGW_ATTRIB_NORETURN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:142:9
pub const __MINGW_ATTRIB_CONST = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:143:9
pub const __MINGW_ATTRIB_MALLOC = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:153:9
pub const __MINGW_ATTRIB_PURE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:154:9
pub const __MINGW_ATTRIB_NONNULL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:167:9
pub const __MINGW_ATTRIB_UNUSED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:173:9
pub const __MINGW_ATTRIB_USED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:179:9
pub const __MINGW_ATTRIB_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:180:9
pub const __MINGW_ATTRIB_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:182:9
pub const __MINGW_NOTHROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:197:9
pub const __MINGW_PRAGMA_PARAM = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:215:9
pub const __MINGW_BROKEN_INTERFACE = @compileError("unable to translate macro: undefined identifier `message`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:218:9
pub const __forceinline = @compileError("unable to translate macro: undefined identifier `__inline__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:273:9
pub const _crt_va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/vadefs.h:48:9
pub const _crt_va_arg = @compileError("unable to translate macro: undefined identifier `__builtin_va_arg`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/vadefs.h:49:9
pub const _crt_va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/vadefs.h:50:9
pub const _crt_va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/vadefs.h:51:9
pub const __CRT_STRINGIZE = @compileError("unable to translate C expr: unexpected token '#'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:292:9
pub const __CRT_WIDE = @compileError("unable to translate macro: undefined identifier `L`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:297:9
pub const _CRT_DEPRECATE_TEXT = @compileError("unable to translate macro: undefined identifier `deprecated`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:356:9
pub const _CRT_INSECURE_DEPRECATE_MEMORY = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:359:9
pub const _CRT_INSECURE_DEPRECATE_GLOBALS = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:363:9
pub const _CRT_OBSOLETE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:371:9
pub const _CRT_ALIGN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:398:9
pub const _CRT_glob = @compileError("unable to translate macro: undefined identifier `_dowildcard`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:462:9
pub const _UNION_NAME = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:482:9
pub const _STRUCT_NAME = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:483:9
pub const __CRT_UUID_DECL = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/_mingw.h:570:9
pub const _CRT_SECURE_CPP_NOTHROW = @compileError("unable to translate macro: undefined identifier `throw`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:143:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:262:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:263:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:264:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:265:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:266:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:267:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:268:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:269:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_2_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:270:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:271:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:272:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_SPLITPATH = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:273:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0 = @compileError("unable to translate macro: undefined identifier `__func_name`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:277:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1 = @compileError("unable to translate macro: undefined identifier `__func_name`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:279:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2 = @compileError("unable to translate macro: undefined identifier `__func_name`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:281:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3 = @compileError("unable to translate macro: undefined identifier `__func_name`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:283:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4 = @compileError("unable to translate macro: undefined identifier `__func_name`"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:285:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:422:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:423:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:424:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:425:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:426:9
pub const __crt_typefix = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Zig\lib\libc\include\any-windows-any/corecrt.h:486:9
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // C:\Program Files\Zig\lib\include/stddef.h:104:9
pub const WINGDIAPI = @compileError("unable to translate macro: undefined identifier `dllimport`"); // C:\Users\inspe\Documents\Code\boat3d\zig\src\lib\glfw\include/GLFW/glfw3.h:133:10
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 15);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "15.0.7 (https://github.com/ziglang/zig-bootstrap 4c1ac055bf1eaaee0253af3f256fe6ee56cdbb28)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 15.0.7 (https://github.com/ziglang/zig-bootstrap 4c1ac055bf1eaaee0253af3f256fe6ee56cdbb28)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __OPTIMIZE__ = @as(c_int, 1);
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __k8 = @as(c_int, 1);
pub const __k8__ = @as(c_int, 1);
pub const __tune_k8__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __SGX__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const NDEBUG = @as(c_int, 1);
pub const GLAD_GL_H_ = "";
pub const __gl_h_ = @as(c_int, 1);
pub const __gl3_h_ = @as(c_int, 1);
pub const __glext_h_ = @as(c_int, 1);
pub const __gl3ext_h_ = @as(c_int, 1);
pub const GLAD_GL = "";
pub const GLAD_PLATFORM_H_ = "";
pub const GLAD_PLATFORM_WIN32 = @as(c_int, 1);
pub const GLAD_PLATFORM_APPLE = @as(c_int, 0);
pub const GLAD_PLATFORM_EMSCRIPTEN = @as(c_int, 0);
pub const GLAD_PLATFORM_UWP = @as(c_int, 0);
pub const GLAD_UNUSED = @import("std").zig.c_translation.Macros.DISCARD;
pub const GLAD_API_PTR = __stdcall;
pub const GLAPI = GLAD_API_CALL;
pub const GLAPIENTRY = GLAD_API_PTR;
pub inline fn GLAD_MAKE_VERSION(major: anytype, minor: anytype) @TypeOf((major * @as(c_int, 10000)) + minor) {
    return (major * @as(c_int, 10000)) + minor;
}
pub inline fn GLAD_VERSION_MAJOR(version: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(version, @as(c_int, 10000))) {
    return @import("std").zig.c_translation.MacroArithmetic.div(version, @as(c_int, 10000));
}
pub inline fn GLAD_VERSION_MINOR(version: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.rem(version, @as(c_int, 10000))) {
    return @import("std").zig.c_translation.MacroArithmetic.rem(version, @as(c_int, 10000));
}
pub const GLAD_GENERATOR_VERSION = "2.0.4";
pub const GL_1PASS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hexadecimal);
pub const GL_1PASS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hexadecimal);
pub const GL_2PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hexadecimal);
pub const GL_2PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hexadecimal);
pub const GL_2PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hexadecimal);
pub const GL_2PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hexadecimal);
pub const GL_2X_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_422_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CE, .hexadecimal);
pub const GL_422_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CC, .hexadecimal);
pub const GL_422_REV_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CF, .hexadecimal);
pub const GL_422_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CD, .hexadecimal);
pub const GL_4PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hexadecimal);
pub const GL_4PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hexadecimal);
pub const GL_4PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hexadecimal);
pub const GL_4PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hexadecimal);
pub const GL_4PASS_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hexadecimal);
pub const GL_4PASS_2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hexadecimal);
pub const GL_4PASS_3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hexadecimal);
pub const GL_4PASS_3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hexadecimal);
pub const GL_4X_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_8X_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_ABGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const GL_ACCUM_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AD, .hexadecimal);
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D9, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const GL_ACTIVE_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hexadecimal);
pub const GL_ACTIVE_PROGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const GL_ACTIVE_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F5, .hexadecimal);
pub const GL_ACTIVE_STENCIL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8911, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE5, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E48, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE6, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E47, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E49, .hexadecimal);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A36, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A35, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9305, .hexadecimal);
pub const GL_ACTIVE_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C81, .hexadecimal);
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C82, .hexadecimal);
pub const GL_ACTIVE_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A5, .hexadecimal);
pub const GL_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8963, .hexadecimal);
pub const GL_ADD_SIGNED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_ADD_SIGNED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AE, .hexadecimal);
pub const GL_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9092, .hexadecimal);
pub const GL_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9094, .hexadecimal);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hexadecimal);
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A210, .hexadecimal);
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A211, .hexadecimal);
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20E, .hexadecimal);
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20F, .hexadecimal);
pub const GL_ALL_BARRIER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_BARRIER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_COMPLETED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F2, .hexadecimal);
pub const GL_ALL_PIXELS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_SHADER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_STATIC_DATA_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103060, .decimal);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const GL_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8A, .hexadecimal);
pub const GL_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D78, .hexadecimal);
pub const GL_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const GL_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9018, .hexadecimal);
pub const GL_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D84, .hexadecimal);
pub const GL_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D72, .hexadecimal);
pub const GL_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const GL_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D90, .hexadecimal);
pub const GL_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7E, .hexadecimal);
pub const GL_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9014, .hexadecimal);
pub const GL_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hexadecimal);
pub const GL_ALPHA_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8567, .hexadecimal);
pub const GL_ALPHA_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8321, .hexadecimal);
pub const GL_ALPHA_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8563, .hexadecimal);
pub const GL_ALPHA_MIN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8320, .hexadecimal);
pub const GL_ALPHA_REF_COMMAND_NV = @as(c_int, 0x000F);
pub const GL_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9010, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934D, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934F, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934E, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BF, .hexadecimal);
pub const GL_ALREADY_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hexadecimal);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_ALWAYS_FAST_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20C, .hexadecimal);
pub const GL_ALWAYS_SOFT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20D, .hexadecimal);
pub const GL_AND = @as(c_int, 0x1501);
pub const GL_AND_INVERTED = @as(c_int, 0x1504);
pub const GL_AND_REVERSE = @as(c_int, 0x1502);
pub const GL_ANY_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hexadecimal);
pub const GL_ARC_TO_NV = @as(c_int, 0xFE);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A9, .hexadecimal);
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A8, .hexadecimal);
pub const GL_ARRAY_OBJECT_BUFFER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8766, .hexadecimal);
pub const GL_ARRAY_OBJECT_OFFSET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8767, .hexadecimal);
pub const GL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FB, .hexadecimal);
pub const GL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FE, .hexadecimal);
pub const GL_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835D, .hexadecimal);
pub const GL_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832C, .hexadecimal);
pub const GL_ASYNC_MARKER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8329, .hexadecimal);
pub const GL_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835E, .hexadecimal);
pub const GL_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835C, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = @as(c_int, 0x00001000);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = @as(c_int, 0x00001000);
pub const GL_ATOMIC_COUNTER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C0, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C5, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C6, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C1, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C4, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9301, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90ED, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CB, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CA, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959E, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959F, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C8, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C9, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C7, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C3, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C2, .hexadecimal);
pub const GL_ATTACHED_MEMORY_OBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A4, .hexadecimal);
pub const GL_ATTACHED_MEMORY_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A5, .hexadecimal);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834D, .hexadecimal);
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = @as(c_int, 0x0009);
pub const GL_ATTRIB_ARRAY_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_ATTRIB_ARRAY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_ATTRIB_ARRAY_STRIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_ATTRIB_ARRAY_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_AUTO_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8295, .hexadecimal);
pub const GL_AUX_DEPTH_STENCIL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A14, .hexadecimal);
pub const GL_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8335, .hexadecimal);
pub const GL_AVERAGE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8160, .hexadecimal);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_BACK_LEFT = @as(c_int, 0x0402);
pub const GL_BACK_NORMALS_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A223, .hexadecimal);
pub const GL_BACK_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C77, .hexadecimal);
pub const GL_BACK_RIGHT = @as(c_int, 0x0403);
pub const GL_BACK_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C78, .hexadecimal);
pub const GL_BEVEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A6, .hexadecimal);
pub const GL_BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GL_BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_BGRA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A1, .hexadecimal);
pub const GL_BGRA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_BGRA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const GL_BGRA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const GL_BGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GL_BGR_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const GL_BGR_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const GL_BIAS_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8541, .hexadecimal);
pub const GL_BINORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843A, .hexadecimal);
pub const GL_BINORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8443, .hexadecimal);
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8441, .hexadecimal);
pub const GL_BINORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8440, .hexadecimal);
pub const GL_BLACKHOLE_RENDER_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FC, .hexadecimal);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_BLEND_ADVANCED_COHERENT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hexadecimal);
pub const GL_BLEND_ADVANCED_COHERENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hexadecimal);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const GL_BLEND_COLOR_COMMAND_NV = @as(c_int, 0x000B);
pub const GL_BLEND_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const GL_BLEND_DST = @as(c_int, 0x0BE0);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_DST_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_DST_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_BLEND_EQUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_OVERLAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9281, .hexadecimal);
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9280, .hexadecimal);
pub const GL_BLEND_SRC = @as(c_int, 0x0BE1);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_SRC_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FD, .hexadecimal);
pub const GL_BLUE = @as(c_int, 0x1905);
pub const GL_BLUE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BLUE_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const GL_BLUE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const GL_BLUE_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8566, .hexadecimal);
pub const GL_BLUE_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8562, .hexadecimal);
pub const GL_BLUE_NV = @as(c_int, 0x1905);
pub const GL_BOLD_BIT_NV = @as(c_int, 0x01);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_BOOL_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908D, .hexadecimal);
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909C, .hexadecimal);
pub const GL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hexadecimal);
pub const GL_BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_ACCESS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_ACCESS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911F, .hexadecimal);
pub const GL_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9302, .hexadecimal);
pub const GL_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9303, .hexadecimal);
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A13, .hexadecimal);
pub const GL_BUFFER_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1D, .hexadecimal);
pub const GL_BUFFER_IMMUTABLE_STORAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hexadecimal);
pub const GL_BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAPPED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAP_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hexadecimal);
pub const GL_BUFFER_MAP_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9121, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_BUFFER_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B3, .hexadecimal);
pub const GL_BUFFER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hexadecimal);
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A12, .hexadecimal);
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_STORAGE_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hexadecimal);
pub const GL_BUFFER_UPDATE_BARRIER_BIT = @as(c_int, 0x00000200);
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000200);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_BUFFER_USAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_BUFFER_VARIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E5, .hexadecimal);
pub const GL_BUMP_ENVMAP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877B, .hexadecimal);
pub const GL_BUMP_NUM_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8777, .hexadecimal);
pub const GL_BUMP_ROT_MATRIX_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8775, .hexadecimal);
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8776, .hexadecimal);
pub const GL_BUMP_TARGET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877C, .hexadecimal);
pub const GL_BUMP_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8778, .hexadecimal);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8183, .hexadecimal);
pub const GL_CAVEAT_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B8, .hexadecimal);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_CIRCULAR_CCW_ARC_TO_NV = @as(c_int, 0xF8);
pub const GL_CIRCULAR_CW_ARC_TO_NV = @as(c_int, 0xFA);
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = @as(c_int, 0xFC);
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hexadecimal);
pub const GL_CLAMP_READ_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const GL_CLAMP_READ_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const GL_CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GL_CLAMP_TO_EDGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GL_CLAMP_VERTEX_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hexadecimal);
pub const GL_CLEAR = @as(c_int, 0x1500);
pub const GL_CLEAR_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B4, .hexadecimal);
pub const GL_CLEAR_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9365, .hexadecimal);
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = @as(c_int, 0x00004000);
pub const GL_CLIENT_STORAGE_BIT = @as(c_int, 0x0200);
pub const GL_CLIPPING_INPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const GL_CLIP_DEPTH_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hexadecimal);
pub const GL_CLIP_DISTANCE0 = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1 = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2 = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3 = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4 = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5 = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6 = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7 = @as(c_int, 0x3007);
pub const GL_CLIP_DISTANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7A, .hexadecimal);
pub const GL_CLIP_FAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A221, .hexadecimal);
pub const GL_CLIP_NEAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A220, .hexadecimal);
pub const GL_CLIP_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hexadecimal);
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80F0, .hexadecimal);
pub const GL_CLOSE_PATH_NV = @as(c_int, 0x00);
pub const GL_CMYKA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800D, .hexadecimal);
pub const GL_CMYK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800C, .hexadecimal);
pub const GL_CND0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896B, .hexadecimal);
pub const GL_CND_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896A, .hexadecimal);
pub const GL_COLOR = @as(c_int, 0x1800);
pub const GL_COLOR3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_COLOR4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_COLORBURN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_COLORBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_COLORDODGE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLORDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLOR_ALPHA_PAIRING_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8975, .hexadecimal);
pub const GL_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F23, .hexadecimal);
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const GL_COLOR_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8084, .hexadecimal);
pub const GL_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const GL_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2D, .hexadecimal);
pub const GL_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103072, .decimal);
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103082, .decimal);
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F7, .hexadecimal);
pub const GL_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const GL_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const GL_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const GL_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFD, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8835, .hexadecimal);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8283, .hexadecimal);
pub const GL_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8296, .hexadecimal);
pub const GL_COLOR_FLOAT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0F, .hexadecimal);
pub const GL_COLOR_INDEX12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E6, .hexadecimal);
pub const GL_COLOR_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E7, .hexadecimal);
pub const GL_COLOR_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E2, .hexadecimal);
pub const GL_COLOR_INDEX2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E3, .hexadecimal);
pub const GL_COLOR_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E4, .hexadecimal);
pub const GL_COLOR_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E5, .hexadecimal);
pub const GL_COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const GL_COLOR_MATRIX_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hexadecimal);
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hexadecimal);
pub const GL_COLOR_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8286, .hexadecimal);
pub const GL_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E20, .hexadecimal);
pub const GL_COLOR_SUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_COLOR_SUM_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854F, .hexadecimal);
pub const GL_COLOR_SUM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_FORMAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hexadecimal);
pub const GL_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_COMBINE4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8503, .hexadecimal);
pub const GL_COMBINER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8550, .hexadecimal);
pub const GL_COMBINER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8551, .hexadecimal);
pub const GL_COMBINER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8552, .hexadecimal);
pub const GL_COMBINER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8553, .hexadecimal);
pub const GL_COMBINER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8554, .hexadecimal);
pub const GL_COMBINER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8555, .hexadecimal);
pub const GL_COMBINER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8556, .hexadecimal);
pub const GL_COMBINER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8557, .hexadecimal);
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8545, .hexadecimal);
pub const GL_COMBINER_AB_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854A, .hexadecimal);
pub const GL_COMBINER_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8549, .hexadecimal);
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8546, .hexadecimal);
pub const GL_COMBINER_CD_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854B, .hexadecimal);
pub const GL_COMBINER_COMPONENT_USAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8544, .hexadecimal);
pub const GL_COMBINER_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8542, .hexadecimal);
pub const GL_COMBINER_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8543, .hexadecimal);
pub const GL_COMBINER_MUX_SUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8547, .hexadecimal);
pub const GL_COMBINER_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8548, .hexadecimal);
pub const GL_COMBINER_SUM_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854C, .hexadecimal);
pub const GL_COMBINE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_COMBINE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_COMBINE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMMAND_BARRIER_BIT = @as(c_int, 0x00000040);
pub const GL_COMMAND_BARRIER_BIT_EXT = @as(c_int, 0x00000040);
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPARE_REF_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPARE_R_TO_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4B, .hexadecimal);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_COMPLETION_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hexadecimal);
pub const GL_COMPLETION_STATUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hexadecimal);
pub const GL_COMPRESSED_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const GL_COMPRESSED_INTENSITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hexadecimal);
pub const GL_COMPRESSED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hexadecimal);
pub const GL_COMPRESSED_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8225, .hexadecimal);
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const GL_COMPRESSED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const GL_COMPRESSED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const GL_COMPRESSED_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8226, .hexadecimal);
pub const GL_COMPRESSED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hexadecimal);
pub const GL_COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hexadecimal);
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hexadecimal);
pub const GL_COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hexadecimal);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hexadecimal);
pub const GL_COMPRESSED_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GL_COMPRESSED_RGB_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B0, .hexadecimal);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hexadecimal);
pub const GL_COMPRESSED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const GL_COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hexadecimal);
pub const GL_COMPRESSED_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const GL_COMPUTE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FB, .hexadecimal);
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FC, .hexadecimal);
pub const GL_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B9, .hexadecimal);
pub const GL_COMPUTE_SHADER_BIT = @as(c_int, 0x00000020);
pub const GL_COMPUTE_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const GL_COMPUTE_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92ED, .hexadecimal);
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F3, .hexadecimal);
pub const GL_COMPUTE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A0, .hexadecimal);
pub const GL_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8267, .hexadecimal);
pub const GL_COMP_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_CONDITION_SATISFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hexadecimal);
pub const GL_CONFORMANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9374, .hexadecimal);
pub const GL_CONIC_CURVE_TO_NV = @as(c_int, 0x1A);
pub const GL_CONJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9284, .hexadecimal);
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FE, .hexadecimal);
pub const GL_CONSERVATIVE_RASTERIZATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9346, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937B, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9379, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937A, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954D, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954E, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9550, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954F, .hexadecimal);
pub const GL_CONSERVE_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1FD, .hexadecimal);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_CONSTANT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_CONSTANT_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hexadecimal);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_CONSTANT_COLOR0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852A, .hexadecimal);
pub const GL_CONSTANT_COLOR1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852B, .hexadecimal);
pub const GL_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_CONST_EYE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E5, .hexadecimal);
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = @as(c_int, 0x00000002);
pub const GL_CONTEXT_CORE_PROFILE_BIT = @as(c_int, 0x00000001);
pub const GL_CONTEXT_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821E, .hexadecimal);
pub const GL_CONTEXT_FLAG_DEBUG_BIT = @as(c_int, 0x00000002);
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = @as(c_int, 0x00000001);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = @as(c_int, 0x00000008);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = @as(c_int, 0x00000004);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = @as(c_int, 0x00000004);
pub const GL_CONTEXT_LOST = @as(c_int, 0x0507);
pub const GL_CONTEXT_PROFILE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9126, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hexadecimal);
pub const GL_CONTEXT_ROBUST_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hexadecimal);
pub const GL_CONTINUOUS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9007, .hexadecimal);
pub const GL_CONTRAST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A1, .hexadecimal);
pub const GL_CONVEX_HULL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908B, .hexadecimal);
pub const GL_CONVOLUTION_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const GL_CONVOLUTION_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_COLOR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hexadecimal);
pub const GL_CONVOLUTION_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hexadecimal);
pub const GL_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hexadecimal);
pub const GL_CONVOLUTION_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8316, .hexadecimal);
pub const GL_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hexadecimal);
pub const GL_CON_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8941, .hexadecimal);
pub const GL_CON_10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894B, .hexadecimal);
pub const GL_CON_11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894C, .hexadecimal);
pub const GL_CON_12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894D, .hexadecimal);
pub const GL_CON_13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894E, .hexadecimal);
pub const GL_CON_14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894F, .hexadecimal);
pub const GL_CON_15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8950, .hexadecimal);
pub const GL_CON_16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8951, .hexadecimal);
pub const GL_CON_17_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8952, .hexadecimal);
pub const GL_CON_18_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8953, .hexadecimal);
pub const GL_CON_19_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8954, .hexadecimal);
pub const GL_CON_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8942, .hexadecimal);
pub const GL_CON_20_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8955, .hexadecimal);
pub const GL_CON_21_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8956, .hexadecimal);
pub const GL_CON_22_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8957, .hexadecimal);
pub const GL_CON_23_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8958, .hexadecimal);
pub const GL_CON_24_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8959, .hexadecimal);
pub const GL_CON_25_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895A, .hexadecimal);
pub const GL_CON_26_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895B, .hexadecimal);
pub const GL_CON_27_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895C, .hexadecimal);
pub const GL_CON_28_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895D, .hexadecimal);
pub const GL_CON_29_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895E, .hexadecimal);
pub const GL_CON_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8943, .hexadecimal);
pub const GL_CON_30_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895F, .hexadecimal);
pub const GL_CON_31_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8960, .hexadecimal);
pub const GL_CON_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8944, .hexadecimal);
pub const GL_CON_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8945, .hexadecimal);
pub const GL_CON_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8946, .hexadecimal);
pub const GL_CON_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8947, .hexadecimal);
pub const GL_CON_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8948, .hexadecimal);
pub const GL_CON_8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8949, .hexadecimal);
pub const GL_CON_9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894A, .hexadecimal);
pub const GL_COORD_REPLACE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_COORD_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_COPY = @as(c_int, 0x1503);
pub const GL_COPY_INVERTED = @as(c_int, 0x150C);
pub const GL_COPY_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_READ_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const GL_COUNTER_RANGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC1, .hexadecimal);
pub const GL_COUNTER_TYPE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC0, .hexadecimal);
pub const GL_COUNT_DOWN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9089, .hexadecimal);
pub const GL_COUNT_UP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9088, .hexadecimal);
pub const GL_COVERAGE_MODULATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9332, .hexadecimal);
pub const GL_COVERAGE_MODULATION_TABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9331, .hexadecimal);
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9333, .hexadecimal);
pub const GL_CUBIC_CURVE_TO_NV = @as(c_int, 0x0C);
pub const GL_CUBIC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8334, .hexadecimal);
pub const GL_CUBIC_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815F, .hexadecimal);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_CULL_FRAGMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E7, .hexadecimal);
pub const GL_CULL_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E0, .hexadecimal);
pub const GL_CULL_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AA, .hexadecimal);
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AB, .hexadecimal);
pub const GL_CULL_VERTEX_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103050, .decimal);
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AC, .hexadecimal);
pub const GL_CURRENT_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_CURRENT_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843C, .hexadecimal);
pub const GL_CURRENT_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hexadecimal);
pub const GL_CURRENT_MATRIX_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8845, .hexadecimal);
pub const GL_CURRENT_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hexadecimal);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hexadecimal);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hexadecimal);
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_CURRENT_PALETTE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hexadecimal);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const GL_CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_CURRENT_QUERY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_CURRENT_RASTER_NORMAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8406, .hexadecimal);
pub const GL_CURRENT_SECONDARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const GL_CURRENT_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843B, .hexadecimal);
pub const GL_CURRENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_CURRENT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E2, .hexadecimal);
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850B, .hexadecimal);
pub const GL_CURRENT_WEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A8, .hexadecimal);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_D3D12_FENCE_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hexadecimal);
pub const GL_DARKEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_DARKEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_DATA_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9149, .hexadecimal);
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914F, .hexadecimal);
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914B, .hexadecimal);
pub const GL_DEBUG_CATEGORY_OTHER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9150, .hexadecimal);
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914D, .hexadecimal);
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914E, .hexadecimal);
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914C, .hexadecimal);
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914A, .hexadecimal);
pub const GL_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hexadecimal);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hexadecimal);
pub const GL_DEBUG_SOURCE_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_API_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_POP_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PUSH_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A49, .hexadecimal);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_DECR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9581, .hexadecimal);
pub const GL_DEFORMATIONS_MASK_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8196, .hexadecimal);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E9, .hexadecimal);
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EA, .hexadecimal);
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8858, .hexadecimal);
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8859, .hexadecimal);
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885A, .hexadecimal);
pub const GL_DEPTH = @as(c_int, 0x1801);
pub const GL_DEPTH24_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_DEPTH24_STENCIL8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_DEPTH32F_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAD, .hexadecimal);
pub const GL_DEPTH32F_STENCIL8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAC, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_DEPTH_BOUNDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8891, .hexadecimal);
pub const GL_DEPTH_BOUNDS_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8890, .hexadecimal);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAF, .hexadecimal);
pub const GL_DEPTH_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GL_DEPTH_CLAMP_FAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901F, .hexadecimal);
pub const GL_DEPTH_CLAMP_NEAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901E, .hexadecimal);
pub const GL_DEPTH_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_DEPTH_COMPONENT32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAC, .hexadecimal);
pub const GL_DEPTH_COMPONENT32F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAB, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_DEPTH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8284, .hexadecimal);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8287, .hexadecimal);
pub const GL_DEPTH_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932D, .hexadecimal);
pub const GL_DEPTH_STENCIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821A, .hexadecimal);
pub const GL_DEPTH_STENCIL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH_STENCIL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EA, .hexadecimal);
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886F, .hexadecimal);
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886E, .hexadecimal);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_DEPTH_TEXTURE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AB, .hexadecimal);
pub const GL_DETACHED_MEMORY_INCARNATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A9, .hexadecimal);
pub const GL_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AA, .hexadecimal);
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8096, .hexadecimal);
pub const GL_DETAIL_TEXTURE_2D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8095, .hexadecimal);
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809C, .hexadecimal);
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809A, .hexadecimal);
pub const GL_DETAIL_TEXTURE_MODE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809B, .hexadecimal);
pub const GL_DEVICE_LUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9599, .hexadecimal);
pub const GL_DEVICE_NODE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959A, .hexadecimal);
pub const GL_DEVICE_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9597, .hexadecimal);
pub const GL_DIFFERENCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_DISCARD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8763, .hexadecimal);
pub const GL_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8530, .hexadecimal);
pub const GL_DISCRETE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9006, .hexadecimal);
pub const GL_DISJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9283, .hexadecimal);
pub const GL_DISPATCH_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EE, .hexadecimal);
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EF, .hexadecimal);
pub const GL_DISTANCE_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_DISTANCE_ATTENUATION_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_DOT2_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896C, .hexadecimal);
pub const GL_DOT3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8966, .hexadecimal);
pub const GL_DOT3_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_DOT3_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_DOT3_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const GL_DOT3_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hexadecimal);
pub const GL_DOT4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8967, .hexadecimal);
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885D, .hexadecimal);
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F3, .hexadecimal);
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86ED, .hexadecimal);
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F1, .hexadecimal);
pub const GL_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EC, .hexadecimal);
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885B, .hexadecimal);
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F2, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885C, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EE, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EF, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F0, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864E, .hexadecimal);
pub const GL_DOUBLE = @as(c_int, 0x140A);
pub const GL_DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const GL_DOUBLE_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const GL_DOUBLE_MAT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const GL_DOUBLE_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const GL_DOUBLE_MAT2x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const GL_DOUBLE_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const GL_DOUBLE_MAT2x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const GL_DOUBLE_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const GL_DOUBLE_MAT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const GL_DOUBLE_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const GL_DOUBLE_MAT3x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const GL_DOUBLE_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const GL_DOUBLE_MAT3x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const GL_DOUBLE_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const GL_DOUBLE_MAT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const GL_DOUBLE_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const GL_DOUBLE_MAT4x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const GL_DOUBLE_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const GL_DOUBLE_MAT4x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const GL_DOUBLE_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const GL_DOUBLE_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const GL_DOUBLE_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const GL_DOUBLE_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const GL_DOUBLE_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const GL_DOUBLE_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const GL_DRAW_ARRAYS_COMMAND_NV = @as(c_int, 0x0003);
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = @as(c_int, 0x0007);
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = @as(c_int, 0x0005);
pub const GL_DRAW_BUFFER = @as(c_int, 0x0C01);
pub const GL_DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_ELEMENTS_COMMAND_NV = @as(c_int, 0x0002);
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = @as(c_int, 0x0006);
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = @as(c_int, 0x0004);
pub const GL_DRAW_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_DRAW_INDIRECT_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F41, .hexadecimal);
pub const GL_DRAW_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3F, .hexadecimal);
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F43, .hexadecimal);
pub const GL_DRAW_INDIRECT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F42, .hexadecimal);
pub const GL_DRAW_INDIRECT_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F40, .hexadecimal);
pub const GL_DRAW_PIXELS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0A, .hexadecimal);
pub const GL_DRIVER_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9598, .hexadecimal);
pub const GL_DSDT8_MAG8_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870B, .hexadecimal);
pub const GL_DSDT8_MAG8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870A, .hexadecimal);
pub const GL_DSDT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8709, .hexadecimal);
pub const GL_DSDT_MAG_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DC, .hexadecimal);
pub const GL_DSDT_MAG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F6, .hexadecimal);
pub const GL_DSDT_MAG_VIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F7, .hexadecimal);
pub const GL_DSDT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F5, .hexadecimal);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_DST_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928F, .hexadecimal);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_DST_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928B, .hexadecimal);
pub const GL_DST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9287, .hexadecimal);
pub const GL_DST_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928D, .hexadecimal);
pub const GL_DST_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9289, .hexadecimal);
pub const GL_DS_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8716, .hexadecimal);
pub const GL_DS_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8710, .hexadecimal);
pub const GL_DT_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8717, .hexadecimal);
pub const GL_DT_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8711, .hexadecimal);
pub const GL_DU8DV8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877A, .hexadecimal);
pub const GL_DUAL_ALPHA12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8112, .hexadecimal);
pub const GL_DUAL_ALPHA16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8113, .hexadecimal);
pub const GL_DUAL_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8110, .hexadecimal);
pub const GL_DUAL_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8111, .hexadecimal);
pub const GL_DUAL_INTENSITY12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811A, .hexadecimal);
pub const GL_DUAL_INTENSITY16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811B, .hexadecimal);
pub const GL_DUAL_INTENSITY4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8118, .hexadecimal);
pub const GL_DUAL_INTENSITY8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8119, .hexadecimal);
pub const GL_DUAL_LUMINANCE12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8116, .hexadecimal);
pub const GL_DUAL_LUMINANCE16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8117, .hexadecimal);
pub const GL_DUAL_LUMINANCE4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8114, .hexadecimal);
pub const GL_DUAL_LUMINANCE8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8115, .hexadecimal);
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811C, .hexadecimal);
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811D, .hexadecimal);
pub const GL_DUAL_TEXTURE_SELECT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8124, .hexadecimal);
pub const GL_DUDV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8779, .hexadecimal);
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF2);
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF4);
pub const GL_DYNAMIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8761, .hexadecimal);
pub const GL_DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const GL_DYNAMIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_STORAGE_BIT = @as(c_int, 0x0100);
pub const GL_EDGEFLAG_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F26, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808D, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F30, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103075, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103085, .decimal);
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932C, .hexadecimal);
pub const GL_EIGHTH_BIT_ATI = @as(c_int, 0x00000020);
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = @as(c_int, 0x0008);
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F29, .hexadecimal);
pub const GL_ELEMENT_ARRAY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0C, .hexadecimal);
pub const GL_ELEMENT_ARRAY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8768, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = @as(c_int, 0x00000002);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_ELEMENT_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F33, .hexadecimal);
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0E, .hexadecimal);
pub const GL_ELEMENT_ARRAY_POINTER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876A, .hexadecimal);
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0D, .hexadecimal);
pub const GL_ELEMENT_ARRAY_TYPE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8769, .hexadecimal);
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1F, .hexadecimal);
pub const GL_EMBOSS_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855E, .hexadecimal);
pub const GL_EMBOSS_LIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855D, .hexadecimal);
pub const GL_EMBOSS_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855F, .hexadecimal);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_EQUIV = @as(c_int, 0x1509);
pub const GL_EVAL_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C0, .hexadecimal);
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C5, .hexadecimal);
pub const GL_EVAL_TRIANGULAR_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C1, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C6, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D0, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D1, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D2, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D3, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D4, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D5, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C7, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C8, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C9, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CA, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CB, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CC, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CD, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CE, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CF, .hexadecimal);
pub const GL_EXCLUSION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_EXCLUSION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_EXCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F11, .hexadecimal);
pub const GL_EXPAND_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8539, .hexadecimal);
pub const GL_EXPAND_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8538, .hexadecimal);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9160, .hexadecimal);
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F2, .hexadecimal);
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F0, .hexadecimal);
pub const GL_EYE_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F6, .hexadecimal);
pub const GL_EYE_PLANE = @as(c_int, 0x2502);
pub const GL_EYE_PLANE_ABSOLUTE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855C, .hexadecimal);
pub const GL_EYE_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F4, .hexadecimal);
pub const GL_EYE_RADIAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855B, .hexadecimal);
pub const GL_E_TIMES_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8531, .hexadecimal);
pub const GL_FACTOR_MAX_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901D, .hexadecimal);
pub const GL_FACTOR_MIN_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901C, .hexadecimal);
pub const GL_FAILURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9030, .hexadecimal);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0B, .hexadecimal);
pub const GL_FENCE_CONDITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F4, .hexadecimal);
pub const GL_FENCE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F3, .hexadecimal);
pub const GL_FIELDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E27, .hexadecimal);
pub const GL_FIELD_LOWER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9023, .hexadecimal);
pub const GL_FIELD_UPPER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9022, .hexadecimal);
pub const GL_FILE_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9074, .hexadecimal);
pub const GL_FILL = @as(c_int, 0x1B02);
pub const GL_FILL_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933C, .hexadecimal);
pub const GL_FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829A, .hexadecimal);
pub const GL_FILTER4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8146, .hexadecimal);
pub const GL_FIRST_TO_REST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AF, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_FIXED = @as(c_int, 0x140C);
pub const GL_FIXED_OES = @as(c_int, 0x140C);
pub const GL_FIXED_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const GL_FIXED_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_FLOAT16_MAT2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C5, .hexadecimal);
pub const GL_FLOAT16_MAT2x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C8, .hexadecimal);
pub const GL_FLOAT16_MAT2x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C9, .hexadecimal);
pub const GL_FLOAT16_MAT3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C6, .hexadecimal);
pub const GL_FLOAT16_MAT3x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CA, .hexadecimal);
pub const GL_FLOAT16_MAT3x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CB, .hexadecimal);
pub const GL_FLOAT16_MAT4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C7, .hexadecimal);
pub const GL_FLOAT16_MAT4x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CC, .hexadecimal);
pub const GL_FLOAT16_MAT4x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CD, .hexadecimal);
pub const GL_FLOAT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF8, .hexadecimal);
pub const GL_FLOAT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF9, .hexadecimal);
pub const GL_FLOAT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFA, .hexadecimal);
pub const GL_FLOAT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFB, .hexadecimal);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888D, .hexadecimal);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const GL_FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const GL_FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_FLOAT_MAT4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const GL_FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const GL_FLOAT_R16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8884, .hexadecimal);
pub const GL_FLOAT_R32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8885, .hexadecimal);
pub const GL_FLOAT_RG16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8886, .hexadecimal);
pub const GL_FLOAT_RG32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8887, .hexadecimal);
pub const GL_FLOAT_RGB16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8888, .hexadecimal);
pub const GL_FLOAT_RGB32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8889, .hexadecimal);
pub const GL_FLOAT_RGBA16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888A, .hexadecimal);
pub const GL_FLOAT_RGBA32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888B, .hexadecimal);
pub const GL_FLOAT_RGBA_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888E, .hexadecimal);
pub const GL_FLOAT_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8883, .hexadecimal);
pub const GL_FLOAT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8882, .hexadecimal);
pub const GL_FLOAT_RG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8881, .hexadecimal);
pub const GL_FLOAT_R_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8880, .hexadecimal);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_FLOAT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_FOG = @as(c_int, 0x0B60);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103076, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103086, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FOG_COORDINATE_SOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F28, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F32, .hexadecimal);
pub const GL_FOG_DISTANCE_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855A, .hexadecimal);
pub const GL_FOG_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812B, .hexadecimal);
pub const GL_FOG_FUNC_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812A, .hexadecimal);
pub const GL_FOG_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8198, .hexadecimal);
pub const GL_FOG_OFFSET_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8199, .hexadecimal);
pub const GL_FOG_SPECULAR_TEXTURE_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EC, .hexadecimal);
pub const GL_FONT_ASCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_FONT_DESCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_FONT_GLYPHS_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9368, .hexadecimal);
pub const GL_FONT_HAS_KERNING_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_FONT_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_FONT_TARGET_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9369, .hexadecimal);
pub const GL_FONT_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936A, .hexadecimal);
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_FONT_UNINTELLIGIBLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936B, .hexadecimal);
pub const GL_FONT_UNITS_PER_EM_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_FORCE_BLUE_TO_ONE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8860, .hexadecimal);
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8983, .hexadecimal);
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8982, .hexadecimal);
pub const GL_FRACTIONAL_EVEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_FRACTIONAL_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRAGMENT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834C, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8402, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8403, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8401, .hexadecimal);
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DE, .hexadecimal);
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DD, .hexadecimal);
pub const GL_FRAGMENT_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const GL_FRAGMENT_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936D, .hexadecimal);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_FRAGMENT_LIGHT0_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840C, .hexadecimal);
pub const GL_FRAGMENT_LIGHT1_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840D, .hexadecimal);
pub const GL_FRAGMENT_LIGHT2_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840E, .hexadecimal);
pub const GL_FRAGMENT_LIGHT3_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840F, .hexadecimal);
pub const GL_FRAGMENT_LIGHT4_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8410, .hexadecimal);
pub const GL_FRAGMENT_LIGHT5_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8411, .hexadecimal);
pub const GL_FRAGMENT_LIGHT6_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8412, .hexadecimal);
pub const GL_FRAGMENT_LIGHT7_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8413, .hexadecimal);
pub const GL_FRAGMENT_LIGHTING_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8400, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840A, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8408, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840B, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8409, .hexadecimal);
pub const GL_FRAGMENT_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8349, .hexadecimal);
pub const GL_FRAGMENT_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834A, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8804, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8873, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8870, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA4, .hexadecimal);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_FRAGMENT_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8920, .hexadecimal);
pub const GL_FRAGMENT_SHADER_BIT = @as(c_int, 0x00000002);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A52, .hexadecimal);
pub const GL_FRAGMENT_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const GL_FRAGMENT_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EC, .hexadecimal);
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F2, .hexadecimal);
pub const GL_FRAGMENT_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829F, .hexadecimal);
pub const GL_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8215, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8214, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8216, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8213, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8212, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8217, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9632, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9630, .hexadecimal);
pub const GL_FRAMEBUFFER_BARRIER_BIT = @as(c_int, 0x00000400);
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000400);
pub const GL_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BLEND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828B, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8218, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9314, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9311, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9313, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9310, .hexadecimal);
pub const GL_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_FRAMEBUFFER_FLIP_X_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBC, .hexadecimal);
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9633, .hexadecimal);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hexadecimal);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hexadecimal);
pub const GL_FRAMEBUFFER_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8289, .hexadecimal);
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828A, .hexadecimal);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hexadecimal);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBA, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const GL_FRAMEBUFFER_SWAP_XY_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBD, .hexadecimal);
pub const GL_FRAMEBUFFER_UNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_FRAMEZOOM_FACTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818C, .hexadecimal);
pub const GL_FRAMEZOOM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818B, .hexadecimal);
pub const GL_FRAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E26, .hexadecimal);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_FRONT_FACE_COMMAND_NV = @as(c_int, 0x0012);
pub const GL_FRONT_LEFT = @as(c_int, 0x0400);
pub const GL_FRONT_RIGHT = @as(c_int, 0x0401);
pub const GL_FULL_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E1, .hexadecimal);
pub const GL_FULL_STIPPLE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A219, .hexadecimal);
pub const GL_FULL_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B7, .hexadecimal);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_FUNC_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_GENERATE_MIPMAP_HINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const GL_GENERATE_MIPMAP_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GL_GENERIC_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7D, .hexadecimal);
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = @as(c_int, 0x00000002);
pub const GL_GEOMETRY_DEFORMATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8194, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hexadecimal);
pub const GL_GEOMETRY_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C26, .hexadecimal);
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA3, .hexadecimal);
pub const GL_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_BIT = @as(c_int, 0x00000004);
pub const GL_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const GL_GEOMETRY_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EB, .hexadecimal);
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F1, .hexadecimal);
pub const GL_GEOMETRY_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829E, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hexadecimal);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_GET_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8291, .hexadecimal);
pub const GL_GET_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8292, .hexadecimal);
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81DA, .hexadecimal);
pub const GL_GLOBAL_ALPHA_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D9, .hexadecimal);
pub const GL_GLYPH_HAS_KERNING_BIT_NV = @as(c_int, 0x100);
pub const GL_GLYPH_HEIGHT_BIT_NV = @as(c_int, 0x02);
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x10);
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = @as(c_int, 0x04);
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = @as(c_int, 0x08);
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x80);
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = @as(c_int, 0x20);
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = @as(c_int, 0x40);
pub const GL_GLYPH_WIDTH_BIT_NV = @as(c_int, 0x01);
pub const GL_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F34, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9049, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9047, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904B, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904A, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9048, .hexadecimal);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_GREEN = @as(c_int, 0x1904);
pub const GL_GREEN_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_GREEN_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const GL_GREEN_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const GL_GREEN_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8565, .hexadecimal);
pub const GL_GREEN_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8561, .hexadecimal);
pub const GL_GREEN_NV = @as(c_int, 0x1904);
pub const GL_GUILTY_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_HALF_APPLE = @as(c_int, 0x140B);
pub const GL_HALF_BIAS_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853B, .hexadecimal);
pub const GL_HALF_BIAS_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853A, .hexadecimal);
pub const GL_HALF_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_HALF_FLOAT = @as(c_int, 0x140B);
pub const GL_HALF_FLOAT_ARB = @as(c_int, 0x140B);
pub const GL_HALF_FLOAT_NV = @as(c_int, 0x140B);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958B, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958C, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9594, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958A, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9589, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9586, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9587, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9588, .hexadecimal);
pub const GL_HARDLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_HARDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_HARDMIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A9, .hexadecimal);
pub const GL_HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hexadecimal);
pub const GL_HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hexadecimal);
pub const GL_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F8, .hexadecimal);
pub const GL_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885E, .hexadecimal);
pub const GL_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F4, .hexadecimal);
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hexadecimal);
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hexadecimal);
pub const GL_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const GL_HISTOGRAM_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hexadecimal);
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hexadecimal);
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hexadecimal);
pub const GL_HISTOGRAM_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hexadecimal);
pub const GL_HISTOGRAM_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hexadecimal);
pub const GL_HISTOGRAM_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hexadecimal);
pub const GL_HI_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8714, .hexadecimal);
pub const GL_HI_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870E, .hexadecimal);
pub const GL_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x06);
pub const GL_HSL_COLOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_HUE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_HUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_LUMINOSITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const GL_HSL_LUMINOSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const GL_HSL_SATURATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_HSL_SATURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862A, .hexadecimal);
pub const GL_IGNORE_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8150, .hexadecimal);
pub const GL_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const GL_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const GL_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const GL_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const GL_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const GL_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const GL_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const GL_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const GL_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const GL_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const GL_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const GL_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const GL_IMAGE_BINDING_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const GL_IMAGE_BINDING_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const GL_IMAGE_BINDING_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const GL_IMAGE_BINDING_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const GL_IMAGE_BINDING_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const GL_IMAGE_BINDING_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const GL_IMAGE_BINDING_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const GL_IMAGE_BINDING_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const GL_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_CLASS_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C3, .hexadecimal);
pub const GL_IMAGE_CLASS_11_11_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C2, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BE, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BB, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C1, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BD, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BA, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C0, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BC, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B9, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BF, .hexadecimal);
pub const GL_IMAGE_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A8, .hexadecimal);
pub const GL_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const GL_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_CUBIC_WEIGHT_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815E, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C9, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C8, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C7, .hexadecimal);
pub const GL_IMAGE_MAG_FILTER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815C, .hexadecimal);
pub const GL_IMAGE_MIN_FILTER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815D, .hexadecimal);
pub const GL_IMAGE_PIXEL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A9, .hexadecimal);
pub const GL_IMAGE_PIXEL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AA, .hexadecimal);
pub const GL_IMAGE_ROTATE_ANGLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8159, .hexadecimal);
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815A, .hexadecimal);
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815B, .hexadecimal);
pub const GL_IMAGE_SCALE_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8155, .hexadecimal);
pub const GL_IMAGE_SCALE_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8156, .hexadecimal);
pub const GL_IMAGE_TEXEL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A7, .hexadecimal);
pub const GL_IMAGE_TRANSFORM_2D_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8161, .hexadecimal);
pub const GL_IMAGE_TRANSLATE_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8157, .hexadecimal);
pub const GL_IMAGE_TRANSLATE_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8158, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const GL_INCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F10, .hexadecimal);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_INCR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_INDEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F24, .hexadecimal);
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const GL_INDEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8087, .hexadecimal);
pub const GL_INDEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const GL_INDEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2E, .hexadecimal);
pub const GL_INDEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103073, .decimal);
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103083, .decimal);
pub const GL_INDEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const GL_INDEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const GL_INDEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const GL_INDEX_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_INDEX_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B8, .hexadecimal);
pub const GL_INDEX_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BA, .hexadecimal);
pub const GL_INDEX_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B9, .hexadecimal);
pub const GL_INDEX_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B5, .hexadecimal);
pub const GL_INDEX_TEST_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B6, .hexadecimal);
pub const GL_INDEX_TEST_REF_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B7, .hexadecimal);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8180, .hexadecimal);
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8181, .hexadecimal);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE4, .hexadecimal);
pub const GL_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE5, .hexadecimal);
pub const GL_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE6, .hexadecimal);
pub const GL_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE7, .hexadecimal);
pub const GL_INT64_ARB = @as(c_int, 0x140E);
pub const GL_INT64_NV = @as(c_int, 0x140E);
pub const GL_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hexadecimal);
pub const GL_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hexadecimal);
pub const GL_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hexadecimal);
pub const GL_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hexadecimal);
pub const GL_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hexadecimal);
pub const GL_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hexadecimal);
pub const GL_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE0, .hexadecimal);
pub const GL_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE1, .hexadecimal);
pub const GL_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE2, .hexadecimal);
pub const GL_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE3, .hexadecimal);
pub const GL_INTENSITY12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const GL_INTENSITY16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_INTENSITY16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8B, .hexadecimal);
pub const GL_INTENSITY16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D79, .hexadecimal);
pub const GL_INTENSITY16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const GL_INTENSITY16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901B, .hexadecimal);
pub const GL_INTENSITY32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_INTENSITY32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D85, .hexadecimal);
pub const GL_INTENSITY32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D73, .hexadecimal);
pub const GL_INTENSITY4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const GL_INTENSITY8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D91, .hexadecimal);
pub const GL_INTENSITY8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7F, .hexadecimal);
pub const GL_INTENSITY8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const GL_INTENSITY8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9017, .hexadecimal);
pub const GL_INTENSITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const GL_INTENSITY_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_INTENSITY_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_INTENSITY_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_INTENSITY_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_INTENSITY_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9013, .hexadecimal);
pub const GL_INTERLACE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8980, .hexadecimal);
pub const GL_INTERLACE_READ_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8568, .hexadecimal);
pub const GL_INTERLACE_READ_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8981, .hexadecimal);
pub const GL_INTERLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8094, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_INTERNALFORMAT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8274, .hexadecimal);
pub const GL_INTERNALFORMAT_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827B, .hexadecimal);
pub const GL_INTERNALFORMAT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8273, .hexadecimal);
pub const GL_INTERNALFORMAT_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827A, .hexadecimal);
pub const GL_INTERNALFORMAT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8275, .hexadecimal);
pub const GL_INTERNALFORMAT_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827C, .hexadecimal);
pub const GL_INTERNALFORMAT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8272, .hexadecimal);
pub const GL_INTERNALFORMAT_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8279, .hexadecimal);
pub const GL_INTERNALFORMAT_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8270, .hexadecimal);
pub const GL_INTERNALFORMAT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8271, .hexadecimal);
pub const GL_INTERNALFORMAT_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8278, .hexadecimal);
pub const GL_INTERNALFORMAT_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8277, .hexadecimal);
pub const GL_INTERNALFORMAT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8276, .hexadecimal);
pub const GL_INTERNALFORMAT_STENCIL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827D, .hexadecimal);
pub const GL_INTERNALFORMAT_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826F, .hexadecimal);
pub const GL_INTERPOLATE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_INTERPOLATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9F, .hexadecimal);
pub const GL_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const GL_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const GL_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const GL_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const GL_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const GL_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const GL_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const GL_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const GL_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const GL_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const GL_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const GL_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const GL_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const GL_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const GL_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const GL_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const GL_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9109, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hexadecimal);
pub const GL_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const GL_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const GL_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const GL_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9002, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E57, .hexadecimal);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_INT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = @as(c_int, 0x0506);
pub const GL_INVALID_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EB, .hexadecimal);
pub const GL_INVARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C2, .hexadecimal);
pub const GL_INVARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EA, .hexadecimal);
pub const GL_INVERSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862B, .hexadecimal);
pub const GL_INVERSE_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862D, .hexadecimal);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_INVERTED_SCREEN_W_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8491, .hexadecimal);
pub const GL_INVERT_OVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B4, .hexadecimal);
pub const GL_INVERT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A3, .hexadecimal);
pub const GL_IR_INSTRUMENT1_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817F, .hexadecimal);
pub const GL_ISOLINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_IS_PER_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9300, .hexadecimal);
pub const GL_ITALIC_BIT_NV = @as(c_int, 0x02);
pub const GL_IUI_N3F_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AF, .hexadecimal);
pub const GL_IUI_N3F_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B0, .hexadecimal);
pub const GL_IUI_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AD, .hexadecimal);
pub const GL_IUI_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AE, .hexadecimal);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x16);
pub const GL_LARGE_CW_ARC_TO_NV = @as(c_int, 0x18);
pub const GL_LAST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9027, .hexadecimal);
pub const GL_LAYER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAA, .hexadecimal);
pub const GL_LAYER_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958E, .hexadecimal);
pub const GL_LAYOUT_DEFAULT_INTEL = @as(c_int, 0);
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9531, .hexadecimal);
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9530, .hexadecimal);
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958F, .hexadecimal);
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9590, .hexadecimal);
pub const GL_LAYOUT_GENERAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958D, .hexadecimal);
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = @as(c_int, 2);
pub const GL_LAYOUT_LINEAR_INTEL = @as(c_int, 1);
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9591, .hexadecimal);
pub const GL_LAYOUT_TRANSFER_DST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9593, .hexadecimal);
pub const GL_LAYOUT_TRANSFER_SRC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9592, .hexadecimal);
pub const GL_LEFT = @as(c_int, 0x0406);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_LERP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8969, .hexadecimal);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = @as(c_int, 0x0800);
pub const GL_LIGHTEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_LIGHTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_LIGHT_ENV_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8407, .hexadecimal);
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B0, .hexadecimal);
pub const GL_LINE = @as(c_int, 0x1B01);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_LINEARBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A5, .hexadecimal);
pub const GL_LINEARDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A4, .hexadecimal);
pub const GL_LINEARLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A7, .hexadecimal);
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8170, .hexadecimal);
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844F, .hexadecimal);
pub const GL_LINEAR_DETAIL_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8098, .hexadecimal);
pub const GL_LINEAR_DETAIL_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8099, .hexadecimal);
pub const GL_LINEAR_DETAIL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8097, .hexadecimal);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AE, .hexadecimal);
pub const GL_LINEAR_SHARPEN_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AF, .hexadecimal);
pub const GL_LINEAR_SHARPEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AD, .hexadecimal);
pub const GL_LINEAR_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9585, .hexadecimal);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_LINES_ADJACENCY = @as(c_int, 0x000A);
pub const GL_LINES_ADJACENCY_ARB = @as(c_int, 0x000A);
pub const GL_LINES_ADJACENCY_EXT = @as(c_int, 0x000A);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_LINE_SMOOTH = @as(c_int, 0x0B20);
pub const GL_LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_LINE_STRIP_ADJACENCY = @as(c_int, 0x000B);
pub const GL_LINE_STRIP_ADJACENCY_ARB = @as(c_int, 0x000B);
pub const GL_LINE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000B);
pub const GL_LINE_TO_NV = @as(c_int, 0x04);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_LINE_WIDTH_COMMAND_NV = @as(c_int, 0x000D);
pub const GL_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_LIST_PRIORITY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8182, .hexadecimal);
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87ED, .hexadecimal);
pub const GL_LOCAL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C3, .hexadecimal);
pub const GL_LOCAL_CONSTANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EC, .hexadecimal);
pub const GL_LOCAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C4, .hexadecimal);
pub const GL_LOCATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930E, .hexadecimal);
pub const GL_LOCATION_COMPONENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934A, .hexadecimal);
pub const GL_LOCATION_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hexadecimal);
pub const GL_LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const GL_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const GL_LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hexadecimal);
pub const GL_LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hexadecimal);
pub const GL_LO_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8715, .hexadecimal);
pub const GL_LO_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870F, .hexadecimal);
pub const GL_LUID_SIZE_EXT = @as(c_int, 8);
pub const GL_LUMINANCE12_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const GL_LUMINANCE12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const GL_LUMINANCE16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8C, .hexadecimal);
pub const GL_LUMINANCE16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7A, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901A, .hexadecimal);
pub const GL_LUMINANCE16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const GL_LUMINANCE16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9019, .hexadecimal);
pub const GL_LUMINANCE32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D86, .hexadecimal);
pub const GL_LUMINANCE32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D74, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const GL_LUMINANCE6_ALPHA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const GL_LUMINANCE8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D92, .hexadecimal);
pub const GL_LUMINANCE8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D80, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9016, .hexadecimal);
pub const GL_LUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9015, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8D, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7B, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D87, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D75, .hexadecimal);
pub const GL_LUMINANCE_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D93, .hexadecimal);
pub const GL_LUMINANCE_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D81, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9D, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9012, .hexadecimal);
pub const GL_LUMINANCE_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9C, .hexadecimal);
pub const GL_LUMINANCE_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9011, .hexadecimal);
pub const GL_MAD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8968, .hexadecimal);
pub const GL_MAGNITUDE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8718, .hexadecimal);
pub const GL_MAGNITUDE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8712, .hexadecimal);
pub const GL_MAJOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821B, .hexadecimal);
pub const GL_MANUAL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8294, .hexadecimal);
pub const GL_MAP1_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8446, .hexadecimal);
pub const GL_MAP1_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8444, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8660, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866A, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866B, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866C, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866D, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866E, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866F, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8661, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8662, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8663, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8664, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8665, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8666, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8667, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8668, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8669, .hexadecimal);
pub const GL_MAP2_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8447, .hexadecimal);
pub const GL_MAP2_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8445, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8670, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867A, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867B, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867C, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867D, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867E, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867F, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8671, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8672, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8673, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8674, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8675, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8676, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8678, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8679, .hexadecimal);
pub const GL_MAP_ATTRIB_U_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C3, .hexadecimal);
pub const GL_MAP_ATTRIB_V_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C4, .hexadecimal);
pub const GL_MAP_COHERENT_BIT = @as(c_int, 0x0080);
pub const GL_MAP_FLUSH_EXPLICIT_BIT = @as(c_int, 0x0010);
pub const GL_MAP_INVALIDATE_BUFFER_BIT = @as(c_int, 0x0008);
pub const GL_MAP_INVALIDATE_RANGE_BIT = @as(c_int, 0x0004);
pub const GL_MAP_PERSISTENT_BIT = @as(c_int, 0x0040);
pub const GL_MAP_READ_BIT = @as(c_int, 0x0001);
pub const GL_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C2, .hexadecimal);
pub const GL_MAP_UNSYNCHRONIZED_BIT = @as(c_int, 0x0020);
pub const GL_MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const GL_MATERIAL_SIDE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22C, .hexadecimal);
pub const GL_MATRIX0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C0, .hexadecimal);
pub const GL_MATRIX0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8630, .hexadecimal);
pub const GL_MATRIX10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CA, .hexadecimal);
pub const GL_MATRIX11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CB, .hexadecimal);
pub const GL_MATRIX12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CC, .hexadecimal);
pub const GL_MATRIX13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CD, .hexadecimal);
pub const GL_MATRIX14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CE, .hexadecimal);
pub const GL_MATRIX15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CF, .hexadecimal);
pub const GL_MATRIX16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D0, .hexadecimal);
pub const GL_MATRIX17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D1, .hexadecimal);
pub const GL_MATRIX18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D2, .hexadecimal);
pub const GL_MATRIX19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D3, .hexadecimal);
pub const GL_MATRIX1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C1, .hexadecimal);
pub const GL_MATRIX1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8631, .hexadecimal);
pub const GL_MATRIX20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D4, .hexadecimal);
pub const GL_MATRIX21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D5, .hexadecimal);
pub const GL_MATRIX22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D6, .hexadecimal);
pub const GL_MATRIX23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D7, .hexadecimal);
pub const GL_MATRIX24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D8, .hexadecimal);
pub const GL_MATRIX25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D9, .hexadecimal);
pub const GL_MATRIX26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DA, .hexadecimal);
pub const GL_MATRIX27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DB, .hexadecimal);
pub const GL_MATRIX28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DC, .hexadecimal);
pub const GL_MATRIX29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DD, .hexadecimal);
pub const GL_MATRIX2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C2, .hexadecimal);
pub const GL_MATRIX2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8632, .hexadecimal);
pub const GL_MATRIX30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DE, .hexadecimal);
pub const GL_MATRIX31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DF, .hexadecimal);
pub const GL_MATRIX3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C3, .hexadecimal);
pub const GL_MATRIX3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8633, .hexadecimal);
pub const GL_MATRIX4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C4, .hexadecimal);
pub const GL_MATRIX4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8634, .hexadecimal);
pub const GL_MATRIX5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C5, .hexadecimal);
pub const GL_MATRIX5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8635, .hexadecimal);
pub const GL_MATRIX6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C6, .hexadecimal);
pub const GL_MATRIX6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8636, .hexadecimal);
pub const GL_MATRIX7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C7, .hexadecimal);
pub const GL_MATRIX7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8637, .hexadecimal);
pub const GL_MATRIX8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C8, .hexadecimal);
pub const GL_MATRIX9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C9, .hexadecimal);
pub const GL_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C0, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hexadecimal);
pub const GL_MATRIX_PALETTE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hexadecimal);
pub const GL_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FF, .hexadecimal);
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_MAT_AMBIENT_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_MAT_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_MAT_EMISSION_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_MAT_SHININESS_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_MAT_SPECULAR_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8138, .hexadecimal);
pub const GL_MAX_ACTIVE_LIGHTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8405, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8360, .hexadecimal);
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832D, .hexadecimal);
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8361, .hexadecimal);
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835F, .hexadecimal);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DC, .hexadecimal);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D8, .hexadecimal);
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DED, .hexadecimal);
pub const GL_MAX_CLIPMAP_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8177, .hexadecimal);
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8178, .hexadecimal);
pub const GL_MAX_CLIP_DISTANCES = @as(c_int, 0x0D32);
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955F, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B3, .hexadecimal);
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B4, .hexadecimal);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hexadecimal);
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910E, .hexadecimal);
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D7, .hexadecimal);
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D1, .hexadecimal);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hexadecimal);
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8266, .hexadecimal);
pub const GL_MAX_COMBINED_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8282, .hexadecimal);
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A33, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CF, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E67, .hexadecimal);
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DC, .hexadecimal);
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6F, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2E, .hexadecimal);
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A31, .hexadecimal);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8265, .hexadecimal);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8264, .hexadecimal);
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BD, .hexadecimal);
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DB, .hexadecimal);
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8262, .hexadecimal);
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BC, .hexadecimal);
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BB, .hexadecimal);
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8263, .hexadecimal);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9344, .hexadecimal);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9345, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BE, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hexadecimal);
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_MAX_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hexadecimal);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D1, .hexadecimal);
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D0, .hexadecimal);
pub const GL_MAX_DEFORMATION_ORDER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8197, .hexadecimal);
pub const GL_MAX_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8280, .hexadecimal);
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B5, .hexadecimal);
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910F, .hexadecimal);
pub const GL_MAX_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AD, .hexadecimal);
pub const GL_MAX_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AC, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953D, .hexadecimal);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const GL_MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENTS_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENT_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6B, .hexadecimal);
pub const GL_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_MAX_FOG_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812C, .hexadecimal);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D6, .hexadecimal);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D0, .hexadecimal);
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE3, .hexadecimal);
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CE, .hexadecimal);
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9125, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8404, .hexadecimal);
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8868, .hexadecimal);
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DA, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2D, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9316, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9318, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9315, .hexadecimal);
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818D, .hexadecimal);
pub const GL_MAX_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854D, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE4, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hexadecimal);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hexadecimal);
pub const GL_MAX_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827F, .hexadecimal);
pub const GL_MAX_IMAGE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const GL_MAX_IMAGE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const GL_MAX_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const GL_MAX_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const GL_MAX_INTEGER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9110, .hexadecimal);
pub const GL_MAX_LABEL_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hexadecimal);
pub const GL_MAX_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8281, .hexadecimal);
pub const GL_MAX_LGPU_GPUS_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hexadecimal);
pub const GL_MAX_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D6, .hexadecimal);
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8841, .hexadecimal);
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E65, .hexadecimal);
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E64, .hexadecimal);
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E62, .hexadecimal);
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9539, .hexadecimal);
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9538, .hexadecimal);
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E66, .hexadecimal);
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E61, .hexadecimal);
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9536, .hexadecimal);
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E60, .hexadecimal);
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E63, .hexadecimal);
pub const GL_MAX_MESH_VIEWS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9557, .hexadecimal);
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A2, .hexadecimal);
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953B, .hexadecimal);
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E11, .hexadecimal);
pub const GL_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F6, .hexadecimal);
pub const GL_MAX_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F7, .hexadecimal);
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F8, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CA, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CD, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CE, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CC, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CB, .hexadecimal);
pub const GL_MAX_PALETTE_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8337, .hexadecimal);
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F1, .hexadecimal);
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B1, .hexadecimal);
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880B, .hexadecimal);
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AD, .hexadecimal);
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8908, .hexadecimal);
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F5, .hexadecimal);
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B5, .hexadecimal);
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F4, .hexadecimal);
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA5, .hexadecimal);
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA6, .hexadecimal);
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F6, .hexadecimal);
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A1, .hexadecimal);
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B4, .hexadecimal);
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F8, .hexadecimal);
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F7, .hexadecimal);
pub const GL_MAX_PROGRAM_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hexadecimal);
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B3, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880E, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AF, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A3, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AB, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A7, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8810, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880F, .hexadecimal);
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C27, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A9, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA0, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA1, .hexadecimal);
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D8, .hexadecimal);
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8909, .hexadecimal);
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F45, .hexadecimal);
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F44, .hexadecimal);
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A5, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880D, .hexadecimal);
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880C, .hexadecimal);
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C28, .hexadecimal);
pub const GL_MAX_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9329, .hexadecimal);
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D7, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_MAX_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_MAX_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_MAX_SAMPLE_MASK_WORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const GL_MAX_SERVER_WAIT_TIMEOUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hexadecimal);
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F35, .hexadecimal);
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hexadecimal);
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hexadecimal);
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DE, .hexadecimal);
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DD, .hexadecimal);
pub const GL_MAX_SHININESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8504, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPOT_EXPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8505, .hexadecimal);
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9349, .hexadecimal);
pub const GL_MAX_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE7, .hexadecimal);
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE8, .hexadecimal);
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6D, .hexadecimal);
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6C, .hexadecimal);
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6A, .hexadecimal);
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953A, .hexadecimal);
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6E, .hexadecimal);
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E69, .hexadecimal);
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9537, .hexadecimal);
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E68, .hexadecimal);
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6B, .hexadecimal);
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A3, .hexadecimal);
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953C, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_TEXTURE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B6, .hexadecimal);
pub const GL_MAX_TRACK_MATRICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hexadecimal);
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E70, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_MAX_UNIFORM_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A30, .hexadecimal);
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2F, .hexadecimal);
pub const GL_MAX_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826E, .hexadecimal);
pub const GL_MAX_VARYING_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hexadecimal);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hexadecimal);
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D2, .hexadecimal);
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CC, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DA, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D9, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E5, .hexadecimal);
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE2, .hexadecimal);
pub const GL_MAX_VERTEX_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22D, .hexadecimal);
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CA, .hexadecimal);
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9122, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C5, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C7, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C9, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C8, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D6, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C6, .hexadecimal);
pub const GL_MAX_VERTEX_STREAMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E71, .hexadecimal);
pub const GL_MAX_VERTEX_STREAMS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876B, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2B, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hexadecimal);
pub const GL_MAX_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hexadecimal);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hexadecimal);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hexadecimal);
pub const GL_MAX_VIEWPORTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_MAX_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9631, .hexadecimal);
pub const GL_MAX_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827E, .hexadecimal);
pub const GL_MAX_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F14, .hexadecimal);
pub const GL_MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hexadecimal);
pub const GL_MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A6, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A8, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A7, .hexadecimal);
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9543, .hexadecimal);
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DF, .hexadecimal);
pub const GL_MESH_OUTPUT_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957B, .hexadecimal);
pub const GL_MESH_PRIMITIVES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957A, .hexadecimal);
pub const GL_MESH_SHADER_BIT_NV = @as(c_int, 0x00000040);
pub const GL_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9559, .hexadecimal);
pub const GL_MESH_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957C, .hexadecimal);
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957E, .hexadecimal);
pub const GL_MESH_VERTICES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9579, .hexadecimal);
pub const GL_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953E, .hexadecimal);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MINMAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const GL_MINMAX_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hexadecimal);
pub const GL_MINMAX_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hexadecimal);
pub const GL_MINOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821C, .hexadecimal);
pub const GL_MINUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B3, .hexadecimal);
pub const GL_MINUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929F, .hexadecimal);
pub const GL_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MIN_LOD_WARNING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919C, .hexadecimal);
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BC, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const GL_MIN_SPARSE_LEVEL_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919B, .hexadecimal);
pub const GL_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8293, .hexadecimal);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MIRRORED_REPEAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MIRRORED_REPEAT_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MIRROR_CLAMP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hexadecimal);
pub const GL_MIRROR_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8912, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MITER_REVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A7, .hexadecimal);
pub const GL_MITER_TRUNCATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A8, .hexadecimal);
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932F, .hexadecimal);
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9330, .hexadecimal);
pub const GL_MODELVIEW0_ARB = @as(c_int, 0x1700);
pub const GL_MODELVIEW0_EXT = @as(c_int, 0x1700);
pub const GL_MODELVIEW0_MATRIX_EXT = @as(c_int, 0x0BA6);
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = @as(c_int, 0x0BA3);
pub const GL_MODELVIEW10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872A, .hexadecimal);
pub const GL_MODELVIEW11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872B, .hexadecimal);
pub const GL_MODELVIEW12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872C, .hexadecimal);
pub const GL_MODELVIEW13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872D, .hexadecimal);
pub const GL_MODELVIEW14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872E, .hexadecimal);
pub const GL_MODELVIEW15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872F, .hexadecimal);
pub const GL_MODELVIEW16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8730, .hexadecimal);
pub const GL_MODELVIEW17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8731, .hexadecimal);
pub const GL_MODELVIEW18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8732, .hexadecimal);
pub const GL_MODELVIEW19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8733, .hexadecimal);
pub const GL_MODELVIEW1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hexadecimal);
pub const GL_MODELVIEW1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hexadecimal);
pub const GL_MODELVIEW1_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8506, .hexadecimal);
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8502, .hexadecimal);
pub const GL_MODELVIEW20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8734, .hexadecimal);
pub const GL_MODELVIEW21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8735, .hexadecimal);
pub const GL_MODELVIEW22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8736, .hexadecimal);
pub const GL_MODELVIEW23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8737, .hexadecimal);
pub const GL_MODELVIEW24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8738, .hexadecimal);
pub const GL_MODELVIEW25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8739, .hexadecimal);
pub const GL_MODELVIEW26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873A, .hexadecimal);
pub const GL_MODELVIEW27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873B, .hexadecimal);
pub const GL_MODELVIEW28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873C, .hexadecimal);
pub const GL_MODELVIEW29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873D, .hexadecimal);
pub const GL_MODELVIEW2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8722, .hexadecimal);
pub const GL_MODELVIEW30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873E, .hexadecimal);
pub const GL_MODELVIEW31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873F, .hexadecimal);
pub const GL_MODELVIEW3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8723, .hexadecimal);
pub const GL_MODELVIEW4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8724, .hexadecimal);
pub const GL_MODELVIEW5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8725, .hexadecimal);
pub const GL_MODELVIEW6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8726, .hexadecimal);
pub const GL_MODELVIEW7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8727, .hexadecimal);
pub const GL_MODELVIEW8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8728, .hexadecimal);
pub const GL_MODELVIEW9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8729, .hexadecimal);
pub const GL_MODELVIEW_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8629, .hexadecimal);
pub const GL_MODULATE_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hexadecimal);
pub const GL_MODULATE_SIGNED_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hexadecimal);
pub const GL_MODULATE_SUBTRACT_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hexadecimal);
pub const GL_MOVE_TO_CONTINUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B6, .hexadecimal);
pub const GL_MOVE_TO_NV = @as(c_int, 0x02);
pub const GL_MOVE_TO_RESETS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B5, .hexadecimal);
pub const GL_MOV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8961, .hexadecimal);
pub const GL_MULTICAST_GPUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hexadecimal);
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9549, .hexadecimal);
pub const GL_MULTIPLY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_MULTIPLY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MULTISAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9371, .hexadecimal);
pub const GL_MULTISAMPLE_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B2, .hexadecimal);
pub const GL_MULTISAMPLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E12, .hexadecimal);
pub const GL_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MULTISAMPLE_FILTER_HINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8534, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9382, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9381, .hexadecimal);
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932B, .hexadecimal);
pub const GL_MULTISAMPLE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MUL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8964, .hexadecimal);
pub const GL_MVP_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E3, .hexadecimal);
pub const GL_NAMED_STRING_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE9, .hexadecimal);
pub const GL_NAMED_STRING_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEA, .hexadecimal);
pub const GL_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F9, .hexadecimal);
pub const GL_NAND = @as(c_int, 0x150E);
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A203, .hexadecimal);
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A204, .hexadecimal);
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A202, .hexadecimal);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844E, .hexadecimal);
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844D, .hexadecimal);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_NEGATE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_NEGATIVE_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DF, .hexadecimal);
pub const GL_NEGATIVE_ONE_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hexadecimal);
pub const GL_NEGATIVE_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DC, .hexadecimal);
pub const GL_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D9, .hexadecimal);
pub const GL_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DA, .hexadecimal);
pub const GL_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DB, .hexadecimal);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_NEXT_BUFFER_NV = -@as(c_int, 2);
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9025, .hexadecimal);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_NONE = @as(c_int, 0);
pub const GL_NOOP = @as(c_int, 0x1505);
pub const GL_NOP_COMMAND_NV = @as(c_int, 0x0001);
pub const GL_NOR = @as(c_int, 0x1508);
pub const GL_NORMALIZED_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E0, .hexadecimal);
pub const GL_NORMAL_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F22, .hexadecimal);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const GL_NORMAL_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8080, .hexadecimal);
pub const GL_NORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const GL_NORMAL_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2C, .hexadecimal);
pub const GL_NORMAL_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103071, .decimal);
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103081, .decimal);
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F6, .hexadecimal);
pub const GL_NORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const GL_NORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const GL_NORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const GL_NORMAL_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_NORMAL_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NORMAL_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NORMAL_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9304, .hexadecimal);
pub const GL_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4A, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_NUM_DEVICE_UUIDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9596, .hexadecimal);
pub const GL_NUM_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821D, .hexadecimal);
pub const GL_NUM_FILL_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E29, .hexadecimal);
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896F, .hexadecimal);
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896E, .hexadecimal);
pub const GL_NUM_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854E, .hexadecimal);
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8973, .hexadecimal);
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8971, .hexadecimal);
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8972, .hexadecimal);
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8974, .hexadecimal);
pub const GL_NUM_PASSES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8970, .hexadecimal);
pub const GL_NUM_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hexadecimal);
pub const GL_NUM_SAMPLE_COUNTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9380, .hexadecimal);
pub const GL_NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hexadecimal);
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E9, .hexadecimal);
pub const GL_NUM_SPARSE_LEVELS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hexadecimal);
pub const GL_NUM_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9554, .hexadecimal);
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B6, .hexadecimal);
pub const GL_NUM_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9582, .hexadecimal);
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9024, .hexadecimal);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hexadecimal);
pub const GL_NUM_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F15, .hexadecimal);
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_OBJECT_BUFFER_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_OBJECT_BUFFER_USAGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_OBJECT_COMPILE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_OBJECT_DELETE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F3, .hexadecimal);
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F1, .hexadecimal);
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_OBJECT_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F7, .hexadecimal);
pub const GL_OBJECT_LINK_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_OBJECT_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F5, .hexadecimal);
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const GL_OBJECT_SUBTYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hexadecimal);
pub const GL_OBJECT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4E, .hexadecimal);
pub const GL_OBJECT_VALIDATE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874F, .hexadecimal);
pub const GL_OCCLUSION_TEST_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8165, .hexadecimal);
pub const GL_OCCLUSION_TEST_RESULT_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8166, .hexadecimal);
pub const GL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FC, .hexadecimal);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8856, .hexadecimal);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8857, .hexadecimal);
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8854, .hexadecimal);
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8855, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8850, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8851, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8852, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8853, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E8, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hexadecimal);
pub const GL_OFFSET_TEXTURE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hexadecimal);
pub const GL_OFFSET_TEXTURE_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hexadecimal);
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864C, .hexadecimal);
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864D, .hexadecimal);
pub const GL_OFFSET_TEXTURE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hexadecimal);
pub const GL_ONE = @as(c_int, 1);
pub const GL_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DE, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_ONE_MINUS_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hexadecimal);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_OPERAND0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_OPERAND2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_OPERAND2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859B, .hexadecimal);
pub const GL_OPERAND3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8593, .hexadecimal);
pub const GL_OPTIMAL_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9584, .hexadecimal);
pub const GL_OP_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8787, .hexadecimal);
pub const GL_OP_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878E, .hexadecimal);
pub const GL_OP_CROSS_PRODUCT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8797, .hexadecimal);
pub const GL_OP_DOT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8784, .hexadecimal);
pub const GL_OP_DOT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8785, .hexadecimal);
pub const GL_OP_EXP_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8791, .hexadecimal);
pub const GL_OP_FLOOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878F, .hexadecimal);
pub const GL_OP_FRAC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8789, .hexadecimal);
pub const GL_OP_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8782, .hexadecimal);
pub const GL_OP_LOG_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8792, .hexadecimal);
pub const GL_OP_MADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8788, .hexadecimal);
pub const GL_OP_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878A, .hexadecimal);
pub const GL_OP_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878B, .hexadecimal);
pub const GL_OP_MOV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8799, .hexadecimal);
pub const GL_OP_MULTIPLY_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8798, .hexadecimal);
pub const GL_OP_MUL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8786, .hexadecimal);
pub const GL_OP_NEGATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8783, .hexadecimal);
pub const GL_OP_POWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8793, .hexadecimal);
pub const GL_OP_RECIP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8794, .hexadecimal);
pub const GL_OP_RECIP_SQRT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8795, .hexadecimal);
pub const GL_OP_ROUND_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8790, .hexadecimal);
pub const GL_OP_SET_GE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878C, .hexadecimal);
pub const GL_OP_SET_LT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878D, .hexadecimal);
pub const GL_OP_SUB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8796, .hexadecimal);
pub const GL_OR = @as(c_int, 0x1507);
pub const GL_OR_INVERTED = @as(c_int, 0x150D);
pub const GL_OR_REVERSE = @as(c_int, 0x150B);
pub const GL_OUTPUT_COLOR0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879B, .hexadecimal);
pub const GL_OUTPUT_COLOR1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879C, .hexadecimal);
pub const GL_OUTPUT_FOG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BD, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879D, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A7, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A8, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A9, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AA, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AB, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AC, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AD, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AE, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AF, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B0, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879E, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B1, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B2, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B3, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B4, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B5, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B6, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B7, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B8, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B9, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BA, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879F, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BB, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BC, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A0, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A1, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A2, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A3, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A4, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A5, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A6, .hexadecimal);
pub const GL_OUTPUT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879A, .hexadecimal);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_OVERLAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_OVERLAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_PACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800E, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912D, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912C, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912E, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912B, .hexadecimal);
pub const GL_PACK_IMAGE_DEPTH_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8131, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_PACK_INVERT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8758, .hexadecimal);
pub const GL_PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const GL_PACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8984, .hexadecimal);
pub const GL_PACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842E, .hexadecimal);
pub const GL_PACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A15, .hexadecimal);
pub const GL_PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const GL_PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_VOLUMES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8130, .hexadecimal);
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A0, .hexadecimal);
pub const GL_PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const GL_PALETTE4_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B92, .hexadecimal);
pub const GL_PALETTE4_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B94, .hexadecimal);
pub const GL_PALETTE4_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B90, .hexadecimal);
pub const GL_PALETTE4_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B93, .hexadecimal);
pub const GL_PALETTE4_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B91, .hexadecimal);
pub const GL_PALETTE8_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B97, .hexadecimal);
pub const GL_PALETTE8_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B99, .hexadecimal);
pub const GL_PALETTE8_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B95, .hexadecimal);
pub const GL_PALETTE8_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B98, .hexadecimal);
pub const GL_PALETTE8_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B96, .hexadecimal);
pub const GL_PARALLEL_ARRAYS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F4, .hexadecimal);
pub const GL_PARAMETER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const GL_PARAMETER_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const GL_PARAMETER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const GL_PARAMETER_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const GL_PARTIAL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902E, .hexadecimal);
pub const GL_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E6, .hexadecimal);
pub const GL_PATCHES = @as(c_int, 0x000E);
pub const GL_PATCH_DEFAULT_INNER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hexadecimal);
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hexadecimal);
pub const GL_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_PATH_CLIENT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907F, .hexadecimal);
pub const GL_PATH_COMMAND_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909D, .hexadecimal);
pub const GL_PATH_COMPUTED_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A0, .hexadecimal);
pub const GL_PATH_COORD_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909E, .hexadecimal);
pub const GL_PATH_COVER_DEPTH_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BF, .hexadecimal);
pub const GL_PATH_DASH_ARRAY_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909F, .hexadecimal);
pub const GL_PATH_DASH_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907B, .hexadecimal);
pub const GL_PATH_DASH_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907E, .hexadecimal);
pub const GL_PATH_DASH_OFFSET_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B4, .hexadecimal);
pub const GL_PATH_END_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9076, .hexadecimal);
pub const GL_PATH_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AB, .hexadecimal);
pub const GL_PATH_FILL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A1, .hexadecimal);
pub const GL_PATH_FILL_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9082, .hexadecimal);
pub const GL_PATH_FILL_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9081, .hexadecimal);
pub const GL_PATH_FILL_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9080, .hexadecimal);
pub const GL_PATH_FORMAT_PS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9071, .hexadecimal);
pub const GL_PATH_FORMAT_SVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9070, .hexadecimal);
pub const GL_PATH_GEN_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B1, .hexadecimal);
pub const GL_PATH_GEN_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B3, .hexadecimal);
pub const GL_PATH_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B0, .hexadecimal);
pub const GL_PATH_INITIAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907C, .hexadecimal);
pub const GL_PATH_INITIAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9077, .hexadecimal);
pub const GL_PATH_JOIN_STYLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9079, .hexadecimal);
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0D36);
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0D38);
pub const GL_PATH_MITER_LIMIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907A, .hexadecimal);
pub const GL_PATH_MODELVIEW_MATRIX_NV = @as(c_int, 0x0BA6);
pub const GL_PATH_MODELVIEW_NV = @as(c_int, 0x1700);
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0BA3);
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908A, .hexadecimal);
pub const GL_PATH_PROJECTION_MATRIX_NV = @as(c_int, 0x0BA7);
pub const GL_PATH_PROJECTION_NV = @as(c_int, 0x1701);
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0BA4);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BD, .hexadecimal);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BE, .hexadecimal);
pub const GL_PATH_STENCIL_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B7, .hexadecimal);
pub const GL_PATH_STENCIL_REF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B8, .hexadecimal);
pub const GL_PATH_STENCIL_VALUE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B9, .hexadecimal);
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A2, .hexadecimal);
pub const GL_PATH_STROKE_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9083, .hexadecimal);
pub const GL_PATH_STROKE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9084, .hexadecimal);
pub const GL_PATH_STROKE_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9075, .hexadecimal);
pub const GL_PATH_TERMINAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907D, .hexadecimal);
pub const GL_PATH_TERMINAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9078, .hexadecimal);
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_PERCENTAGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC3, .hexadecimal);
pub const GL_PERFMON_RESULT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC6, .hexadecimal);
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC4, .hexadecimal);
pub const GL_PERFMON_RESULT_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC5, .hexadecimal);
pub const GL_PERFORMANCE_MONITOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9152, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FC, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FB, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FA, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F8, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F9, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FF, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F1, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F2, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F0, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FE, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F4, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F3, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F5, .hexadecimal);
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F9, .hexadecimal);
pub const GL_PERFQUERY_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FA, .hexadecimal);
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = @as(c_int, 0x00000001);
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9500, .hexadecimal);
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FD, .hexadecimal);
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = @as(c_int, 0x00000000);
pub const GL_PERFQUERY_WAIT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FB, .hexadecimal);
pub const GL_PERTURB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AE, .hexadecimal);
pub const GL_PER_GPU_STORAGE_BIT_NV = @as(c_int, 0x0800);
pub const GL_PER_GPU_STORAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9548, .hexadecimal);
pub const GL_PER_STAGE_CONSTANTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8535, .hexadecimal);
pub const GL_PHONG_HINT_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EB, .hexadecimal);
pub const GL_PHONG_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EA, .hexadecimal);
pub const GL_PINLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A8, .hexadecimal);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AE, .hexadecimal);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AF, .hexadecimal);
pub const GL_PIXEL_BUFFER_BARRIER_BIT = @as(c_int, 0x00000080);
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000080);
pub const GL_PIXEL_COUNTER_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_PIXEL_COUNT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_PIXEL_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8333, .hexadecimal);
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8355, .hexadecimal);
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8354, .hexadecimal);
pub const GL_PIXEL_GROUP_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8356, .hexadecimal);
pub const GL_PIXEL_MAG_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8331, .hexadecimal);
pub const GL_PIXEL_MIN_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8332, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A3, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A4, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A2, .hexadecimal);
pub const GL_PIXEL_TEXTURE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8353, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832B, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8139, .hexadecimal);
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813E, .hexadecimal);
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813F, .hexadecimal);
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8145, .hexadecimal);
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8144, .hexadecimal);
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8143, .hexadecimal);
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8142, .hexadecimal);
pub const GL_PIXEL_TILE_HEIGHT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8141, .hexadecimal);
pub const GL_PIXEL_TILE_WIDTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8140, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8330, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8338, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8336, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PLUS_CLAMPED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B2, .hexadecimal);
pub const GL_PLUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B1, .hexadecimal);
pub const GL_PLUS_DARKER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9292, .hexadecimal);
pub const GL_PLUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9291, .hexadecimal);
pub const GL_PN_TRIANGLES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F0, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F3, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F7, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F8, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F2, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F6, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F5, .hexadecimal);
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F4, .hexadecimal);
pub const GL_POINT = @as(c_int, 0x1B00);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_SIZE = @as(c_int, 0x0B11);
pub const GL_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_POINT_SIZE_MAX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_SIZE_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_SIZE_MAX_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_SIZE_MIN_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MIN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_POINT_SPRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hexadecimal);
pub const GL_POINT_SPRITE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_POINT_SPRITE_R_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8863, .hexadecimal);
pub const GL_POLYGON_MODE = @as(c_int, 0x0B40);
pub const GL_POLYGON_OFFSET_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8039, .hexadecimal);
pub const GL_POLYGON_OFFSET_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const GL_POLYGON_OFFSET_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const GL_POLYGON_OFFSET_COMMAND_NV = @as(c_int, 0x000E);
pub const GL_POLYGON_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const GL_POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const GL_POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hexadecimal);
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hexadecimal);
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8162, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817B, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8179, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817C, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817A, .hexadecimal);
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1F8, .hexadecimal);
pub const GL_PRESENT_DURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2B, .hexadecimal);
pub const GL_PRESENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2A, .hexadecimal);
pub const GL_PRESERVE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8762, .hexadecimal);
pub const GL_PREVIOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_PREVIOUS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E4, .hexadecimal);
pub const GL_PRIMARY_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PRIMARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852C, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_PRIMITIVES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const GL_PRIMITIVES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const GL_PRIMITIVE_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7C, .hexadecimal);
pub const GL_PRIMITIVE_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9D, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D69, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9E, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_INDEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8559, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8558, .hexadecimal);
pub const GL_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hexadecimal);
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B0, .hexadecimal);
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8805, .hexadecimal);
pub const GL_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AC, .hexadecimal);
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8906, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMAT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875F, .hexadecimal);
pub const GL_PROGRAM_BINARY_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8257, .hexadecimal);
pub const GL_PROGRAM_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hexadecimal);
pub const GL_PROGRAM_ERROR_POSITION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hexadecimal);
pub const GL_PROGRAM_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hexadecimal);
pub const GL_PROGRAM_ERROR_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hexadecimal);
pub const GL_PROGRAM_ERROR_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hexadecimal);
pub const GL_PROGRAM_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8876, .hexadecimal);
pub const GL_PROGRAM_FORMAT_ASCII_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8875, .hexadecimal);
pub const GL_PROGRAM_INPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E3, .hexadecimal);
pub const GL_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A0, .hexadecimal);
pub const GL_PROGRAM_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hexadecimal);
pub const GL_PROGRAM_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hexadecimal);
pub const GL_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2D, .hexadecimal);
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2F, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B2, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8808, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AE, .hexadecimal);
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A2, .hexadecimal);
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AA, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A6, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880A, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8809, .hexadecimal);
pub const GL_PROGRAM_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hexadecimal);
pub const GL_PROGRAM_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hexadecimal);
pub const GL_PROGRAM_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E4, .hexadecimal);
pub const GL_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A8, .hexadecimal);
pub const GL_PROGRAM_PARAMETER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8644, .hexadecimal);
pub const GL_PROGRAM_PIPELINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4F, .hexadecimal);
pub const GL_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_PROGRAM_POINT_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_PROGRAM_RESIDENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8647, .hexadecimal);
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8907, .hexadecimal);
pub const GL_PROGRAM_SEPARABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hexadecimal);
pub const GL_PROGRAM_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hexadecimal);
pub const GL_PROGRAM_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hexadecimal);
pub const GL_PROGRAM_TARGET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8646, .hexadecimal);
pub const GL_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A4, .hexadecimal);
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8807, .hexadecimal);
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8806, .hexadecimal);
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B6, .hexadecimal);
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959B, .hexadecimal);
pub const GL_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const GL_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const GL_PROXY_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const GL_PROXY_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8163, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875B, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9101, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9103, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875C, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_PROXY_TEXTURE_4D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8135, .hexadecimal);
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BD, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_PURGEABLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1D, .hexadecimal);
pub const GL_PURGED_CONTEXT_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BB, .hexadecimal);
pub const GL_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0A);
pub const GL_QUADS = @as(c_int, 0x0007);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const GL_QUAD_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811E, .hexadecimal);
pub const GL_QUAD_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811F, .hexadecimal);
pub const GL_QUAD_INTENSITY4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8122, .hexadecimal);
pub const GL_QUAD_INTENSITY8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8123, .hexadecimal);
pub const GL_QUAD_LUMINANCE4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8120, .hexadecimal);
pub const GL_QUAD_LUMINANCE8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8121, .hexadecimal);
pub const GL_QUAD_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8614, .hexadecimal);
pub const GL_QUAD_TEXTURE_SELECT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8125, .hexadecimal);
pub const GL_QUARTER_BIT_ATI = @as(c_int, 0x00000010);
pub const GL_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hexadecimal);
pub const GL_QUERY_ALL_EVENT_BITS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_QUERY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const GL_QUERY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const GL_QUERY_BUFFER_BARRIER_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_QUERY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const GL_QUERY_BUFFER_BINDING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1A, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E19, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000008);
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000002);
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_QUERY_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const GL_QUERY_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E18, .hexadecimal);
pub const GL_QUERY_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const GL_QUERY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hexadecimal);
pub const GL_QUERY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hexadecimal);
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9547, .hexadecimal);
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9542, .hexadecimal);
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9546, .hexadecimal);
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9544, .hexadecimal);
pub const GL_QUERY_RESOURCE_TEXTURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9545, .hexadecimal);
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9540, .hexadecimal);
pub const GL_QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_QUERY_RESULT_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const GL_QUERY_RESULT_NO_WAIT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000004);
pub const GL_QUERY_TARGET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EA, .hexadecimal);
pub const GL_QUERY_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const GL_QUERY_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E17, .hexadecimal);
pub const GL_QUERY_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const GL_R11F_G11F_B10F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_R11F_G11F_B10F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_R16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hexadecimal);
pub const GL_R16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const GL_R16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const GL_R16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8233, .hexadecimal);
pub const GL_R16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8234, .hexadecimal);
pub const GL_R16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hexadecimal);
pub const GL_R1UI_C3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C6, .hexadecimal);
pub const GL_R1UI_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C8, .hexadecimal);
pub const GL_R1UI_C4UB_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C5, .hexadecimal);
pub const GL_R1UI_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C7, .hexadecimal);
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CB, .hexadecimal);
pub const GL_R1UI_T2F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CA, .hexadecimal);
pub const GL_R1UI_T2F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C9, .hexadecimal);
pub const GL_R1UI_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C4, .hexadecimal);
pub const GL_R32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const GL_R32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const GL_R32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8235, .hexadecimal);
pub const GL_R32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8236, .hexadecimal);
pub const GL_R3_G3_B2 = @as(c_int, 0x2A10);
pub const GL_R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const GL_R8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8231, .hexadecimal);
pub const GL_R8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8232, .hexadecimal);
pub const GL_R8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const GL_R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hexadecimal);
pub const GL_RASTERIZER_DISCARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_RASTERIZER_DISCARD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_RASTERIZER_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932A, .hexadecimal);
pub const GL_RASTER_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9327, .hexadecimal);
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x19262, .hexadecimal);
pub const GL_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9328, .hexadecimal);
pub const GL_READ_BUFFER = @as(c_int, 0x0C02);
pub const GL_READ_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_READ_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_READ_PIXELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828C, .hexadecimal);
pub const GL_READ_PIXELS_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828D, .hexadecimal);
pub const GL_READ_PIXELS_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828E, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887B, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8879, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887D, .hexadecimal);
pub const GL_READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_READ_WRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_RECLAIM_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1FE, .hexadecimal);
pub const GL_RECT_NV = @as(c_int, 0xF6);
pub const GL_RED = @as(c_int, 0x1903);
pub const GL_REDUCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hexadecimal);
pub const GL_RED_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_RED_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GL_RED_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GL_RED_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8564, .hexadecimal);
pub const GL_RED_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8560, .hexadecimal);
pub const GL_RED_NV = @as(c_int, 0x1903);
pub const GL_RED_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F90, .hexadecimal);
pub const GL_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930B, .hexadecimal);
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930A, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A0, .hexadecimal);
pub const GL_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A1, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const GL_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9306, .hexadecimal);
pub const GL_REFERENCE_PLANE_EQUATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817E, .hexadecimal);
pub const GL_REFERENCE_PLANE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817D, .hexadecimal);
pub const GL_REFLECTION_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REFLECTION_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REFLECTION_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REGISTER_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8522, .hexadecimal);
pub const GL_REG_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8921, .hexadecimal);
pub const GL_REG_10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892B, .hexadecimal);
pub const GL_REG_11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892C, .hexadecimal);
pub const GL_REG_12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892D, .hexadecimal);
pub const GL_REG_13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892E, .hexadecimal);
pub const GL_REG_14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892F, .hexadecimal);
pub const GL_REG_15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8930, .hexadecimal);
pub const GL_REG_16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8931, .hexadecimal);
pub const GL_REG_17_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8932, .hexadecimal);
pub const GL_REG_18_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8933, .hexadecimal);
pub const GL_REG_19_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8934, .hexadecimal);
pub const GL_REG_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8922, .hexadecimal);
pub const GL_REG_20_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8935, .hexadecimal);
pub const GL_REG_21_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8936, .hexadecimal);
pub const GL_REG_22_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8937, .hexadecimal);
pub const GL_REG_23_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8938, .hexadecimal);
pub const GL_REG_24_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8939, .hexadecimal);
pub const GL_REG_25_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893A, .hexadecimal);
pub const GL_REG_26_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893B, .hexadecimal);
pub const GL_REG_27_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893C, .hexadecimal);
pub const GL_REG_28_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893D, .hexadecimal);
pub const GL_REG_29_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893E, .hexadecimal);
pub const GL_REG_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8923, .hexadecimal);
pub const GL_REG_30_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893F, .hexadecimal);
pub const GL_REG_31_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8940, .hexadecimal);
pub const GL_REG_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8924, .hexadecimal);
pub const GL_REG_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8925, .hexadecimal);
pub const GL_REG_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8926, .hexadecimal);
pub const GL_REG_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8927, .hexadecimal);
pub const GL_REG_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8928, .hexadecimal);
pub const GL_REG_8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8929, .hexadecimal);
pub const GL_REG_9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892A, .hexadecimal);
pub const GL_RELATIVE_ARC_TO_NV = @as(c_int, 0xFF);
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = @as(c_int, 0x1B);
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = @as(c_int, 0x0D);
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x07);
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x17);
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = @as(c_int, 0x19);
pub const GL_RELATIVE_LINE_TO_NV = @as(c_int, 0x05);
pub const GL_RELATIVE_MOVE_TO_NV = @as(c_int, 0x03);
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0B);
pub const GL_RELATIVE_RECT_NV = @as(c_int, 0xF7);
pub const GL_RELATIVE_ROUNDED_RECT2_NV = @as(c_int, 0xEB);
pub const GL_RELATIVE_ROUNDED_RECT4_NV = @as(c_int, 0xED);
pub const GL_RELATIVE_ROUNDED_RECT8_NV = @as(c_int, 0xEF);
pub const GL_RELATIVE_ROUNDED_RECT_NV = @as(c_int, 0xE9);
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x13);
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = @as(c_int, 0x15);
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x11);
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0F);
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = @as(c_int, 0x09);
pub const GL_RELEASED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A19, .hexadecimal);
pub const GL_RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E10, .hexadecimal);
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FD, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B2, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_RENDER_GPU_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9558, .hexadecimal);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C3, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C2, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C0, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C1, .hexadecimal);
pub const GL_REPLACEMENT_CODE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D8, .hexadecimal);
pub const GL_REPLACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8062, .hexadecimal);
pub const GL_REPLACE_MIDDLE_SUN = @as(c_int, 0x0002);
pub const GL_REPLACE_OLDEST_SUN = @as(c_int, 0x0003);
pub const GL_REPLACE_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874B, .hexadecimal);
pub const GL_REPLICATE_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hexadecimal);
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937F, .hexadecimal);
pub const GL_RESAMPLE_AVERAGE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8988, .hexadecimal);
pub const GL_RESAMPLE_DECIMATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8989, .hexadecimal);
pub const GL_RESAMPLE_DECIMATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8430, .hexadecimal);
pub const GL_RESAMPLE_REPLICATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8986, .hexadecimal);
pub const GL_RESAMPLE_REPLICATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8433, .hexadecimal);
pub const GL_RESAMPLE_ZERO_FILL_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8987, .hexadecimal);
pub const GL_RESAMPLE_ZERO_FILL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8434, .hexadecimal);
pub const GL_RESCALE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_RESTART_PATH_NV = @as(c_int, 0xF0);
pub const GL_RESTART_SUN = @as(c_int, 0x0001);
pub const GL_RETAINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1B, .hexadecimal);
pub const GL_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hexadecimal);
pub const GL_RG16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hexadecimal);
pub const GL_RG16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const GL_RG16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const GL_RG16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8239, .hexadecimal);
pub const GL_RG16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823A, .hexadecimal);
pub const GL_RG16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hexadecimal);
pub const GL_RG32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const GL_RG32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const GL_RG32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823B, .hexadecimal);
pub const GL_RG32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823C, .hexadecimal);
pub const GL_RG8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const GL_RG8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8237, .hexadecimal);
pub const GL_RG8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8238, .hexadecimal);
pub const GL_RG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const GL_RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hexadecimal);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGB10_A2UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906F, .hexadecimal);
pub const GL_RGB10_A2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGB10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGB16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const GL_RGB16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const GL_RGB16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const GL_RGB16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const GL_RGB16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGB16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hexadecimal);
pub const GL_RGB2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804E, .hexadecimal);
pub const GL_RGB32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const GL_RGB32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const GL_RGB32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const GL_RGB32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const GL_RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A1, .hexadecimal);
pub const GL_RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hexadecimal);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGB5_A1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGB5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const GL_RGB8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const GL_RGB8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const GL_RGB8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const GL_RGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F96, .hexadecimal);
pub const GL_RGB9_E5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_RGB9_E5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_RGBA16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const GL_RGBA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const GL_RGBA16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const GL_RGBA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const GL_RGBA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_RGBA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hexadecimal);
pub const GL_RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const GL_RGBA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const GL_RGBA32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const GL_RGBA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGBA4_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A5, .hexadecimal);
pub const GL_RGBA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGBA4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A3, .hexadecimal);
pub const GL_RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGBA8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const GL_RGBA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const GL_RGBA8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const GL_RGBA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const GL_RGBA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hexadecimal);
pub const GL_RGBA_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A4, .hexadecimal);
pub const GL_RGBA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA_FLOAT_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hexadecimal);
pub const GL_RGBA_FLOAT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hexadecimal);
pub const GL_RGBA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const GL_RGBA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const GL_RGBA_INTEGER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9E, .hexadecimal);
pub const GL_RGBA_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A2, .hexadecimal);
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3C, .hexadecimal);
pub const GL_RGBA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F93, .hexadecimal);
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D9, .hexadecimal);
pub const GL_RGB_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1F, .hexadecimal);
pub const GL_RGB_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const GL_RGB_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const GL_RGB_RAW_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A51, .hexadecimal);
pub const GL_RGB_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A0, .hexadecimal);
pub const GL_RGB_SCALE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_RGB_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_RGB_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F92, .hexadecimal);
pub const GL_RG_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8228, .hexadecimal);
pub const GL_RG_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F91, .hexadecimal);
pub const GL_RIGHT = @as(c_int, 0x0407);
pub const GL_ROUNDED_RECT2_NV = @as(c_int, 0xEA);
pub const GL_ROUNDED_RECT4_NV = @as(c_int, 0xEC);
pub const GL_ROUNDED_RECT8_NV = @as(c_int, 0xEE);
pub const GL_ROUNDED_RECT_NV = @as(c_int, 0xE8);
pub const GL_ROUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A4, .hexadecimal);
pub const GL_SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hexadecimal);
pub const GL_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_1D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_2D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9108, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hexadecimal);
pub const GL_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_3D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8919, .hexadecimal);
pub const GL_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9001, .hexadecimal);
pub const GL_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_CUBE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_SAMPLER_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9155, .hexadecimal);
pub const GL_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E56, .hexadecimal);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLES_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B4, .hexadecimal);
pub const GL_SAMPLES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const GL_SAMPLES_PASSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const GL_SAMPLES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B3, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hexadecimal);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hexadecimal);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hexadecimal);
pub const GL_SAMPLE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const GL_SAMPLE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_MASK_INVERT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_MASK_INVERT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const GL_SAMPLE_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_PATTERN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hexadecimal);
pub const GL_SAMPLE_PATTERN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hexadecimal);
pub const GL_SAMPLE_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_SHADING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_SAMPLE_SHADING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_SATURATE_BIT_ATI = @as(c_int, 0x00000040);
pub const GL_SCALAR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BE, .hexadecimal);
pub const GL_SCALEBIAS_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8322, .hexadecimal);
pub const GL_SCALED_RESOLVE_FASTEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BA, .hexadecimal);
pub const GL_SCALED_RESOLVE_NICEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BB, .hexadecimal);
pub const GL_SCALE_BY_FOUR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853F, .hexadecimal);
pub const GL_SCALE_BY_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8540, .hexadecimal);
pub const GL_SCALE_BY_TWO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853E, .hexadecimal);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9556, .hexadecimal);
pub const GL_SCISSOR_COMMAND_NV = @as(c_int, 0x0011);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9555, .hexadecimal);
pub const GL_SCREEN_COORDINATES_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8490, .hexadecimal);
pub const GL_SCREEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_SCREEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F27, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F31, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103077, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103087, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const GL_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852D, .hexadecimal);
pub const GL_SECONDARY_INTERPOLATOR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896D, .hexadecimal);
pub const GL_SEMAPHORE_TYPE_BINARY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B4, .hexadecimal);
pub const GL_SEMAPHORE_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B3, .hexadecimal);
pub const GL_SEMAPHORE_TYPE_TIMELINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B5, .hexadecimal);
pub const GL_SEPARABLE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const GL_SET = @as(c_int, 0x150F);
pub const GL_SET_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874A, .hexadecimal);
pub const GL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hexadecimal);
pub const GL_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hexadecimal);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const GL_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hexadecimal);
pub const GL_SHADER_CONSISTENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DD, .hexadecimal);
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = @as(c_int, 0x00000010);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = @as(c_int, 0x00000020);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = @as(c_int, 0x00000020);
pub const GL_SHADER_IMAGE_ATOMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A6, .hexadecimal);
pub const GL_SHADER_IMAGE_LOAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A4, .hexadecimal);
pub const GL_SHADER_IMAGE_STORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A5, .hexadecimal);
pub const GL_SHADER_INCLUDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAE, .hexadecimal);
pub const GL_SHADER_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hexadecimal);
pub const GL_SHADER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hexadecimal);
pub const GL_SHADER_OPERATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DF, .hexadecimal);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const GL_SHADER_STORAGE_BARRIER_BIT = @as(c_int, 0x00002000);
pub const GL_SHADER_STORAGE_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E6, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D2, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D3, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DF, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D5, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D4, .hexadecimal);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GL_SHADING_LANGUAGE_VERSION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956F, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9566, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9567, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9568, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9569, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956A, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956B, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9565, .hexadecimal);
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956C, .hexadecimal);
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956D, .hexadecimal);
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956E, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955B, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9563, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B2, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955E, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B1, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955D, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955C, .hexadecimal);
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9564, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AE, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AF, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B0, .hexadecimal);
pub const GL_SHADOW_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hexadecimal);
pub const GL_SHADOW_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834E, .hexadecimal);
pub const GL_SHARED_EDGE_NV = @as(c_int, 0xC0);
pub const GL_SHARED_TEXTURE_PALETTE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FB, .hexadecimal);
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B0, .hexadecimal);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hexadecimal);
pub const GL_SIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8706, .hexadecimal);
pub const GL_SIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8705, .hexadecimal);
pub const GL_SIGNED_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FA, .hexadecimal);
pub const GL_SIGNED_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885F, .hexadecimal);
pub const GL_SIGNED_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F9, .hexadecimal);
pub const GL_SIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853C, .hexadecimal);
pub const GL_SIGNED_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8708, .hexadecimal);
pub const GL_SIGNED_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8707, .hexadecimal);
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8704, .hexadecimal);
pub const GL_SIGNED_LUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8702, .hexadecimal);
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8703, .hexadecimal);
pub const GL_SIGNED_LUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8701, .hexadecimal);
pub const GL_SIGNED_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853D, .hexadecimal);
pub const GL_SIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9C, .hexadecimal);
pub const GL_SIGNED_RGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FF, .hexadecimal);
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870D, .hexadecimal);
pub const GL_SIGNED_RGBA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FC, .hexadecimal);
pub const GL_SIGNED_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FB, .hexadecimal);
pub const GL_SIGNED_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FE, .hexadecimal);
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870C, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AC, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AE, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AD, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AF, .hexadecimal);
pub const GL_SINGLE_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const GL_SKIP_COMPONENTS1_NV = -@as(c_int, 6);
pub const GL_SKIP_COMPONENTS2_NV = -@as(c_int, 5);
pub const GL_SKIP_COMPONENTS3_NV = -@as(c_int, 4);
pub const GL_SKIP_COMPONENTS4_NV = -@as(c_int, 3);
pub const GL_SKIP_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4A, .hexadecimal);
pub const GL_SKIP_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A9, .hexadecimal);
pub const GL_SLICE_ACCUM_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CC, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x12);
pub const GL_SMALL_CW_ARC_TO_NV = @as(c_int, 0x14);
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x10);
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0E);
pub const GL_SM_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933B, .hexadecimal);
pub const GL_SOFTLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_SOFTLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_SOURCE0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SOURCE2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SOURCE2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858B, .hexadecimal);
pub const GL_SOURCE3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8583, .hexadecimal);
pub const GL_SPARE0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852E, .hexadecimal);
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8532, .hexadecimal);
pub const GL_SPARE1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852F, .hexadecimal);
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F8, .hexadecimal);
pub const GL_SPARSE_STORAGE_BIT_ARB = @as(c_int, 0x0400);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hexadecimal);
pub const GL_SPIR_V_BINARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const GL_SPIR_V_BINARY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const GL_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9553, .hexadecimal);
pub const GL_SPRITE_AXIAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814C, .hexadecimal);
pub const GL_SPRITE_AXIS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814A, .hexadecimal);
pub const GL_SPRITE_EYE_ALIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814E, .hexadecimal);
pub const GL_SPRITE_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8149, .hexadecimal);
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814D, .hexadecimal);
pub const GL_SPRITE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8148, .hexadecimal);
pub const GL_SPRITE_TRANSLATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814B, .hexadecimal);
pub const GL_SQUARE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A3, .hexadecimal);
pub const GL_SR8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBD, .hexadecimal);
pub const GL_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hexadecimal);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_SRC_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928E, .hexadecimal);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_SRC_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928A, .hexadecimal);
pub const GL_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9286, .hexadecimal);
pub const GL_SRC_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928C, .hexadecimal);
pub const GL_SRC_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9288, .hexadecimal);
pub const GL_SRG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBE, .hexadecimal);
pub const GL_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GL_SRGB8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GL_SRGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB_DECODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8299, .hexadecimal);
pub const GL_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8297, .hexadecimal);
pub const GL_SRGB_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8298, .hexadecimal);
pub const GL_STACK_OVERFLOW = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const GL_STANDARD_FONT_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936C, .hexadecimal);
pub const GL_STANDARD_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9072, .hexadecimal);
pub const GL_STATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8760, .hexadecimal);
pub const GL_STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_STATIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_VERTEX_ARRAY_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103061, .decimal);
pub const GL_STENCIL = @as(c_int, 0x1802);
pub const GL_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_FUNC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874D, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hexadecimal);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hexadecimal);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F3, .hexadecimal);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8285, .hexadecimal);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_INDEX = @as(c_int, 0x1901);
pub const GL_STENCIL_INDEX1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const GL_STENCIL_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const GL_STENCIL_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874C, .hexadecimal);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_REF_COMMAND_NV = @as(c_int, 0x000C);
pub const GL_STENCIL_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8288, .hexadecimal);
pub const GL_STENCIL_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932E, .hexadecimal);
pub const GL_STENCIL_TAG_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F2, .hexadecimal);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8910, .hexadecimal);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_STEREO = @as(c_int, 0x0C33);
pub const GL_STORAGE_CACHED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BE, .hexadecimal);
pub const GL_STORAGE_CLIENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B4, .hexadecimal);
pub const GL_STORAGE_PRIVATE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BD, .hexadecimal);
pub const GL_STORAGE_SHARED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BF, .hexadecimal);
pub const GL_STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STREAM_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_RASTERIZATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A0, .hexadecimal);
pub const GL_STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STREAM_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A216, .hexadecimal);
pub const GL_STRICT_LIGHTING_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A217, .hexadecimal);
pub const GL_STRICT_SCISSOR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A218, .hexadecimal);
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = @as(c_int, 0x00000004);
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = @as(c_int, 0x00000001);
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = @as(c_int, 0x00000040);
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @as(c_int, 0x00000100);
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = @as(c_int, 0x00000080);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = @as(c_int, 0x00000010);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = @as(c_int, 0x00000020);
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9535, .hexadecimal);
pub const GL_SUBGROUP_SIZE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9532, .hexadecimal);
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9534, .hexadecimal);
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9533, .hexadecimal);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9347, .hexadecimal);
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9348, .hexadecimal);
pub const GL_SUBSAMPLE_DISTANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883F, .hexadecimal);
pub const GL_SUBTRACT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const GL_SUB_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8965, .hexadecimal);
pub const GL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902F, .hexadecimal);
pub const GL_SUPERSAMPLE_SCALE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9372, .hexadecimal);
pub const GL_SUPERSAMPLE_SCALE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9373, .hexadecimal);
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B7, .hexadecimal);
pub const GL_SURFACE_MAPPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8700, .hexadecimal);
pub const GL_SURFACE_REGISTERED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FD, .hexadecimal);
pub const GL_SURFACE_STATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EB, .hexadecimal);
pub const GL_SWIZZLE_STQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8977, .hexadecimal);
pub const GL_SWIZZLE_STQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8979, .hexadecimal);
pub const GL_SWIZZLE_STRQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897A, .hexadecimal);
pub const GL_SWIZZLE_STRQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897B, .hexadecimal);
pub const GL_SWIZZLE_STR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8976, .hexadecimal);
pub const GL_SWIZZLE_STR_DR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8978, .hexadecimal);
pub const GL_SYNC_CL_EVENT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8240, .hexadecimal);
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8241, .hexadecimal);
pub const GL_SYNC_CONDITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hexadecimal);
pub const GL_SYNC_FENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hexadecimal);
pub const GL_SYNC_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hexadecimal);
pub const GL_SYNC_FLUSH_COMMANDS_BIT = @as(c_int, 0x00000001);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hexadecimal);
pub const GL_SYNC_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hexadecimal);
pub const GL_SYNC_X11_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90E1, .hexadecimal);
pub const GL_SYSTEM_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9073, .hexadecimal);
pub const GL_T2F_IUI_N3F_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B3, .hexadecimal);
pub const GL_T2F_IUI_N3F_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B4, .hexadecimal);
pub const GL_T2F_IUI_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B1, .hexadecimal);
pub const GL_T2F_IUI_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B2, .hexadecimal);
pub const GL_TABLE_TOO_LARGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hexadecimal);
pub const GL_TANGENT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8439, .hexadecimal);
pub const GL_TANGENT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8442, .hexadecimal);
pub const GL_TANGENT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843F, .hexadecimal);
pub const GL_TANGENT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843E, .hexadecimal);
pub const GL_TASK_SHADER_BIT_NV = @as(c_int, 0x00000080);
pub const GL_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955A, .hexadecimal);
pub const GL_TASK_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957D, .hexadecimal);
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957F, .hexadecimal);
pub const GL_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953F, .hexadecimal);
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = @as(c_int, 0x0000);
pub const GL_TESSELLATION_FACTOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9005, .hexadecimal);
pub const GL_TESSELLATION_MODE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9004, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_CONTROL_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891E, .hexadecimal);
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C74, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_BIT = @as(c_int, 0x00000008);
pub const GL_TESS_CONTROL_SHADER_PATCHES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const GL_TESS_CONTROL_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E9, .hexadecimal);
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EF, .hexadecimal);
pub const GL_TESS_CONTROL_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829C, .hexadecimal);
pub const GL_TESS_EVALUATION_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891F, .hexadecimal);
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C75, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_BIT = @as(c_int, 0x00000010);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GL_TESS_EVALUATION_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EA, .hexadecimal);
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F0, .hexadecimal);
pub const GL_TESS_EVALUATION_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829D, .hexadecimal);
pub const GL_TESS_GEN_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_TESS_GEN_SPACING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TEXCOORD1_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_TEXCOORD2_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_TEXCOORD3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const GL_TEXCOORD4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_TEXTURE31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_TEXTURE3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE_1D = @as(c_int, 0x0DE0);
pub const GL_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const GL_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const GL_TEXTURE_1D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875D, .hexadecimal);
pub const GL_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8759, .hexadecimal);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_TEXTURE_2D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hexadecimal);
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875E, .hexadecimal);
pub const GL_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875A, .hexadecimal);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_TEXTURE_3D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_TEXTURE_4DSIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8136, .hexadecimal);
pub const GL_TEXTURE_4D_BINDING_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814F, .hexadecimal);
pub const GL_TEXTURE_4D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8134, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const GL_TEXTURE_ALPHA_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const GL_TEXTURE_APPLICATION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834F, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9104, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hexadecimal);
pub const GL_TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E53, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const GL_TEXTURE_BLUE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const GL_TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER_VALUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871A, .hexadecimal);
pub const GL_TEXTURE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8171, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8176, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8172, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8175, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8173, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8174, .hexadecimal);
pub const GL_TEXTURE_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9046, .hexadecimal);
pub const GL_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BC, .hexadecimal);
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EF, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819B, .hexadecimal);
pub const GL_TEXTURE_COMPARE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819A, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B2, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B3, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B1, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D6, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F25, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808B, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2F, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103074, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103084, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F8, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const GL_TEXTURE_COORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C79, .hexadecimal);
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9045, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884F, .hexadecimal);
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = @as(c_int, 0x00000001);
pub const GL_TEXTURE_DEFORMATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8195, .hexadecimal);
pub const GL_TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_TEXTURE_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const GL_TEXTURE_DEPTH_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const GL_TEXTURE_DS_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871D, .hexadecimal);
pub const GL_TEXTURE_DT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871E, .hexadecimal);
pub const GL_TEXTURE_ENV_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BE, .hexadecimal);
pub const GL_TEXTURE_FETCH_BARRIER_BIT = @as(c_int, 0x00000008);
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_TEXTURE_FILTER4_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8147, .hexadecimal);
pub const GL_TEXTURE_FILTER_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9107, .hexadecimal);
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888C, .hexadecimal);
pub const GL_TEXTURE_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FC, .hexadecimal);
pub const GL_TEXTURE_GATHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A2, .hexadecimal);
pub const GL_TEXTURE_GATHER_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A3, .hexadecimal);
pub const GL_TEXTURE_GEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819D, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const GL_TEXTURE_GREEN_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const GL_TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const GL_TEXTURE_HI_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871B, .hexadecimal);
pub const GL_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828F, .hexadecimal);
pub const GL_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8290, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hexadecimal);
pub const GL_TEXTURE_INDEX_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80ED, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hexadecimal);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const GL_TEXTURE_LEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819C, .hexadecimal);
pub const GL_TEXTURE_LIGHTING_MODE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8167, .hexadecimal);
pub const GL_TEXTURE_LIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8350, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8190, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818E, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818F, .hexadecimal);
pub const GL_TEXTURE_LO_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871C, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hexadecimal);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MAG_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871F, .hexadecimal);
pub const GL_TEXTURE_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8351, .hexadecimal);
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8352, .hexadecimal);
pub const GL_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836B, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8369, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836A, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FF, .hexadecimal);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MIN_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812E, .hexadecimal);
pub const GL_TEXTURE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AF, .hexadecimal);
pub const GL_TEXTURE_POST_SPECULAR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8168, .hexadecimal);
pub const GL_TEXTURE_PRE_SPECULAR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8169, .hexadecimal);
pub const GL_TEXTURE_PRIORITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B7, .hexadecimal);
pub const GL_TEXTURE_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B8, .hexadecimal);
pub const GL_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_REDUCTION_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hexadecimal);
pub const GL_TEXTURE_REDUCTION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const GL_TEXTURE_RED_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E54, .hexadecimal);
pub const GL_TEXTURE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E55, .hexadecimal);
pub const GL_TEXTURE_RESIDENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const GL_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9106, .hexadecimal);
pub const GL_TEXTURE_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DE, .hexadecimal);
pub const GL_TEXTURE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A1, .hexadecimal);
pub const GL_TEXTURE_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const GL_TEXTURE_SHARED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const GL_TEXTURE_SPARSE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hexadecimal);
pub const GL_TEXTURE_SRGB_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A48, .hexadecimal);
pub const GL_TEXTURE_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const GL_TEXTURE_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const GL_TEXTURE_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BC, .hexadecimal);
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_TEXTURE_SWIZZLE_A = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_A_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_B = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_B_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_G = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_G_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const GL_TEXTURE_TARGET = @as(c_int, 0x1006);
pub const GL_TEXTURE_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9580, .hexadecimal);
pub const GL_TEXTURE_TOO_LARGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8065, .hexadecimal);
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888F, .hexadecimal);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = @as(c_int, 0x00000100);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000100);
pub const GL_TEXTURE_VIEW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B5, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const GL_TEXTURE_WRAP_Q_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8137, .hexadecimal);
pub const GL_TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_TEXTURE_WRAP_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_TEXT_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8200, .hexadecimal);
pub const GL_TILE_RASTER_ORDER_FIXED_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB8, .hexadecimal);
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB9, .hexadecimal);
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBA, .hexadecimal);
pub const GL_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9583, .hexadecimal);
pub const GL_TIMELINE_SEMAPHORE_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hexadecimal);
pub const GL_TIMEOUT_EXPIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hexadecimal);
pub const GL_TIMEOUT_IGNORED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFFFFFFFFFF, .hexadecimal);
pub const GL_TIMESTAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_TIME_ELAPSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_TIME_ELAPSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_TOP_LEVEL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930C, .hexadecimal);
pub const GL_TOP_LEVEL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930D, .hexadecimal);
pub const GL_TRACK_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8648, .hexadecimal);
pub const GL_TRACK_MATRIX_TRANSFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8649, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = @as(c_int, 0x00000800);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = @as(c_int, 0x00000800);
pub const GL_TRANSFORM_FEEDBACK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934B, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934C, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C86, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F4, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const GL_TRANSFORM_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B1, .hexadecimal);
pub const GL_TRANSLATE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9090, .hexadecimal);
pub const GL_TRANSLATE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9091, .hexadecimal);
pub const GL_TRANSLATE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908E, .hexadecimal);
pub const GL_TRANSLATE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908F, .hexadecimal);
pub const GL_TRANSPOSE_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9096, .hexadecimal);
pub const GL_TRANSPOSE_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9098, .hexadecimal);
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B7, .hexadecimal);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862C, .hexadecimal);
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2E, .hexadecimal);
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_TRIANGLES_ADJACENCY = @as(c_int, 0x000C);
pub const GL_TRIANGLES_ADJACENCY_ARB = @as(c_int, 0x000C);
pub const GL_TRIANGLES_ADJACENCY_EXT = @as(c_int, 0x000C);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_TRIANGLE_LIST_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D7, .hexadecimal);
pub const GL_TRIANGLE_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8615, .hexadecimal);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_TRIANGLE_STRIP_ADJACENCY = @as(c_int, 0x000D);
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = @as(c_int, 0x000D);
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000D);
pub const GL_TRIANGULAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A5, .hexadecimal);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FA, .hexadecimal);
pub const GL_UNCORRELATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9282, .hexadecimal);
pub const GL_UNDEFINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1C, .hexadecimal);
pub const GL_UNDEFINED_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const GL_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E1, .hexadecimal);
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = @as(c_int, 0x000A);
pub const GL_UNIFORM_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3C, .hexadecimal);
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DA, .hexadecimal);
pub const GL_UNIFORM_BARRIER_BIT = @as(c_int, 0x00000004);
pub const GL_UNIFORM_BARRIER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_UNIFORM_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E2, .hexadecimal);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A42, .hexadecimal);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A43, .hexadecimal);
pub const GL_UNIFORM_BLOCK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3F, .hexadecimal);
pub const GL_UNIFORM_BLOCK_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A40, .hexadecimal);
pub const GL_UNIFORM_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3A, .hexadecimal);
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A41, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EC, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A46, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A45, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959C, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959D, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F0, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F1, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A44, .hexadecimal);
pub const GL_UNIFORM_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A11, .hexadecimal);
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936F, .hexadecimal);
pub const GL_UNIFORM_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A28, .hexadecimal);
pub const GL_UNIFORM_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEF, .hexadecimal);
pub const GL_UNIFORM_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEE, .hexadecimal);
pub const GL_UNIFORM_BUFFER_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9370, .hexadecimal);
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A34, .hexadecimal);
pub const GL_UNIFORM_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2A, .hexadecimal);
pub const GL_UNIFORM_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A29, .hexadecimal);
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936E, .hexadecimal);
pub const GL_UNIFORM_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3E, .hexadecimal);
pub const GL_UNIFORM_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3D, .hexadecimal);
pub const GL_UNIFORM_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A39, .hexadecimal);
pub const GL_UNIFORM_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3B, .hexadecimal);
pub const GL_UNIFORM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A38, .hexadecimal);
pub const GL_UNIFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A37, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B2, .hexadecimal);
pub const GL_UNPACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800F, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9129, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9128, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912A, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9127, .hexadecimal);
pub const GL_UNPACK_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D5, .hexadecimal);
pub const GL_UNPACK_IMAGE_DEPTH_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8133, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const GL_UNPACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8985, .hexadecimal);
pub const GL_UNPACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842F, .hexadecimal);
pub const GL_UNPACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A16, .hexadecimal);
pub const GL_UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const GL_UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_VOLUMES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8132, .hexadecimal);
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A1, .hexadecimal);
pub const GL_UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const GL_UNSIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hexadecimal);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hexadecimal);
pub const GL_UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8536, .hexadecimal);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_UNSIGNED_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF0, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF1, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF2, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF3, .hexadecimal);
pub const GL_UNSIGNED_INT64_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC2, .hexadecimal);
pub const GL_UNSIGNED_INT64_ARB = @as(c_int, 0x140F);
pub const GL_UNSIGNED_INT64_NV = @as(c_int, 0x140F);
pub const GL_UNSIGNED_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hexadecimal);
pub const GL_UNSIGNED_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEC, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FED, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEE, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEF, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DB, .hexadecimal);
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DB, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DA, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910A, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9003, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E58, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const GL_UNSIGNED_INVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8537, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hexadecimal);
pub const GL_UPLOAD_GPU_MASK_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954A, .hexadecimal);
pub const GL_UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const GL_USE_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AA, .hexadecimal);
pub const GL_UTF16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909B, .hexadecimal);
pub const GL_UTF8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909A, .hexadecimal);
pub const GL_UUID_SIZE_EXT = @as(c_int, 16);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_VARIABLE_A_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8523, .hexadecimal);
pub const GL_VARIABLE_B_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8524, .hexadecimal);
pub const GL_VARIABLE_C_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8525, .hexadecimal);
pub const GL_VARIABLE_D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8526, .hexadecimal);
pub const GL_VARIABLE_E_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8527, .hexadecimal);
pub const GL_VARIABLE_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8528, .hexadecimal);
pub const GL_VARIABLE_G_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8529, .hexadecimal);
pub const GL_VARIANT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E8, .hexadecimal);
pub const GL_VARIANT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E9, .hexadecimal);
pub const GL_VARIANT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E6, .hexadecimal);
pub const GL_VARIANT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E7, .hexadecimal);
pub const GL_VARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E5, .hexadecimal);
pub const GL_VARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C1, .hexadecimal);
pub const GL_VARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E4, .hexadecimal);
pub const GL_VBO_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FB, .hexadecimal);
pub const GL_VECTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BF, .hexadecimal);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_VERTEX23_BIT_PGI = @as(c_int, 0x00000004);
pub const GL_VERTEX4_BIT_PGI = @as(c_int, 0x00000008);
pub const GL_VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_VERTEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F21, .hexadecimal);
pub const GL_VERTEX_ARRAY_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const GL_VERTEX_ARRAY_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const GL_VERTEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807D, .hexadecimal);
pub const GL_VERTEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_VERTEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2B, .hexadecimal);
pub const GL_VERTEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103070, .decimal);
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103080, .decimal);
pub const GL_VERTEX_ARRAY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hexadecimal);
pub const GL_VERTEX_ARRAY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hexadecimal);
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F5, .hexadecimal);
pub const GL_VERTEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8533, .hexadecimal);
pub const GL_VERTEX_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hexadecimal);
pub const GL_VERTEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const GL_VERTEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8650, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865B, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865C, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865D, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8651, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8652, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8653, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8654, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8655, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8656, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8657, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8658, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8659, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F20, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = @as(c_int, 0x00000001);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D4, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A00, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A03, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A05, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A04, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A02, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A01, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A07, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A09, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A08, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A06, .hexadecimal);
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D5, .hexadecimal);
pub const GL_VERTEX_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4F, .hexadecimal);
pub const GL_VERTEX_BINDING_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D6, .hexadecimal);
pub const GL_VERTEX_BINDING_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D7, .hexadecimal);
pub const GL_VERTEX_BINDING_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D8, .hexadecimal);
pub const GL_VERTEX_BLEND_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A7, .hexadecimal);
pub const GL_VERTEX_CONSISTENT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22B, .hexadecimal);
pub const GL_VERTEX_DATA_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22A, .hexadecimal);
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A4, .hexadecimal);
pub const GL_VERTEX_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7B, .hexadecimal);
pub const GL_VERTEX_ID_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A5, .hexadecimal);
pub const GL_VERTEX_PRECLIP_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EF, .hexadecimal);
pub const GL_VERTEX_PRECLIP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EE, .hexadecimal);
pub const GL_VERTEX_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hexadecimal);
pub const GL_VERTEX_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864A, .hexadecimal);
pub const GL_VERTEX_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hexadecimal);
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA2, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_VERTEX_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_VERTEX_SHADER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8781, .hexadecimal);
pub const GL_VERTEX_SHADER_BIT = @as(c_int, 0x00000001);
pub const GL_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8780, .hexadecimal);
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CF, .hexadecimal);
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D1, .hexadecimal);
pub const GL_VERTEX_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const GL_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D3, .hexadecimal);
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D2, .hexadecimal);
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D4, .hexadecimal);
pub const GL_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D0, .hexadecimal);
pub const GL_VERTEX_SOURCE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8774, .hexadecimal);
pub const GL_VERTEX_STATE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8621, .hexadecimal);
pub const GL_VERTEX_STREAM0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876C, .hexadecimal);
pub const GL_VERTEX_STREAM1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876D, .hexadecimal);
pub const GL_VERTEX_STREAM2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876E, .hexadecimal);
pub const GL_VERTEX_STREAM3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876F, .hexadecimal);
pub const GL_VERTEX_STREAM4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8770, .hexadecimal);
pub const GL_VERTEX_STREAM5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8771, .hexadecimal);
pub const GL_VERTEX_STREAM6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8772, .hexadecimal);
pub const GL_VERTEX_STREAM7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8773, .hexadecimal);
pub const GL_VERTEX_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E8, .hexadecimal);
pub const GL_VERTEX_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EE, .hexadecimal);
pub const GL_VERTEX_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829B, .hexadecimal);
pub const GL_VERTEX_WEIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8509, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850C, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8510, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850D, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850F, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850E, .hexadecimal);
pub const GL_VERTICAL_LINE_TO_NV = @as(c_int, 0x08);
pub const GL_VERTICES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const GL_VERTICES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const GL_VIBRANCE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8719, .hexadecimal);
pub const GL_VIBRANCE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8713, .hexadecimal);
pub const GL_VIDEO_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9021, .hexadecimal);
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902D, .hexadecimal);
pub const GL_VIDEO_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9020, .hexadecimal);
pub const GL_VIDEO_BUFFER_PITCH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9028, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903B, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903A, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9039, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9038, .hexadecimal);
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903C, .hexadecimal);
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9026, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9029, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902A, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902B, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902C, .hexadecimal);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_VIEWPORT_BOUNDS_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_VIEWPORT_COMMAND_NV = @as(c_int, 0x0010);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937C, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937D, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937E, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9357, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9351, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9353, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9355, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9356, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9350, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9352, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9354, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935B, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9358, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9359, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935A, .hexadecimal);
pub const GL_VIEW_CLASS_128_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C4, .hexadecimal);
pub const GL_VIEW_CLASS_16_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CA, .hexadecimal);
pub const GL_VIEW_CLASS_24_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C9, .hexadecimal);
pub const GL_VIEW_CLASS_32_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C8, .hexadecimal);
pub const GL_VIEW_CLASS_48_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C7, .hexadecimal);
pub const GL_VIEW_CLASS_64_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C6, .hexadecimal);
pub const GL_VIEW_CLASS_8_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CB, .hexadecimal);
pub const GL_VIEW_CLASS_96_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C5, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9393, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9390, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9391, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9392, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9394, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9395, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9388, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9389, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938A, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938B, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938C, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938D, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938E, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938F, .hexadecimal);
pub const GL_VIEW_CLASS_BPTC_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D3, .hexadecimal);
pub const GL_VIEW_CLASS_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D2, .hexadecimal);
pub const GL_VIEW_CLASS_EAC_R11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9383, .hexadecimal);
pub const GL_VIEW_CLASS_EAC_RG11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9384, .hexadecimal);
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9387, .hexadecimal);
pub const GL_VIEW_CLASS_ETC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9385, .hexadecimal);
pub const GL_VIEW_CLASS_ETC2_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9386, .hexadecimal);
pub const GL_VIEW_CLASS_RGTC1_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D0, .hexadecimal);
pub const GL_VIEW_CLASS_RGTC2_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D1, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CC, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CD, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CE, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CF, .hexadecimal);
pub const GL_VIEW_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B6, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_VIVIDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A6, .hexadecimal);
pub const GL_VOLATILE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1A, .hexadecimal);
pub const GL_WAIT_FAILED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hexadecimal);
pub const GL_WARPS_PER_SM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933A, .hexadecimal);
pub const GL_WARP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9339, .hexadecimal);
pub const GL_WEIGHTED_AVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hexadecimal);
pub const GL_WEIGHTED_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hexadecimal);
pub const GL_WEIGHT_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_WEIGHT_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hexadecimal);
pub const GL_WEIGHT_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hexadecimal);
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hexadecimal);
pub const GL_WEIGHT_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hexadecimal);
pub const GL_WEIGHT_SUM_UNITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A6, .hexadecimal);
pub const GL_WIDE_LINE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A222, .hexadecimal);
pub const GL_WINDOW_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F12, .hexadecimal);
pub const GL_WINDOW_RECTANGLE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F13, .hexadecimal);
pub const GL_WRAP_BORDER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D4, .hexadecimal);
pub const GL_WRITE_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BE, .hexadecimal);
pub const GL_WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_WRITE_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887A, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8878, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887C, .hexadecimal);
pub const GL_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D8, .hexadecimal);
pub const GL_XOR = @as(c_int, 0x1506);
pub const GL_XOR_NV = @as(c_int, 0x1506);
pub const GL_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D5, .hexadecimal);
pub const GL_YCBAYCR8A_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9032, .hexadecimal);
pub const GL_YCBCR_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B9, .hexadecimal);
pub const GL_YCBCR_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8757, .hexadecimal);
pub const GL_YCBYCR8_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9031, .hexadecimal);
pub const GL_YCRCBA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8319, .hexadecimal);
pub const GL_YCRCB_422_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BB, .hexadecimal);
pub const GL_YCRCB_444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BC, .hexadecimal);
pub const GL_YCRCB_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8318, .hexadecimal);
pub const GL_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D6, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9036, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9037, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9035, .hexadecimal);
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9034, .hexadecimal);
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9033, .hexadecimal);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_ZERO_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DD, .hexadecimal);
pub const GL_ZERO_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hexadecimal);
pub const GL_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D7, .hexadecimal);
pub const __khrplatform_h_ = "";
pub const KHRONOS_APIENTRY = __stdcall;
pub const KHRONOS_APIATTRIBUTES = "";
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = "";
pub const _INC_CRTDEFS = "";
pub const _INC_CORECRT = "";
pub const _INC__MINGW_H = "";
pub const _INC_CRTDEFS_MACRO = "";
pub inline fn __MINGW64_STRINGIFY(x: anytype) @TypeOf(__STRINGIFY(x)) {
    return __STRINGIFY(x);
}
pub const __MINGW64_VERSION_MAJOR = @as(c_int, 10);
pub const __MINGW64_VERSION_MINOR = @as(c_int, 0);
pub const __MINGW64_VERSION_BUGFIX = @as(c_int, 0);
pub const __MINGW64_VERSION_RC = @as(c_int, 0);
pub const __MINGW64_VERSION_STATE = "alpha";
pub const __MINGW32_MAJOR_VERSION = @as(c_int, 3);
pub const __MINGW32_MINOR_VERSION = @as(c_int, 11);
pub const _M_AMD64 = @as(c_int, 100);
pub const _M_X64 = @as(c_int, 100);
pub const @"_" = @as(c_int, 1);
pub const __MINGW_USE_UNDERSCORE_PREFIX = @as(c_int, 0);
pub inline fn __MINGW_USYMBOL(sym: anytype) @TypeOf(sym) {
    return sym;
}
pub const __C89_NAMELESS = __MINGW_EXTENSION;
pub const __C89_NAMELESSSTRUCTNAME = "";
pub const __C89_NAMELESSSTRUCTNAME1 = "";
pub const __C89_NAMELESSSTRUCTNAME2 = "";
pub const __C89_NAMELESSSTRUCTNAME3 = "";
pub const __C89_NAMELESSSTRUCTNAME4 = "";
pub const __C89_NAMELESSSTRUCTNAME5 = "";
pub const __C89_NAMELESSUNIONNAME = "";
pub const __C89_NAMELESSUNIONNAME1 = "";
pub const __C89_NAMELESSUNIONNAME2 = "";
pub const __C89_NAMELESSUNIONNAME3 = "";
pub const __C89_NAMELESSUNIONNAME4 = "";
pub const __C89_NAMELESSUNIONNAME5 = "";
pub const __C89_NAMELESSUNIONNAME6 = "";
pub const __C89_NAMELESSUNIONNAME7 = "";
pub const __C89_NAMELESSUNIONNAME8 = "";
pub const __GNU_EXTENSION = __MINGW_EXTENSION;
pub const __MINGW_HAVE_ANSI_C99_PRINTF = @as(c_int, 1);
pub const __MINGW_HAVE_WIDE_C99_PRINTF = @as(c_int, 1);
pub const __MINGW_HAVE_ANSI_C99_SCANF = @as(c_int, 1);
pub const __MINGW_HAVE_WIDE_C99_SCANF = @as(c_int, 1);
pub const __MSABI_LONG = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __MINGW_GCC_VERSION = ((__GNUC__ * @as(c_int, 10000)) + (__GNUC_MINOR__ * @as(c_int, 100))) + __GNUC_PATCHLEVEL__;
pub inline fn __MINGW_GNUC_PREREQ(major: anytype, minor: anytype) @TypeOf((__GNUC__ > major) or ((__GNUC__ == major) and (__GNUC_MINOR__ >= minor))) {
    return (__GNUC__ > major) or ((__GNUC__ == major) and (__GNUC_MINOR__ >= minor));
}
pub inline fn __MINGW_MSC_PREREQ(major: anytype, minor: anytype) @TypeOf(@as(c_int, 0)) {
    _ = @TypeOf(major);
    _ = @TypeOf(minor);
    return @as(c_int, 0);
}
pub const __MINGW_SEC_WARN_STR = "This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation";
pub const __MINGW_MSVC2005_DEPREC_STR = "This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation";
pub const __MINGW_ATTRIB_DEPRECATED_MSVC2005 = __MINGW_ATTRIB_DEPRECATED_STR(__MINGW_MSVC2005_DEPREC_STR);
pub const __MINGW_ATTRIB_DEPRECATED_SEC_WARN = __MINGW_ATTRIB_DEPRECATED_STR(__MINGW_SEC_WARN_STR);
pub const __mingw_static_ovr = __mingw_ovr;
pub const __mingw_attribute_artificial = "";
pub const __MINGW_FORTIFY_LEVEL = @as(c_int, 0);
pub const __mingw_bos_ovr = __mingw_ovr;
pub const __MINGW_FORTIFY_VA_ARG = @as(c_int, 0);
pub const _INC_MINGW_SECAPI = "";
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = @as(c_int, 0);
pub const __LONG32 = c_long;
pub const __USE_CRTIMP = @as(c_int, 1);
pub const __DECLSPEC_SUPPORTED = "";
pub const USE___UUIDOF = @as(c_int, 0);
pub const __MINGW_ATTRIB_NO_OPTIMIZE = "";
pub const __MSVCRT_VERSION__ = @as(c_int, 0x700);
pub const _WIN32_WINNT = @as(c_int, 0x0603);
pub const _INT128_DEFINED = "";
pub const __int8 = u8;
pub const __int16 = c_short;
pub const __int32 = c_int;
pub const __int64 = c_longlong;
pub const __ptr32 = "";
pub const __ptr64 = "";
pub const __unaligned = "";
pub const __w64 = "";
pub const __nothrow = "";
pub const _INC_VADEFS = "";
pub const MINGW_SDK_INIT = "";
pub const MINGW_HAS_SECURE_API = @as(c_int, 1);
pub const __STDC_SECURE_LIB__ = @as(c_long, 200411);
pub const __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
pub const MINGW_DDK_H = "";
pub const MINGW_HAS_DDK_H = @as(c_int, 1);
pub const _CRT_PACKING = @as(c_int, 8);
pub const __GNUC_VA_LIST = "";
pub const _VA_LIST_DEFINED = "";
pub inline fn _ADDRESSOF(v: anytype) @TypeOf(&v) {
    return &v;
}
pub inline fn _CRT_STRINGIZE(_Value: anytype) @TypeOf(__CRT_STRINGIZE(_Value)) {
    return __CRT_STRINGIZE(_Value);
}
pub inline fn _CRT_WIDE(_String: anytype) @TypeOf(__CRT_WIDE(_String)) {
    return __CRT_WIDE(_String);
}
pub const _W64 = "";
pub const _CRTIMP_NOIA64 = _CRTIMP;
pub const _CRTIMP2 = _CRTIMP;
pub const _CRTIMP_ALTERNATIVE = _CRTIMP;
pub const _CRT_ALTERNATIVE_IMPORTED = "";
pub const _MRTIMP2 = _CRTIMP;
pub const _DLL = "";
pub const _MT = "";
pub const _MCRTIMP = _CRTIMP;
pub const _CRTIMP_PURE = _CRTIMP;
pub const _PGLOBAL = "";
pub const _AGLOBAL = "";
pub const _SECURECRT_FILL_BUFFER_PATTERN = @as(c_int, 0xFD);
pub const _CRT_MANAGED_HEAP_DEPRECATE = "";
pub const _CONST_RETURN = "";
pub const UNALIGNED = __unaligned;
pub const __CRTDECL = __cdecl;
pub const _ARGMAX = @as(c_int, 100);
pub const _TRUNCATE = @import("std").zig.c_translation.cast(usize, -@as(c_int, 1));
pub inline fn _CRT_UNUSED(x: anytype) anyopaque {
    return @import("std").zig.c_translation.cast(anyopaque, x);
}
pub const __USE_MINGW_ANSI_STDIO = @as(c_int, 1);
pub const __ANONYMOUS_DEFINED = "";
pub const _ANONYMOUS_UNION = __MINGW_EXTENSION;
pub const _ANONYMOUS_STRUCT = __MINGW_EXTENSION;
pub const DUMMYUNIONNAME = "";
pub const DUMMYUNIONNAME1 = "";
pub const DUMMYUNIONNAME2 = "";
pub const DUMMYUNIONNAME3 = "";
pub const DUMMYUNIONNAME4 = "";
pub const DUMMYUNIONNAME5 = "";
pub const DUMMYUNIONNAME6 = "";
pub const DUMMYUNIONNAME7 = "";
pub const DUMMYUNIONNAME8 = "";
pub const DUMMYUNIONNAME9 = "";
pub const DUMMYSTRUCTNAME = "";
pub const DUMMYSTRUCTNAME1 = "";
pub const DUMMYSTRUCTNAME2 = "";
pub const DUMMYSTRUCTNAME3 = "";
pub const DUMMYSTRUCTNAME4 = "";
pub const DUMMYSTRUCTNAME5 = "";
pub const __MINGW_DEBUGBREAK_IMPL = !(__has_builtin(__debugbreak) != 0);
pub const _CRTNOALIAS = "";
pub const _CRTRESTRICT = "";
pub const _SIZE_T_DEFINED = "";
pub const _SSIZE_T_DEFINED = "";
pub const _RSIZE_T_DEFINED = "";
pub const _INTPTR_T_DEFINED = "";
pub const __intptr_t_defined = "";
pub const _UINTPTR_T_DEFINED = "";
pub const __uintptr_t_defined = "";
pub const _PTRDIFF_T_DEFINED = "";
pub const _PTRDIFF_T_ = "";
pub const _WCHAR_T_DEFINED = "";
pub const _WCTYPE_T_DEFINED = "";
pub const _WINT_T = "";
pub const _ERRCODE_DEFINED = "";
pub const _TIME32_T_DEFINED = "";
pub const _TIME64_T_DEFINED = "";
pub const _TIME_T_DEFINED = "";
pub const _TAGLC_ID_DEFINED = "";
pub const _THREADLOCALEINFO = "";
pub const _CRT_USE_WINAPI_FAMILY_DESKTOP_APP = "";
pub const __need_wint_t = "";
pub const __need_wchar_t = "";
pub const _WCHAR_T = "";
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -@as(c_longlong, 9223372036854775807) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hexadecimal);
pub const UINT64_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const INT_LEAST8_MIN = INT8_MIN;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const INT_FAST16_MIN = INT16_MIN;
pub const INT_FAST32_MIN = INT32_MIN;
pub const INT_FAST64_MIN = INT64_MIN;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MIN = INT64_MIN;
pub const INTPTR_MAX = INT64_MAX;
pub const UINTPTR_MAX = UINT64_MAX;
pub const INTMAX_MIN = INT64_MIN;
pub const INTMAX_MAX = INT64_MAX;
pub const UINTMAX_MAX = UINT64_MAX;
pub const PTRDIFF_MIN = INT64_MIN;
pub const PTRDIFF_MAX = INT64_MAX;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const SIZE_MAX = UINT64_MAX;
pub const WCHAR_MIN = @as(c_uint, 0);
pub const WCHAR_MAX = @as(c_uint, 0xffff);
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @as(c_uint, 0xffff);
pub inline fn INT8_C(val: anytype) @TypeOf((INT_LEAST8_MAX - INT_LEAST8_MAX) + val) {
    return (INT_LEAST8_MAX - INT_LEAST8_MAX) + val;
}
pub inline fn INT16_C(val: anytype) @TypeOf((INT_LEAST16_MAX - INT_LEAST16_MAX) + val) {
    return (INT_LEAST16_MAX - INT_LEAST16_MAX) + val;
}
pub inline fn INT32_C(val: anytype) @TypeOf((INT_LEAST32_MAX - INT_LEAST32_MAX) + val) {
    return (INT_LEAST32_MAX - INT_LEAST32_MAX) + val;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub inline fn UINT8_C(val: anytype) @TypeOf(val) {
    return val;
}
pub inline fn UINT16_C(val: anytype) @TypeOf(val) {
    return val;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const KHRONOS_SUPPORT_INT64 = @as(c_int, 1);
pub const KHRONOS_SUPPORT_FLOAT = @as(c_int, 1);
pub const KHRONOS_USE_INTPTR_T = "";
pub const KHRONOS_MAX_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hexadecimal);
pub const GL_VERSION_1_0 = @as(c_int, 1);
pub const GL_VERSION_1_1 = @as(c_int, 1);
pub const GL_VERSION_1_2 = @as(c_int, 1);
pub const GL_VERSION_1_3 = @as(c_int, 1);
pub const GL_VERSION_1_4 = @as(c_int, 1);
pub const GL_VERSION_1_5 = @as(c_int, 1);
pub const GL_VERSION_2_0 = @as(c_int, 1);
pub const GL_VERSION_2_1 = @as(c_int, 1);
pub const GL_VERSION_3_0 = @as(c_int, 1);
pub const GL_VERSION_3_1 = @as(c_int, 1);
pub const GL_VERSION_3_2 = @as(c_int, 1);
pub const GL_VERSION_3_3 = @as(c_int, 1);
pub const GL_VERSION_4_0 = @as(c_int, 1);
pub const GL_VERSION_4_1 = @as(c_int, 1);
pub const GL_VERSION_4_2 = @as(c_int, 1);
pub const GL_VERSION_4_3 = @as(c_int, 1);
pub const GL_VERSION_4_4 = @as(c_int, 1);
pub const GL_VERSION_4_5 = @as(c_int, 1);
pub const GL_VERSION_4_6 = @as(c_int, 1);
pub const GL_3DFX_multisample = @as(c_int, 1);
pub const GL_3DFX_tbuffer = @as(c_int, 1);
pub const GL_3DFX_texture_compression_FXT1 = @as(c_int, 1);
pub const GL_AMD_blend_minmax_factor = @as(c_int, 1);
pub const GL_AMD_conservative_depth = @as(c_int, 1);
pub const GL_AMD_debug_output = @as(c_int, 1);
pub const GL_AMD_depth_clamp_separate = @as(c_int, 1);
pub const GL_AMD_draw_buffers_blend = @as(c_int, 1);
pub const GL_AMD_framebuffer_multisample_advanced = @as(c_int, 1);
pub const GL_AMD_framebuffer_sample_positions = @as(c_int, 1);
pub const GL_AMD_gcn_shader = @as(c_int, 1);
pub const GL_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const GL_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const GL_AMD_gpu_shader_int64 = @as(c_int, 1);
pub const GL_AMD_interleaved_elements = @as(c_int, 1);
pub const GL_AMD_multi_draw_indirect = @as(c_int, 1);
pub const GL_AMD_name_gen_delete = @as(c_int, 1);
pub const GL_AMD_occlusion_query_event = @as(c_int, 1);
pub const GL_AMD_performance_monitor = @as(c_int, 1);
pub const GL_AMD_pinned_memory = @as(c_int, 1);
pub const GL_AMD_query_buffer_object = @as(c_int, 1);
pub const GL_AMD_sample_positions = @as(c_int, 1);
pub const GL_AMD_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_AMD_shader_atomic_counter_ops = @as(c_int, 1);
pub const GL_AMD_shader_ballot = @as(c_int, 1);
pub const GL_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const GL_AMD_shader_gpu_shader_half_float_fetch = @as(c_int, 1);
pub const GL_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const GL_AMD_shader_stencil_export = @as(c_int, 1);
pub const GL_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const GL_AMD_sparse_texture = @as(c_int, 1);
pub const GL_AMD_stencil_operation_extended = @as(c_int, 1);
pub const GL_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const GL_AMD_texture_texture4 = @as(c_int, 1);
pub const GL_AMD_transform_feedback3_lines_triangles = @as(c_int, 1);
pub const GL_AMD_transform_feedback4 = @as(c_int, 1);
pub const GL_AMD_vertex_shader_layer = @as(c_int, 1);
pub const GL_AMD_vertex_shader_tessellator = @as(c_int, 1);
pub const GL_AMD_vertex_shader_viewport_index = @as(c_int, 1);
pub const GL_APPLE_aux_depth_stencil = @as(c_int, 1);
pub const GL_APPLE_client_storage = @as(c_int, 1);
pub const GL_APPLE_element_array = @as(c_int, 1);
pub const GL_APPLE_fence = @as(c_int, 1);
pub const GL_APPLE_float_pixels = @as(c_int, 1);
pub const GL_APPLE_flush_buffer_range = @as(c_int, 1);
pub const GL_APPLE_object_purgeable = @as(c_int, 1);
pub const GL_APPLE_rgb_422 = @as(c_int, 1);
pub const GL_APPLE_row_bytes = @as(c_int, 1);
pub const GL_APPLE_specular_vector = @as(c_int, 1);
pub const GL_APPLE_texture_range = @as(c_int, 1);
pub const GL_APPLE_transform_hint = @as(c_int, 1);
pub const GL_APPLE_vertex_array_object = @as(c_int, 1);
pub const GL_APPLE_vertex_array_range = @as(c_int, 1);
pub const GL_APPLE_vertex_program_evaluators = @as(c_int, 1);
pub const GL_APPLE_ycbcr_422 = @as(c_int, 1);
pub const GL_ARB_ES2_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_1_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_2_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_compatibility = @as(c_int, 1);
pub const GL_ARB_arrays_of_arrays = @as(c_int, 1);
pub const GL_ARB_base_instance = @as(c_int, 1);
pub const GL_ARB_bindless_texture = @as(c_int, 1);
pub const GL_ARB_blend_func_extended = @as(c_int, 1);
pub const GL_ARB_buffer_storage = @as(c_int, 1);
pub const GL_ARB_cl_event = @as(c_int, 1);
pub const GL_ARB_clear_buffer_object = @as(c_int, 1);
pub const GL_ARB_clear_texture = @as(c_int, 1);
pub const GL_ARB_clip_control = @as(c_int, 1);
pub const GL_ARB_color_buffer_float = @as(c_int, 1);
pub const GL_ARB_compatibility = @as(c_int, 1);
pub const GL_ARB_compressed_texture_pixel_storage = @as(c_int, 1);
pub const GL_ARB_compute_shader = @as(c_int, 1);
pub const GL_ARB_compute_variable_group_size = @as(c_int, 1);
pub const GL_ARB_conditional_render_inverted = @as(c_int, 1);
pub const GL_ARB_conservative_depth = @as(c_int, 1);
pub const GL_ARB_copy_buffer = @as(c_int, 1);
pub const GL_ARB_copy_image = @as(c_int, 1);
pub const GL_ARB_cull_distance = @as(c_int, 1);
pub const GL_ARB_debug_output = @as(c_int, 1);
pub const GL_ARB_depth_buffer_float = @as(c_int, 1);
pub const GL_ARB_depth_clamp = @as(c_int, 1);
pub const GL_ARB_depth_texture = @as(c_int, 1);
pub const GL_ARB_derivative_control = @as(c_int, 1);
pub const GL_ARB_direct_state_access = @as(c_int, 1);
pub const GL_ARB_draw_buffers = @as(c_int, 1);
pub const GL_ARB_draw_buffers_blend = @as(c_int, 1);
pub const GL_ARB_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_ARB_draw_indirect = @as(c_int, 1);
pub const GL_ARB_draw_instanced = @as(c_int, 1);
pub const GL_ARB_enhanced_layouts = @as(c_int, 1);
pub const GL_ARB_explicit_attrib_location = @as(c_int, 1);
pub const GL_ARB_explicit_uniform_location = @as(c_int, 1);
pub const GL_ARB_fragment_coord_conventions = @as(c_int, 1);
pub const GL_ARB_fragment_layer_viewport = @as(c_int, 1);
pub const GL_ARB_fragment_program = @as(c_int, 1);
pub const GL_ARB_fragment_program_shadow = @as(c_int, 1);
pub const GL_ARB_fragment_shader = @as(c_int, 1);
pub const GL_ARB_fragment_shader_interlock = @as(c_int, 1);
pub const GL_ARB_framebuffer_no_attachments = @as(c_int, 1);
pub const GL_ARB_framebuffer_object = @as(c_int, 1);
pub const GL_ARB_framebuffer_sRGB = @as(c_int, 1);
pub const GL_ARB_geometry_shader4 = @as(c_int, 1);
pub const GL_ARB_get_program_binary = @as(c_int, 1);
pub const GL_ARB_get_texture_sub_image = @as(c_int, 1);
pub const GL_ARB_gl_spirv = @as(c_int, 1);
pub const GL_ARB_gpu_shader5 = @as(c_int, 1);
pub const GL_ARB_gpu_shader_fp64 = @as(c_int, 1);
pub const GL_ARB_gpu_shader_int64 = @as(c_int, 1);
pub const GL_ARB_half_float_pixel = @as(c_int, 1);
pub const GL_ARB_half_float_vertex = @as(c_int, 1);
pub const GL_ARB_imaging = @as(c_int, 1);
pub const GL_ARB_indirect_parameters = @as(c_int, 1);
pub const GL_ARB_instanced_arrays = @as(c_int, 1);
pub const GL_ARB_internalformat_query = @as(c_int, 1);
pub const GL_ARB_internalformat_query2 = @as(c_int, 1);
pub const GL_ARB_invalidate_subdata = @as(c_int, 1);
pub const GL_ARB_map_buffer_alignment = @as(c_int, 1);
pub const GL_ARB_map_buffer_range = @as(c_int, 1);
pub const GL_ARB_matrix_palette = @as(c_int, 1);
pub const GL_ARB_multi_bind = @as(c_int, 1);
pub const GL_ARB_multi_draw_indirect = @as(c_int, 1);
pub const GL_ARB_multisample = @as(c_int, 1);
pub const GL_ARB_multitexture = @as(c_int, 1);
pub const GL_ARB_occlusion_query = @as(c_int, 1);
pub const GL_ARB_occlusion_query2 = @as(c_int, 1);
pub const GL_ARB_parallel_shader_compile = @as(c_int, 1);
pub const GL_ARB_pipeline_statistics_query = @as(c_int, 1);
pub const GL_ARB_pixel_buffer_object = @as(c_int, 1);
pub const GL_ARB_point_parameters = @as(c_int, 1);
pub const GL_ARB_point_sprite = @as(c_int, 1);
pub const GL_ARB_polygon_offset_clamp = @as(c_int, 1);
pub const GL_ARB_post_depth_coverage = @as(c_int, 1);
pub const GL_ARB_program_interface_query = @as(c_int, 1);
pub const GL_ARB_provoking_vertex = @as(c_int, 1);
pub const GL_ARB_query_buffer_object = @as(c_int, 1);
pub const GL_ARB_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_ARB_robustness = @as(c_int, 1);
pub const GL_ARB_robustness_isolation = @as(c_int, 1);
pub const GL_ARB_sample_locations = @as(c_int, 1);
pub const GL_ARB_sample_shading = @as(c_int, 1);
pub const GL_ARB_sampler_objects = @as(c_int, 1);
pub const GL_ARB_seamless_cube_map = @as(c_int, 1);
pub const GL_ARB_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_ARB_separate_shader_objects = @as(c_int, 1);
pub const GL_ARB_shader_atomic_counter_ops = @as(c_int, 1);
pub const GL_ARB_shader_atomic_counters = @as(c_int, 1);
pub const GL_ARB_shader_ballot = @as(c_int, 1);
pub const GL_ARB_shader_bit_encoding = @as(c_int, 1);
pub const GL_ARB_shader_clock = @as(c_int, 1);
pub const GL_ARB_shader_draw_parameters = @as(c_int, 1);
pub const GL_ARB_shader_group_vote = @as(c_int, 1);
pub const GL_ARB_shader_image_load_store = @as(c_int, 1);
pub const GL_ARB_shader_image_size = @as(c_int, 1);
pub const GL_ARB_shader_objects = @as(c_int, 1);
pub const GL_ARB_shader_precision = @as(c_int, 1);
pub const GL_ARB_shader_stencil_export = @as(c_int, 1);
pub const GL_ARB_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_ARB_shader_subroutine = @as(c_int, 1);
pub const GL_ARB_shader_texture_image_samples = @as(c_int, 1);
pub const GL_ARB_shader_texture_lod = @as(c_int, 1);
pub const GL_ARB_shader_viewport_layer_array = @as(c_int, 1);
pub const GL_ARB_shading_language_100 = @as(c_int, 1);
pub const GL_ARB_shading_language_420pack = @as(c_int, 1);
pub const GL_ARB_shading_language_include = @as(c_int, 1);
pub const GL_ARB_shading_language_packing = @as(c_int, 1);
pub const GL_ARB_shadow = @as(c_int, 1);
pub const GL_ARB_shadow_ambient = @as(c_int, 1);
pub const GL_ARB_sparse_buffer = @as(c_int, 1);
pub const GL_ARB_sparse_texture = @as(c_int, 1);
pub const GL_ARB_sparse_texture2 = @as(c_int, 1);
pub const GL_ARB_sparse_texture_clamp = @as(c_int, 1);
pub const GL_ARB_spirv_extensions = @as(c_int, 1);
pub const GL_ARB_stencil_texturing = @as(c_int, 1);
pub const GL_ARB_sync = @as(c_int, 1);
pub const GL_ARB_tessellation_shader = @as(c_int, 1);
pub const GL_ARB_texture_barrier = @as(c_int, 1);
pub const GL_ARB_texture_border_clamp = @as(c_int, 1);
pub const GL_ARB_texture_buffer_object = @as(c_int, 1);
pub const GL_ARB_texture_buffer_object_rgb32 = @as(c_int, 1);
pub const GL_ARB_texture_buffer_range = @as(c_int, 1);
pub const GL_ARB_texture_compression = @as(c_int, 1);
pub const GL_ARB_texture_compression_bptc = @as(c_int, 1);
pub const GL_ARB_texture_compression_rgtc = @as(c_int, 1);
pub const GL_ARB_texture_cube_map = @as(c_int, 1);
pub const GL_ARB_texture_cube_map_array = @as(c_int, 1);
pub const GL_ARB_texture_env_add = @as(c_int, 1);
pub const GL_ARB_texture_env_combine = @as(c_int, 1);
pub const GL_ARB_texture_env_crossbar = @as(c_int, 1);
pub const GL_ARB_texture_env_dot3 = @as(c_int, 1);
pub const GL_ARB_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_ARB_texture_filter_minmax = @as(c_int, 1);
pub const GL_ARB_texture_float = @as(c_int, 1);
pub const GL_ARB_texture_gather = @as(c_int, 1);
pub const GL_ARB_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_ARB_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_ARB_texture_multisample = @as(c_int, 1);
pub const GL_ARB_texture_non_power_of_two = @as(c_int, 1);
pub const GL_ARB_texture_query_levels = @as(c_int, 1);
pub const GL_ARB_texture_query_lod = @as(c_int, 1);
pub const GL_ARB_texture_rectangle = @as(c_int, 1);
pub const GL_ARB_texture_rg = @as(c_int, 1);
pub const GL_ARB_texture_rgb10_a2ui = @as(c_int, 1);
pub const GL_ARB_texture_stencil8 = @as(c_int, 1);
pub const GL_ARB_texture_storage = @as(c_int, 1);
pub const GL_ARB_texture_storage_multisample = @as(c_int, 1);
pub const GL_ARB_texture_swizzle = @as(c_int, 1);
pub const GL_ARB_texture_view = @as(c_int, 1);
pub const GL_ARB_timer_query = @as(c_int, 1);
pub const GL_ARB_transform_feedback2 = @as(c_int, 1);
pub const GL_ARB_transform_feedback3 = @as(c_int, 1);
pub const GL_ARB_transform_feedback_instanced = @as(c_int, 1);
pub const GL_ARB_transform_feedback_overflow_query = @as(c_int, 1);
pub const GL_ARB_transpose_matrix = @as(c_int, 1);
pub const GL_ARB_uniform_buffer_object = @as(c_int, 1);
pub const GL_ARB_vertex_array_bgra = @as(c_int, 1);
pub const GL_ARB_vertex_array_object = @as(c_int, 1);
pub const GL_ARB_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_ARB_vertex_attrib_binding = @as(c_int, 1);
pub const GL_ARB_vertex_blend = @as(c_int, 1);
pub const GL_ARB_vertex_buffer_object = @as(c_int, 1);
pub const GL_ARB_vertex_program = @as(c_int, 1);
pub const GL_ARB_vertex_shader = @as(c_int, 1);
pub const GL_ARB_vertex_type_10f_11f_11f_rev = @as(c_int, 1);
pub const GL_ARB_vertex_type_2_10_10_10_rev = @as(c_int, 1);
pub const GL_ARB_viewport_array = @as(c_int, 1);
pub const GL_ARB_window_pos = @as(c_int, 1);
pub const GL_ATI_draw_buffers = @as(c_int, 1);
pub const GL_ATI_element_array = @as(c_int, 1);
pub const GL_ATI_envmap_bumpmap = @as(c_int, 1);
pub const GL_ATI_fragment_shader = @as(c_int, 1);
pub const GL_ATI_map_object_buffer = @as(c_int, 1);
pub const GL_ATI_meminfo = @as(c_int, 1);
pub const GL_ATI_pixel_format_float = @as(c_int, 1);
pub const GL_ATI_pn_triangles = @as(c_int, 1);
pub const GL_ATI_separate_stencil = @as(c_int, 1);
pub const GL_ATI_text_fragment_shader = @as(c_int, 1);
pub const GL_ATI_texture_env_combine3 = @as(c_int, 1);
pub const GL_ATI_texture_float = @as(c_int, 1);
pub const GL_ATI_texture_mirror_once = @as(c_int, 1);
pub const GL_ATI_vertex_array_object = @as(c_int, 1);
pub const GL_ATI_vertex_attrib_array_object = @as(c_int, 1);
pub const GL_ATI_vertex_streams = @as(c_int, 1);
pub const GL_EXT_422_pixels = @as(c_int, 1);
pub const GL_EXT_EGL_image_storage = @as(c_int, 1);
pub const GL_EXT_EGL_sync = @as(c_int, 1);
pub const GL_EXT_abgr = @as(c_int, 1);
pub const GL_EXT_bgra = @as(c_int, 1);
pub const GL_EXT_bindable_uniform = @as(c_int, 1);
pub const GL_EXT_blend_color = @as(c_int, 1);
pub const GL_EXT_blend_equation_separate = @as(c_int, 1);
pub const GL_EXT_blend_func_separate = @as(c_int, 1);
pub const GL_EXT_blend_logic_op = @as(c_int, 1);
pub const GL_EXT_blend_minmax = @as(c_int, 1);
pub const GL_EXT_blend_subtract = @as(c_int, 1);
pub const GL_EXT_clip_volume_hint = @as(c_int, 1);
pub const GL_EXT_cmyka = @as(c_int, 1);
pub const GL_EXT_color_subtable = @as(c_int, 1);
pub const GL_EXT_compiled_vertex_array = @as(c_int, 1);
pub const GL_EXT_convolution = @as(c_int, 1);
pub const GL_EXT_coordinate_frame = @as(c_int, 1);
pub const GL_EXT_copy_texture = @as(c_int, 1);
pub const GL_EXT_cull_vertex = @as(c_int, 1);
pub const GL_EXT_debug_label = @as(c_int, 1);
pub const GL_EXT_debug_marker = @as(c_int, 1);
pub const GL_EXT_depth_bounds_test = @as(c_int, 1);
pub const GL_EXT_direct_state_access = @as(c_int, 1);
pub const GL_EXT_draw_buffers2 = @as(c_int, 1);
pub const GL_EXT_draw_instanced = @as(c_int, 1);
pub const GL_EXT_draw_range_elements = @as(c_int, 1);
pub const GL_EXT_external_buffer = @as(c_int, 1);
pub const GL_EXT_fog_coord = @as(c_int, 1);
pub const GL_EXT_framebuffer_blit = @as(c_int, 1);
pub const GL_EXT_framebuffer_multisample = @as(c_int, 1);
pub const GL_EXT_framebuffer_multisample_blit_scaled = @as(c_int, 1);
pub const GL_EXT_framebuffer_object = @as(c_int, 1);
pub const GL_EXT_framebuffer_sRGB = @as(c_int, 1);
pub const GL_EXT_geometry_shader4 = @as(c_int, 1);
pub const GL_EXT_gpu_program_parameters = @as(c_int, 1);
pub const GL_EXT_gpu_shader4 = @as(c_int, 1);
pub const GL_EXT_histogram = @as(c_int, 1);
pub const GL_EXT_index_array_formats = @as(c_int, 1);
pub const GL_EXT_index_func = @as(c_int, 1);
pub const GL_EXT_index_material = @as(c_int, 1);
pub const GL_EXT_index_texture = @as(c_int, 1);
pub const GL_EXT_light_texture = @as(c_int, 1);
pub const GL_EXT_memory_object = @as(c_int, 1);
pub const GL_EXT_memory_object_fd = @as(c_int, 1);
pub const GL_EXT_memory_object_win32 = @as(c_int, 1);
pub const GL_EXT_misc_attribute = @as(c_int, 1);
pub const GL_EXT_multi_draw_arrays = @as(c_int, 1);
pub const GL_EXT_multisample = @as(c_int, 1);
pub const GL_EXT_multiview_tessellation_geometry_shader = @as(c_int, 1);
pub const GL_EXT_multiview_texture_multisample = @as(c_int, 1);
pub const GL_EXT_multiview_timer_query = @as(c_int, 1);
pub const GL_EXT_packed_depth_stencil = @as(c_int, 1);
pub const GL_EXT_packed_float = @as(c_int, 1);
pub const GL_EXT_packed_pixels = @as(c_int, 1);
pub const GL_EXT_paletted_texture = @as(c_int, 1);
pub const GL_EXT_pixel_buffer_object = @as(c_int, 1);
pub const GL_EXT_pixel_transform = @as(c_int, 1);
pub const GL_EXT_pixel_transform_color_table = @as(c_int, 1);
pub const GL_EXT_point_parameters = @as(c_int, 1);
pub const GL_EXT_polygon_offset = @as(c_int, 1);
pub const GL_EXT_polygon_offset_clamp = @as(c_int, 1);
pub const GL_EXT_post_depth_coverage = @as(c_int, 1);
pub const GL_EXT_provoking_vertex = @as(c_int, 1);
pub const GL_EXT_raster_multisample = @as(c_int, 1);
pub const GL_EXT_rescale_normal = @as(c_int, 1);
pub const GL_EXT_secondary_color = @as(c_int, 1);
pub const GL_EXT_semaphore = @as(c_int, 1);
pub const GL_EXT_semaphore_fd = @as(c_int, 1);
pub const GL_EXT_semaphore_win32 = @as(c_int, 1);
pub const GL_EXT_separate_shader_objects = @as(c_int, 1);
pub const GL_EXT_separate_specular_color = @as(c_int, 1);
pub const GL_EXT_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = @as(c_int, 1);
pub const GL_EXT_shader_image_load_formatted = @as(c_int, 1);
pub const GL_EXT_shader_image_load_store = @as(c_int, 1);
pub const GL_EXT_shader_integer_mix = @as(c_int, 1);
pub const GL_EXT_shader_samples_identical = @as(c_int, 1);
pub const GL_EXT_shadow_funcs = @as(c_int, 1);
pub const GL_EXT_shared_texture_palette = @as(c_int, 1);
pub const GL_EXT_sparse_texture2 = @as(c_int, 1);
pub const GL_EXT_stencil_clear_tag = @as(c_int, 1);
pub const GL_EXT_stencil_two_side = @as(c_int, 1);
pub const GL_EXT_stencil_wrap = @as(c_int, 1);
pub const GL_EXT_subtexture = @as(c_int, 1);
pub const GL_EXT_texture = @as(c_int, 1);
pub const GL_EXT_texture3D = @as(c_int, 1);
pub const GL_EXT_texture_array = @as(c_int, 1);
pub const GL_EXT_texture_buffer_object = @as(c_int, 1);
pub const GL_EXT_texture_compression_latc = @as(c_int, 1);
pub const GL_EXT_texture_compression_rgtc = @as(c_int, 1);
pub const GL_EXT_texture_compression_s3tc = @as(c_int, 1);
pub const GL_EXT_texture_cube_map = @as(c_int, 1);
pub const GL_EXT_texture_env_add = @as(c_int, 1);
pub const GL_EXT_texture_env_combine = @as(c_int, 1);
pub const GL_EXT_texture_env_dot3 = @as(c_int, 1);
pub const GL_EXT_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_EXT_texture_filter_minmax = @as(c_int, 1);
pub const GL_EXT_texture_integer = @as(c_int, 1);
pub const GL_EXT_texture_lod_bias = @as(c_int, 1);
pub const GL_EXT_texture_mirror_clamp = @as(c_int, 1);
pub const GL_EXT_texture_object = @as(c_int, 1);
pub const GL_EXT_texture_perturb_normal = @as(c_int, 1);
pub const GL_EXT_texture_sRGB = @as(c_int, 1);
pub const GL_EXT_texture_sRGB_R8 = @as(c_int, 1);
pub const GL_EXT_texture_sRGB_RG8 = @as(c_int, 1);
pub const GL_EXT_texture_sRGB_decode = @as(c_int, 1);
pub const GL_EXT_texture_shadow_lod = @as(c_int, 1);
pub const GL_EXT_texture_shared_exponent = @as(c_int, 1);
pub const GL_EXT_texture_snorm = @as(c_int, 1);
pub const GL_EXT_texture_storage = @as(c_int, 1);
pub const GL_EXT_texture_swizzle = @as(c_int, 1);
pub const GL_EXT_timer_query = @as(c_int, 1);
pub const GL_EXT_transform_feedback = @as(c_int, 1);
pub const GL_EXT_vertex_array = @as(c_int, 1);
pub const GL_EXT_vertex_array_bgra = @as(c_int, 1);
pub const GL_EXT_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_EXT_vertex_shader = @as(c_int, 1);
pub const GL_EXT_vertex_weighting = @as(c_int, 1);
pub const GL_EXT_win32_keyed_mutex = @as(c_int, 1);
pub const GL_EXT_window_rectangles = @as(c_int, 1);
pub const GL_EXT_x11_sync_object = @as(c_int, 1);
pub const GL_GREMEDY_frame_terminator = @as(c_int, 1);
pub const GL_GREMEDY_string_marker = @as(c_int, 1);
pub const GL_HP_convolution_border_modes = @as(c_int, 1);
pub const GL_HP_image_transform = @as(c_int, 1);
pub const GL_HP_occlusion_test = @as(c_int, 1);
pub const GL_HP_texture_lighting = @as(c_int, 1);
pub const GL_IBM_cull_vertex = @as(c_int, 1);
pub const GL_IBM_multimode_draw_arrays = @as(c_int, 1);
pub const GL_IBM_rasterpos_clip = @as(c_int, 1);
pub const GL_IBM_static_data = @as(c_int, 1);
pub const GL_IBM_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_IBM_vertex_array_lists = @as(c_int, 1);
pub const GL_INGR_blend_func_separate = @as(c_int, 1);
pub const GL_INGR_color_clamp = @as(c_int, 1);
pub const GL_INGR_interlace_read = @as(c_int, 1);
pub const GL_INTEL_blackhole_render = @as(c_int, 1);
pub const GL_INTEL_conservative_rasterization = @as(c_int, 1);
pub const GL_INTEL_fragment_shader_ordering = @as(c_int, 1);
pub const GL_INTEL_framebuffer_CMAA = @as(c_int, 1);
pub const GL_INTEL_map_texture = @as(c_int, 1);
pub const GL_INTEL_parallel_arrays = @as(c_int, 1);
pub const GL_INTEL_performance_query = @as(c_int, 1);
pub const GL_KHR_blend_equation_advanced = @as(c_int, 1);
pub const GL_KHR_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_KHR_context_flush_control = @as(c_int, 1);
pub const GL_KHR_debug = @as(c_int, 1);
pub const GL_KHR_no_error = @as(c_int, 1);
pub const GL_KHR_parallel_shader_compile = @as(c_int, 1);
pub const GL_KHR_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_KHR_robustness = @as(c_int, 1);
pub const GL_KHR_shader_subgroup = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_hdr = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_ldr = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_sliced_3d = @as(c_int, 1);
pub const GL_MESAX_texture_stack = @as(c_int, 1);
pub const GL_MESA_framebuffer_flip_x = @as(c_int, 1);
pub const GL_MESA_framebuffer_flip_y = @as(c_int, 1);
pub const GL_MESA_framebuffer_swap_xy = @as(c_int, 1);
pub const GL_MESA_pack_invert = @as(c_int, 1);
pub const GL_MESA_program_binary_formats = @as(c_int, 1);
pub const GL_MESA_resize_buffers = @as(c_int, 1);
pub const GL_MESA_shader_integer_functions = @as(c_int, 1);
pub const GL_MESA_tile_raster_order = @as(c_int, 1);
pub const GL_MESA_window_pos = @as(c_int, 1);
pub const GL_MESA_ycbcr_texture = @as(c_int, 1);
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = @as(c_int, 1);
pub const GL_NVX_conditional_render = @as(c_int, 1);
pub const GL_NVX_gpu_memory_info = @as(c_int, 1);
pub const GL_NVX_gpu_multicast2 = @as(c_int, 1);
pub const GL_NVX_linked_gpu_multicast = @as(c_int, 1);
pub const GL_NVX_progress_fence = @as(c_int, 1);
pub const GL_NV_alpha_to_coverage_dither_control = @as(c_int, 1);
pub const GL_NV_bindless_multi_draw_indirect = @as(c_int, 1);
pub const GL_NV_bindless_multi_draw_indirect_count = @as(c_int, 1);
pub const GL_NV_bindless_texture = @as(c_int, 1);
pub const GL_NV_blend_equation_advanced = @as(c_int, 1);
pub const GL_NV_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_NV_blend_minmax_factor = @as(c_int, 1);
pub const GL_NV_blend_square = @as(c_int, 1);
pub const GL_NV_clip_space_w_scaling = @as(c_int, 1);
pub const GL_NV_command_list = @as(c_int, 1);
pub const GL_NV_compute_program5 = @as(c_int, 1);
pub const GL_NV_compute_shader_derivatives = @as(c_int, 1);
pub const GL_NV_conditional_render = @as(c_int, 1);
pub const GL_NV_conservative_raster = @as(c_int, 1);
pub const GL_NV_conservative_raster_dilate = @as(c_int, 1);
pub const GL_NV_conservative_raster_pre_snap = @as(c_int, 1);
pub const GL_NV_conservative_raster_pre_snap_triangles = @as(c_int, 1);
pub const GL_NV_conservative_raster_underestimation = @as(c_int, 1);
pub const GL_NV_copy_depth_to_color = @as(c_int, 1);
pub const GL_NV_copy_image = @as(c_int, 1);
pub const GL_NV_deep_texture3D = @as(c_int, 1);
pub const GL_NV_depth_buffer_float = @as(c_int, 1);
pub const GL_NV_depth_clamp = @as(c_int, 1);
pub const GL_NV_draw_texture = @as(c_int, 1);
pub const GL_NV_draw_vulkan_image = @as(c_int, 1);
pub const GL_NV_evaluators = @as(c_int, 1);
pub const GL_NV_explicit_multisample = @as(c_int, 1);
pub const GL_NV_fence = @as(c_int, 1);
pub const GL_NV_fill_rectangle = @as(c_int, 1);
pub const GL_NV_float_buffer = @as(c_int, 1);
pub const GL_NV_fog_distance = @as(c_int, 1);
pub const GL_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const GL_NV_fragment_program = @as(c_int, 1);
pub const GL_NV_fragment_program2 = @as(c_int, 1);
pub const GL_NV_fragment_program4 = @as(c_int, 1);
pub const GL_NV_fragment_program_option = @as(c_int, 1);
pub const GL_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const GL_NV_fragment_shader_interlock = @as(c_int, 1);
pub const GL_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const GL_NV_framebuffer_multisample_coverage = @as(c_int, 1);
pub const GL_NV_geometry_program4 = @as(c_int, 1);
pub const GL_NV_geometry_shader4 = @as(c_int, 1);
pub const GL_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const GL_NV_gpu_multicast = @as(c_int, 1);
pub const GL_NV_gpu_program4 = @as(c_int, 1);
pub const GL_NV_gpu_program5 = @as(c_int, 1);
pub const GL_NV_gpu_program5_mem_extended = @as(c_int, 1);
pub const GL_NV_gpu_shader5 = @as(c_int, 1);
pub const GL_NV_half_float = @as(c_int, 1);
pub const GL_NV_internalformat_sample_query = @as(c_int, 1);
pub const GL_NV_light_max_exponent = @as(c_int, 1);
pub const GL_NV_memory_attachment = @as(c_int, 1);
pub const GL_NV_memory_object_sparse = @as(c_int, 1);
pub const GL_NV_mesh_shader = @as(c_int, 1);
pub const GL_NV_multisample_coverage = @as(c_int, 1);
pub const GL_NV_multisample_filter_hint = @as(c_int, 1);
pub const GL_NV_occlusion_query = @as(c_int, 1);
pub const GL_NV_packed_depth_stencil = @as(c_int, 1);
pub const GL_NV_parameter_buffer_object = @as(c_int, 1);
pub const GL_NV_parameter_buffer_object2 = @as(c_int, 1);
pub const GL_NV_path_rendering = @as(c_int, 1);
pub const GL_NV_path_rendering_shared_edge = @as(c_int, 1);
pub const GL_NV_pixel_data_range = @as(c_int, 1);
pub const GL_NV_point_sprite = @as(c_int, 1);
pub const GL_NV_present_video = @as(c_int, 1);
pub const GL_NV_primitive_restart = @as(c_int, 1);
pub const GL_NV_primitive_shading_rate = @as(c_int, 1);
pub const GL_NV_query_resource = @as(c_int, 1);
pub const GL_NV_query_resource_tag = @as(c_int, 1);
pub const GL_NV_register_combiners = @as(c_int, 1);
pub const GL_NV_register_combiners2 = @as(c_int, 1);
pub const GL_NV_representative_fragment_test = @as(c_int, 1);
pub const GL_NV_robustness_video_memory_purge = @as(c_int, 1);
pub const GL_NV_sample_locations = @as(c_int, 1);
pub const GL_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const GL_NV_scissor_exclusive = @as(c_int, 1);
pub const GL_NV_shader_atomic_counters = @as(c_int, 1);
pub const GL_NV_shader_atomic_float = @as(c_int, 1);
pub const GL_NV_shader_atomic_float64 = @as(c_int, 1);
pub const GL_NV_shader_atomic_fp16_vector = @as(c_int, 1);
pub const GL_NV_shader_atomic_int64 = @as(c_int, 1);
pub const GL_NV_shader_buffer_load = @as(c_int, 1);
pub const GL_NV_shader_buffer_store = @as(c_int, 1);
pub const GL_NV_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const GL_NV_shader_texture_footprint = @as(c_int, 1);
pub const GL_NV_shader_thread_group = @as(c_int, 1);
pub const GL_NV_shader_thread_shuffle = @as(c_int, 1);
pub const GL_NV_shading_rate_image = @as(c_int, 1);
pub const GL_NV_stereo_view_rendering = @as(c_int, 1);
pub const GL_NV_tessellation_program5 = @as(c_int, 1);
pub const GL_NV_texgen_emboss = @as(c_int, 1);
pub const GL_NV_texgen_reflection = @as(c_int, 1);
pub const GL_NV_texture_barrier = @as(c_int, 1);
pub const GL_NV_texture_compression_vtc = @as(c_int, 1);
pub const GL_NV_texture_env_combine4 = @as(c_int, 1);
pub const GL_NV_texture_expand_normal = @as(c_int, 1);
pub const GL_NV_texture_multisample = @as(c_int, 1);
pub const GL_NV_texture_rectangle = @as(c_int, 1);
pub const GL_NV_texture_rectangle_compressed = @as(c_int, 1);
pub const GL_NV_texture_shader = @as(c_int, 1);
pub const GL_NV_texture_shader2 = @as(c_int, 1);
pub const GL_NV_texture_shader3 = @as(c_int, 1);
pub const GL_NV_timeline_semaphore = @as(c_int, 1);
pub const GL_NV_transform_feedback = @as(c_int, 1);
pub const GL_NV_transform_feedback2 = @as(c_int, 1);
pub const GL_NV_uniform_buffer_unified_memory = @as(c_int, 1);
pub const GL_NV_vdpau_interop = @as(c_int, 1);
pub const GL_NV_vdpau_interop2 = @as(c_int, 1);
pub const GL_NV_vertex_array_range = @as(c_int, 1);
pub const GL_NV_vertex_array_range2 = @as(c_int, 1);
pub const GL_NV_vertex_attrib_integer_64bit = @as(c_int, 1);
pub const GL_NV_vertex_buffer_unified_memory = @as(c_int, 1);
pub const GL_NV_vertex_program = @as(c_int, 1);
pub const GL_NV_vertex_program1_1 = @as(c_int, 1);
pub const GL_NV_vertex_program2 = @as(c_int, 1);
pub const GL_NV_vertex_program2_option = @as(c_int, 1);
pub const GL_NV_vertex_program3 = @as(c_int, 1);
pub const GL_NV_vertex_program4 = @as(c_int, 1);
pub const GL_NV_video_capture = @as(c_int, 1);
pub const GL_NV_viewport_array2 = @as(c_int, 1);
pub const GL_NV_viewport_swizzle = @as(c_int, 1);
pub const GL_OES_byte_coordinates = @as(c_int, 1);
pub const GL_OES_compressed_paletted_texture = @as(c_int, 1);
pub const GL_OES_fixed_point = @as(c_int, 1);
pub const GL_OES_query_matrix = @as(c_int, 1);
pub const GL_OES_read_format = @as(c_int, 1);
pub const GL_OES_single_precision = @as(c_int, 1);
pub const GL_OML_interlace = @as(c_int, 1);
pub const GL_OML_resample = @as(c_int, 1);
pub const GL_OML_subsample = @as(c_int, 1);
pub const GL_OVR_multiview = @as(c_int, 1);
pub const GL_OVR_multiview2 = @as(c_int, 1);
pub const GL_PGI_misc_hints = @as(c_int, 1);
pub const GL_PGI_vertex_hints = @as(c_int, 1);
pub const GL_REND_screen_coordinates = @as(c_int, 1);
pub const GL_S3_s3tc = @as(c_int, 1);
pub const GL_SGIS_detail_texture = @as(c_int, 1);
pub const GL_SGIS_fog_function = @as(c_int, 1);
pub const GL_SGIS_generate_mipmap = @as(c_int, 1);
pub const GL_SGIS_multisample = @as(c_int, 1);
pub const GL_SGIS_pixel_texture = @as(c_int, 1);
pub const GL_SGIS_point_line_texgen = @as(c_int, 1);
pub const GL_SGIS_point_parameters = @as(c_int, 1);
pub const GL_SGIS_sharpen_texture = @as(c_int, 1);
pub const GL_SGIS_texture4D = @as(c_int, 1);
pub const GL_SGIS_texture_border_clamp = @as(c_int, 1);
pub const GL_SGIS_texture_color_mask = @as(c_int, 1);
pub const GL_SGIS_texture_edge_clamp = @as(c_int, 1);
pub const GL_SGIS_texture_filter4 = @as(c_int, 1);
pub const GL_SGIS_texture_lod = @as(c_int, 1);
pub const GL_SGIS_texture_select = @as(c_int, 1);
pub const GL_SGIX_async = @as(c_int, 1);
pub const GL_SGIX_async_histogram = @as(c_int, 1);
pub const GL_SGIX_async_pixel = @as(c_int, 1);
pub const GL_SGIX_blend_alpha_minmax = @as(c_int, 1);
pub const GL_SGIX_calligraphic_fragment = @as(c_int, 1);
pub const GL_SGIX_clipmap = @as(c_int, 1);
pub const GL_SGIX_convolution_accuracy = @as(c_int, 1);
pub const GL_SGIX_depth_pass_instrument = @as(c_int, 1);
pub const GL_SGIX_depth_texture = @as(c_int, 1);
pub const GL_SGIX_flush_raster = @as(c_int, 1);
pub const GL_SGIX_fog_offset = @as(c_int, 1);
pub const GL_SGIX_fragment_lighting = @as(c_int, 1);
pub const GL_SGIX_framezoom = @as(c_int, 1);
pub const GL_SGIX_igloo_interface = @as(c_int, 1);
pub const GL_SGIX_instruments = @as(c_int, 1);
pub const GL_SGIX_interlace = @as(c_int, 1);
pub const GL_SGIX_ir_instrument1 = @as(c_int, 1);
pub const GL_SGIX_list_priority = @as(c_int, 1);
pub const GL_SGIX_pixel_texture = @as(c_int, 1);
pub const GL_SGIX_pixel_tiles = @as(c_int, 1);
pub const GL_SGIX_polynomial_ffd = @as(c_int, 1);
pub const GL_SGIX_reference_plane = @as(c_int, 1);
pub const GL_SGIX_resample = @as(c_int, 1);
pub const GL_SGIX_scalebias_hint = @as(c_int, 1);
pub const GL_SGIX_shadow = @as(c_int, 1);
pub const GL_SGIX_shadow_ambient = @as(c_int, 1);
pub const GL_SGIX_sprite = @as(c_int, 1);
pub const GL_SGIX_subsample = @as(c_int, 1);
pub const GL_SGIX_tag_sample_buffer = @as(c_int, 1);
pub const GL_SGIX_texture_add_env = @as(c_int, 1);
pub const GL_SGIX_texture_coordinate_clamp = @as(c_int, 1);
pub const GL_SGIX_texture_lod_bias = @as(c_int, 1);
pub const GL_SGIX_texture_multi_buffer = @as(c_int, 1);
pub const GL_SGIX_texture_scale_bias = @as(c_int, 1);
pub const GL_SGIX_vertex_preclip = @as(c_int, 1);
pub const GL_SGIX_ycrcb = @as(c_int, 1);
pub const GL_SGIX_ycrcb_subsample = @as(c_int, 1);
pub const GL_SGIX_ycrcba = @as(c_int, 1);
pub const GL_SGI_color_matrix = @as(c_int, 1);
pub const GL_SGI_color_table = @as(c_int, 1);
pub const GL_SGI_texture_color_table = @as(c_int, 1);
pub const GL_SUNX_constant_data = @as(c_int, 1);
pub const GL_SUN_convolution_border_modes = @as(c_int, 1);
pub const GL_SUN_global_alpha = @as(c_int, 1);
pub const GL_SUN_mesh_array = @as(c_int, 1);
pub const GL_SUN_slice_accum = @as(c_int, 1);
pub const GL_SUN_triangle_list = @as(c_int, 1);
pub const GL_SUN_vertex = @as(c_int, 1);
pub const GL_WIN_phong_shading = @as(c_int, 1);
pub const GL_WIN_specular_fog = @as(c_int, 1);
pub inline fn glAccumxOES(arg_2: GLenum, arg_3: GLfixed) void {
    return glad_glAccumxOES.?(arg_2, arg_3);
}
pub inline fn glAcquireKeyedMutexWin32EXT(arg_4: GLuint, arg_5: GLuint64, arg_6: GLuint) GLboolean {
    return glad_glAcquireKeyedMutexWin32EXT.?(arg_4, arg_5, arg_6);
}
pub inline fn glActiveProgramEXT(arg_7: GLuint) void {
    return glad_glActiveProgramEXT.?(arg_7);
}
pub inline fn glActiveShaderProgram(arg_8: GLuint, arg_9: GLuint) void {
    return glad_glActiveShaderProgram.?(arg_8, arg_9);
}
pub inline fn glActiveStencilFaceEXT(arg_10: GLenum) void {
    return glad_glActiveStencilFaceEXT.?(arg_10);
}
pub inline fn glActiveTexture(arg_11: GLenum) void {
    return glad_glActiveTexture.?(arg_11);
}
pub inline fn glActiveTextureARB(arg_12: GLenum) void {
    return glad_glActiveTextureARB.?(arg_12);
}
pub inline fn glActiveVaryingNV(arg_13: GLuint, arg_14: [*c]const GLchar) void {
    return glad_glActiveVaryingNV.?(arg_13, arg_14);
}
pub inline fn glAlphaFragmentOp1ATI(arg_15: GLenum, arg_16: GLuint, arg_17: GLuint, arg_18: GLuint, arg_19: GLuint, arg_20: GLuint) void {
    return glad_glAlphaFragmentOp1ATI.?(arg_15, arg_16, arg_17, arg_18, arg_19, arg_20);
}
pub inline fn glAlphaFragmentOp2ATI(arg_21: GLenum, arg_22: GLuint, arg_23: GLuint, arg_24: GLuint, arg_25: GLuint, arg_26: GLuint, arg_27: GLuint, arg_28: GLuint, arg_29: GLuint) void {
    return glad_glAlphaFragmentOp2ATI.?(arg_21, arg_22, arg_23, arg_24, arg_25, arg_26, arg_27, arg_28, arg_29);
}
pub inline fn glAlphaFragmentOp3ATI(arg_30: GLenum, arg_31: GLuint, arg_32: GLuint, arg_33: GLuint, arg_34: GLuint, arg_35: GLuint, arg_36: GLuint, arg_37: GLuint, arg_38: GLuint, arg_39: GLuint, arg_40: GLuint, arg_41: GLuint) void {
    return glad_glAlphaFragmentOp3ATI.?(arg_30, arg_31, arg_32, arg_33, arg_34, arg_35, arg_36, arg_37, arg_38, arg_39, arg_40, arg_41);
}
pub inline fn glAlphaFuncxOES(arg_42: GLenum, arg_43: GLfixed) void {
    return glad_glAlphaFuncxOES.?(arg_42, arg_43);
}
pub inline fn glAlphaToCoverageDitherControlNV(arg_44: GLenum) void {
    return glad_glAlphaToCoverageDitherControlNV.?(arg_44);
}
pub inline fn glApplyFramebufferAttachmentCMAAINTEL() void {
    return glad_glApplyFramebufferAttachmentCMAAINTEL.?();
}
pub inline fn glApplyTextureEXT(arg_45: GLenum) void {
    return glad_glApplyTextureEXT.?(arg_45);
}
pub inline fn glAreProgramsResidentNV(arg_46: GLsizei, arg_47: [*c]const GLuint, arg_48: [*c]GLboolean) GLboolean {
    return glad_glAreProgramsResidentNV.?(arg_46, arg_47, arg_48);
}
pub inline fn glAreTexturesResidentEXT(arg_49: GLsizei, arg_50: [*c]const GLuint, arg_51: [*c]GLboolean) GLboolean {
    return glad_glAreTexturesResidentEXT.?(arg_49, arg_50, arg_51);
}
pub inline fn glArrayElementEXT(arg_52: GLint) void {
    return glad_glArrayElementEXT.?(arg_52);
}
pub inline fn glArrayObjectATI(arg_53: GLenum, arg_54: GLint, arg_55: GLenum, arg_56: GLsizei, arg_57: GLuint, arg_58: GLuint) void {
    return glad_glArrayObjectATI.?(arg_53, arg_54, arg_55, arg_56, arg_57, arg_58);
}
pub inline fn glAsyncCopyBufferSubDataNVX(arg_59: GLsizei, arg_60: [*c]const GLuint, arg_61: [*c]const GLuint64, arg_62: GLuint, arg_63: GLbitfield, arg_64: GLuint, arg_65: GLuint, arg_66: GLintptr, arg_67: GLintptr, arg_68: GLsizeiptr, arg_69: GLsizei, arg_70: [*c]const GLuint, arg_71: [*c]const GLuint64) GLuint {
    return glad_glAsyncCopyBufferSubDataNVX.?(arg_59, arg_60, arg_61, arg_62, arg_63, arg_64, arg_65, arg_66, arg_67, arg_68, arg_69, arg_70, arg_71);
}
pub inline fn glAsyncCopyImageSubDataNVX(arg_72: GLsizei, arg_73: [*c]const GLuint, arg_74: [*c]const GLuint64, arg_75: GLuint, arg_76: GLbitfield, arg_77: GLuint, arg_78: GLenum, arg_79: GLint, arg_80: GLint, arg_81: GLint, arg_82: GLint, arg_83: GLuint, arg_84: GLenum, arg_85: GLint, arg_86: GLint, arg_87: GLint, arg_88: GLint, arg_89: GLsizei, arg_90: GLsizei, arg_91: GLsizei, arg_92: GLsizei, arg_93: [*c]const GLuint, arg_94: [*c]const GLuint64) GLuint {
    return glad_glAsyncCopyImageSubDataNVX.?(arg_72, arg_73, arg_74, arg_75, arg_76, arg_77, arg_78, arg_79, arg_80, arg_81, arg_82, arg_83, arg_84, arg_85, arg_86, arg_87, arg_88, arg_89, arg_90, arg_91, arg_92, arg_93, arg_94);
}
pub inline fn glAsyncMarkerSGIX(arg_95: GLuint) void {
    return glad_glAsyncMarkerSGIX.?(arg_95);
}
pub inline fn glAttachObjectARB(arg_96: GLhandleARB, arg_97: GLhandleARB) void {
    return glad_glAttachObjectARB.?(arg_96, arg_97);
}
pub inline fn glAttachShader(arg_98: GLuint, arg_99: GLuint) void {
    return glad_glAttachShader.?(arg_98, arg_99);
}
pub inline fn glBeginConditionalRender(arg_100: GLuint, arg_101: GLenum) void {
    return glad_glBeginConditionalRender.?(arg_100, arg_101);
}
pub inline fn glBeginConditionalRenderNV(arg_102: GLuint, arg_103: GLenum) void {
    return glad_glBeginConditionalRenderNV.?(arg_102, arg_103);
}
pub inline fn glBeginConditionalRenderNVX(arg_104: GLuint) void {
    return glad_glBeginConditionalRenderNVX.?(arg_104);
}
pub inline fn glBeginFragmentShaderATI() void {
    return glad_glBeginFragmentShaderATI.?();
}
pub inline fn glBeginOcclusionQueryNV(arg_105: GLuint) void {
    return glad_glBeginOcclusionQueryNV.?(arg_105);
}
pub inline fn glBeginPerfMonitorAMD(arg_106: GLuint) void {
    return glad_glBeginPerfMonitorAMD.?(arg_106);
}
pub inline fn glBeginPerfQueryINTEL(arg_107: GLuint) void {
    return glad_glBeginPerfQueryINTEL.?(arg_107);
}
pub inline fn glBeginQuery(arg_108: GLenum, arg_109: GLuint) void {
    return glad_glBeginQuery.?(arg_108, arg_109);
}
pub inline fn glBeginQueryARB(arg_110: GLenum, arg_111: GLuint) void {
    return glad_glBeginQueryARB.?(arg_110, arg_111);
}
pub inline fn glBeginQueryIndexed(arg_112: GLenum, arg_113: GLuint, arg_114: GLuint) void {
    return glad_glBeginQueryIndexed.?(arg_112, arg_113, arg_114);
}
pub inline fn glBeginTransformFeedback(arg_115: GLenum) void {
    return glad_glBeginTransformFeedback.?(arg_115);
}
pub inline fn glBeginTransformFeedbackEXT(arg_116: GLenum) void {
    return glad_glBeginTransformFeedbackEXT.?(arg_116);
}
pub inline fn glBeginTransformFeedbackNV(arg_117: GLenum) void {
    return glad_glBeginTransformFeedbackNV.?(arg_117);
}
pub inline fn glBeginVertexShaderEXT() void {
    return glad_glBeginVertexShaderEXT.?();
}
pub inline fn glBeginVideoCaptureNV(arg_118: GLuint) void {
    return glad_glBeginVideoCaptureNV.?(arg_118);
}
pub inline fn glBindAttribLocation(arg_119: GLuint, arg_120: GLuint, arg_121: [*c]const GLchar) void {
    return glad_glBindAttribLocation.?(arg_119, arg_120, arg_121);
}
pub inline fn glBindAttribLocationARB(arg_122: GLhandleARB, arg_123: GLuint, arg_124: [*c]const GLcharARB) void {
    return glad_glBindAttribLocationARB.?(arg_122, arg_123, arg_124);
}
pub inline fn glBindBuffer(arg_125: GLenum, arg_126: GLuint) void {
    return glad_glBindBuffer.?(arg_125, arg_126);
}
pub inline fn glBindBufferARB(arg_127: GLenum, arg_128: GLuint) void {
    return glad_glBindBufferARB.?(arg_127, arg_128);
}
pub inline fn glBindBufferBase(arg_129: GLenum, arg_130: GLuint, arg_131: GLuint) void {
    return glad_glBindBufferBase.?(arg_129, arg_130, arg_131);
}
pub inline fn glBindBufferBaseEXT(arg_132: GLenum, arg_133: GLuint, arg_134: GLuint) void {
    return glad_glBindBufferBaseEXT.?(arg_132, arg_133, arg_134);
}
pub inline fn glBindBufferBaseNV(arg_135: GLenum, arg_136: GLuint, arg_137: GLuint) void {
    return glad_glBindBufferBaseNV.?(arg_135, arg_136, arg_137);
}
pub inline fn glBindBufferOffsetEXT(arg_138: GLenum, arg_139: GLuint, arg_140: GLuint, arg_141: GLintptr) void {
    return glad_glBindBufferOffsetEXT.?(arg_138, arg_139, arg_140, arg_141);
}
pub inline fn glBindBufferOffsetNV(arg_142: GLenum, arg_143: GLuint, arg_144: GLuint, arg_145: GLintptr) void {
    return glad_glBindBufferOffsetNV.?(arg_142, arg_143, arg_144, arg_145);
}
pub inline fn glBindBufferRange(arg_146: GLenum, arg_147: GLuint, arg_148: GLuint, arg_149: GLintptr, arg_150: GLsizeiptr) void {
    return glad_glBindBufferRange.?(arg_146, arg_147, arg_148, arg_149, arg_150);
}
pub inline fn glBindBufferRangeEXT(arg_151: GLenum, arg_152: GLuint, arg_153: GLuint, arg_154: GLintptr, arg_155: GLsizeiptr) void {
    return glad_glBindBufferRangeEXT.?(arg_151, arg_152, arg_153, arg_154, arg_155);
}
pub inline fn glBindBufferRangeNV(arg_156: GLenum, arg_157: GLuint, arg_158: GLuint, arg_159: GLintptr, arg_160: GLsizeiptr) void {
    return glad_glBindBufferRangeNV.?(arg_156, arg_157, arg_158, arg_159, arg_160);
}
pub inline fn glBindBuffersBase(arg_161: GLenum, arg_162: GLuint, arg_163: GLsizei, arg_164: [*c]const GLuint) void {
    return glad_glBindBuffersBase.?(arg_161, arg_162, arg_163, arg_164);
}
pub inline fn glBindBuffersRange(arg_165: GLenum, arg_166: GLuint, arg_167: GLsizei, arg_168: [*c]const GLuint, arg_169: [*c]const GLintptr, arg_170: [*c]const GLsizeiptr) void {
    return glad_glBindBuffersRange.?(arg_165, arg_166, arg_167, arg_168, arg_169, arg_170);
}
pub inline fn glBindFragDataLocation(arg_171: GLuint, arg_172: GLuint, arg_173: [*c]const GLchar) void {
    return glad_glBindFragDataLocation.?(arg_171, arg_172, arg_173);
}
pub inline fn glBindFragDataLocationEXT(arg_174: GLuint, arg_175: GLuint, arg_176: [*c]const GLchar) void {
    return glad_glBindFragDataLocationEXT.?(arg_174, arg_175, arg_176);
}
pub inline fn glBindFragDataLocationIndexed(arg_177: GLuint, arg_178: GLuint, arg_179: GLuint, arg_180: [*c]const GLchar) void {
    return glad_glBindFragDataLocationIndexed.?(arg_177, arg_178, arg_179, arg_180);
}
pub inline fn glBindFragmentShaderATI(arg_181: GLuint) void {
    return glad_glBindFragmentShaderATI.?(arg_181);
}
pub inline fn glBindFramebuffer(arg_182: GLenum, arg_183: GLuint) void {
    return glad_glBindFramebuffer.?(arg_182, arg_183);
}
pub inline fn glBindFramebufferEXT(arg_184: GLenum, arg_185: GLuint) void {
    return glad_glBindFramebufferEXT.?(arg_184, arg_185);
}
pub inline fn glBindImageTexture(arg_186: GLuint, arg_187: GLuint, arg_188: GLint, arg_189: GLboolean, arg_190: GLint, arg_191: GLenum, arg_192: GLenum) void {
    return glad_glBindImageTexture.?(arg_186, arg_187, arg_188, arg_189, arg_190, arg_191, arg_192);
}
pub inline fn glBindImageTextureEXT(arg_193: GLuint, arg_194: GLuint, arg_195: GLint, arg_196: GLboolean, arg_197: GLint, arg_198: GLenum, arg_199: GLint) void {
    return glad_glBindImageTextureEXT.?(arg_193, arg_194, arg_195, arg_196, arg_197, arg_198, arg_199);
}
pub inline fn glBindImageTextures(arg_200: GLuint, arg_201: GLsizei, arg_202: [*c]const GLuint) void {
    return glad_glBindImageTextures.?(arg_200, arg_201, arg_202);
}
pub inline fn glBindLightParameterEXT(arg_203: GLenum, arg_204: GLenum) GLuint {
    return glad_glBindLightParameterEXT.?(arg_203, arg_204);
}
pub inline fn glBindMaterialParameterEXT(arg_205: GLenum, arg_206: GLenum) GLuint {
    return glad_glBindMaterialParameterEXT.?(arg_205, arg_206);
}
pub inline fn glBindMultiTextureEXT(arg_207: GLenum, arg_208: GLenum, arg_209: GLuint) void {
    return glad_glBindMultiTextureEXT.?(arg_207, arg_208, arg_209);
}
pub inline fn glBindParameterEXT(arg_210: GLenum) GLuint {
    return glad_glBindParameterEXT.?(arg_210);
}
pub inline fn glBindProgramARB(arg_211: GLenum, arg_212: GLuint) void {
    return glad_glBindProgramARB.?(arg_211, arg_212);
}
pub inline fn glBindProgramNV(arg_213: GLenum, arg_214: GLuint) void {
    return glad_glBindProgramNV.?(arg_213, arg_214);
}
pub inline fn glBindProgramPipeline(arg_215: GLuint) void {
    return glad_glBindProgramPipeline.?(arg_215);
}
pub inline fn glBindRenderbuffer(arg_216: GLenum, arg_217: GLuint) void {
    return glad_glBindRenderbuffer.?(arg_216, arg_217);
}
pub inline fn glBindRenderbufferEXT(arg_218: GLenum, arg_219: GLuint) void {
    return glad_glBindRenderbufferEXT.?(arg_218, arg_219);
}
pub inline fn glBindSampler(arg_220: GLuint, arg_221: GLuint) void {
    return glad_glBindSampler.?(arg_220, arg_221);
}
pub inline fn glBindSamplers(arg_222: GLuint, arg_223: GLsizei, arg_224: [*c]const GLuint) void {
    return glad_glBindSamplers.?(arg_222, arg_223, arg_224);
}
pub inline fn glBindShadingRateImageNV(arg_225: GLuint) void {
    return glad_glBindShadingRateImageNV.?(arg_225);
}
pub inline fn glBindTexGenParameterEXT(arg_226: GLenum, arg_227: GLenum, arg_228: GLenum) GLuint {
    return glad_glBindTexGenParameterEXT.?(arg_226, arg_227, arg_228);
}
pub inline fn glBindTexture(arg_229: GLenum, arg_230: GLuint) void {
    return glad_glBindTexture.?(arg_229, arg_230);
}
pub inline fn glBindTextureEXT(arg_231: GLenum, arg_232: GLuint) void {
    return glad_glBindTextureEXT.?(arg_231, arg_232);
}
pub inline fn glBindTextureUnit(arg_233: GLuint, arg_234: GLuint) void {
    return glad_glBindTextureUnit.?(arg_233, arg_234);
}
pub inline fn glBindTextureUnitParameterEXT(arg_235: GLenum, arg_236: GLenum) GLuint {
    return glad_glBindTextureUnitParameterEXT.?(arg_235, arg_236);
}
pub inline fn glBindTextures(arg_237: GLuint, arg_238: GLsizei, arg_239: [*c]const GLuint) void {
    return glad_glBindTextures.?(arg_237, arg_238, arg_239);
}
pub inline fn glBindTransformFeedback(arg_240: GLenum, arg_241: GLuint) void {
    return glad_glBindTransformFeedback.?(arg_240, arg_241);
}
pub inline fn glBindTransformFeedbackNV(arg_242: GLenum, arg_243: GLuint) void {
    return glad_glBindTransformFeedbackNV.?(arg_242, arg_243);
}
pub inline fn glBindVertexArray(arg_244: GLuint) void {
    return glad_glBindVertexArray.?(arg_244);
}
pub inline fn glBindVertexArrayAPPLE(arg_245: GLuint) void {
    return glad_glBindVertexArrayAPPLE.?(arg_245);
}
pub inline fn glBindVertexBuffer(arg_246: GLuint, arg_247: GLuint, arg_248: GLintptr, arg_249: GLsizei) void {
    return glad_glBindVertexBuffer.?(arg_246, arg_247, arg_248, arg_249);
}
pub inline fn glBindVertexBuffers(arg_250: GLuint, arg_251: GLsizei, arg_252: [*c]const GLuint, arg_253: [*c]const GLintptr, arg_254: [*c]const GLsizei) void {
    return glad_glBindVertexBuffers.?(arg_250, arg_251, arg_252, arg_253, arg_254);
}
pub inline fn glBindVertexShaderEXT(arg_255: GLuint) void {
    return glad_glBindVertexShaderEXT.?(arg_255);
}
pub inline fn glBindVideoCaptureStreamBufferNV(arg_256: GLuint, arg_257: GLuint, arg_258: GLenum, arg_259: GLintptrARB) void {
    return glad_glBindVideoCaptureStreamBufferNV.?(arg_256, arg_257, arg_258, arg_259);
}
pub inline fn glBindVideoCaptureStreamTextureNV(arg_260: GLuint, arg_261: GLuint, arg_262: GLenum, arg_263: GLenum, arg_264: GLuint) void {
    return glad_glBindVideoCaptureStreamTextureNV.?(arg_260, arg_261, arg_262, arg_263, arg_264);
}
pub inline fn glBinormal3bEXT(arg_265: GLbyte, arg_266: GLbyte, arg_267: GLbyte) void {
    return glad_glBinormal3bEXT.?(arg_265, arg_266, arg_267);
}
pub inline fn glBinormal3bvEXT(arg_268: [*c]const GLbyte) void {
    return glad_glBinormal3bvEXT.?(arg_268);
}
pub inline fn glBinormal3dEXT(arg_269: GLdouble, arg_270: GLdouble, arg_271: GLdouble) void {
    return glad_glBinormal3dEXT.?(arg_269, arg_270, arg_271);
}
pub inline fn glBinormal3dvEXT(arg_272: [*c]const GLdouble) void {
    return glad_glBinormal3dvEXT.?(arg_272);
}
pub inline fn glBinormal3fEXT(arg_273: GLfloat, arg_274: GLfloat, arg_275: GLfloat) void {
    return glad_glBinormal3fEXT.?(arg_273, arg_274, arg_275);
}
pub inline fn glBinormal3fvEXT(arg_276: [*c]const GLfloat) void {
    return glad_glBinormal3fvEXT.?(arg_276);
}
pub inline fn glBinormal3iEXT(arg_277: GLint, arg_278: GLint, arg_279: GLint) void {
    return glad_glBinormal3iEXT.?(arg_277, arg_278, arg_279);
}
pub inline fn glBinormal3ivEXT(arg_280: [*c]const GLint) void {
    return glad_glBinormal3ivEXT.?(arg_280);
}
pub inline fn glBinormal3sEXT(arg_281: GLshort, arg_282: GLshort, arg_283: GLshort) void {
    return glad_glBinormal3sEXT.?(arg_281, arg_282, arg_283);
}
pub inline fn glBinormal3svEXT(arg_284: [*c]const GLshort) void {
    return glad_glBinormal3svEXT.?(arg_284);
}
pub inline fn glBinormalPointerEXT(arg_285: GLenum, arg_286: GLsizei, arg_287: ?*const anyopaque) void {
    return glad_glBinormalPointerEXT.?(arg_285, arg_286, arg_287);
}
pub inline fn glBitmapxOES(arg_288: GLsizei, arg_289: GLsizei, arg_290: GLfixed, arg_291: GLfixed, arg_292: GLfixed, arg_293: GLfixed, arg_294: [*c]const GLubyte) void {
    return glad_glBitmapxOES.?(arg_288, arg_289, arg_290, arg_291, arg_292, arg_293, arg_294);
}
pub inline fn glBlendBarrierKHR() void {
    return glad_glBlendBarrierKHR.?();
}
pub inline fn glBlendBarrierNV() void {
    return glad_glBlendBarrierNV.?();
}
pub inline fn glBlendColor(arg_295: GLfloat, arg_296: GLfloat, arg_297: GLfloat, arg_298: GLfloat) void {
    return glad_glBlendColor.?(arg_295, arg_296, arg_297, arg_298);
}
pub inline fn glBlendColorEXT(arg_299: GLfloat, arg_300: GLfloat, arg_301: GLfloat, arg_302: GLfloat) void {
    return glad_glBlendColorEXT.?(arg_299, arg_300, arg_301, arg_302);
}
pub inline fn glBlendColorxOES(arg_303: GLfixed, arg_304: GLfixed, arg_305: GLfixed, arg_306: GLfixed) void {
    return glad_glBlendColorxOES.?(arg_303, arg_304, arg_305, arg_306);
}
pub inline fn glBlendEquation(arg_307: GLenum) void {
    return glad_glBlendEquation.?(arg_307);
}
pub inline fn glBlendEquationEXT(arg_308: GLenum) void {
    return glad_glBlendEquationEXT.?(arg_308);
}
pub inline fn glBlendEquationIndexedAMD(arg_309: GLuint, arg_310: GLenum) void {
    return glad_glBlendEquationIndexedAMD.?(arg_309, arg_310);
}
pub inline fn glBlendEquationSeparate(arg_311: GLenum, arg_312: GLenum) void {
    return glad_glBlendEquationSeparate.?(arg_311, arg_312);
}
pub inline fn glBlendEquationSeparateEXT(arg_313: GLenum, arg_314: GLenum) void {
    return glad_glBlendEquationSeparateEXT.?(arg_313, arg_314);
}
pub inline fn glBlendEquationSeparateIndexedAMD(arg_315: GLuint, arg_316: GLenum, arg_317: GLenum) void {
    return glad_glBlendEquationSeparateIndexedAMD.?(arg_315, arg_316, arg_317);
}
pub inline fn glBlendEquationSeparatei(arg_318: GLuint, arg_319: GLenum, arg_320: GLenum) void {
    return glad_glBlendEquationSeparatei.?(arg_318, arg_319, arg_320);
}
pub inline fn glBlendEquationSeparateiARB(arg_321: GLuint, arg_322: GLenum, arg_323: GLenum) void {
    return glad_glBlendEquationSeparateiARB.?(arg_321, arg_322, arg_323);
}
pub inline fn glBlendEquationi(arg_324: GLuint, arg_325: GLenum) void {
    return glad_glBlendEquationi.?(arg_324, arg_325);
}
pub inline fn glBlendEquationiARB(arg_326: GLuint, arg_327: GLenum) void {
    return glad_glBlendEquationiARB.?(arg_326, arg_327);
}
pub inline fn glBlendFunc(arg_328: GLenum, arg_329: GLenum) void {
    return glad_glBlendFunc.?(arg_328, arg_329);
}
pub inline fn glBlendFuncIndexedAMD(arg_330: GLuint, arg_331: GLenum, arg_332: GLenum) void {
    return glad_glBlendFuncIndexedAMD.?(arg_330, arg_331, arg_332);
}
pub inline fn glBlendFuncSeparate(arg_333: GLenum, arg_334: GLenum, arg_335: GLenum, arg_336: GLenum) void {
    return glad_glBlendFuncSeparate.?(arg_333, arg_334, arg_335, arg_336);
}
pub inline fn glBlendFuncSeparateEXT(arg_337: GLenum, arg_338: GLenum, arg_339: GLenum, arg_340: GLenum) void {
    return glad_glBlendFuncSeparateEXT.?(arg_337, arg_338, arg_339, arg_340);
}
pub inline fn glBlendFuncSeparateINGR(arg_341: GLenum, arg_342: GLenum, arg_343: GLenum, arg_344: GLenum) void {
    return glad_glBlendFuncSeparateINGR.?(arg_341, arg_342, arg_343, arg_344);
}
pub inline fn glBlendFuncSeparateIndexedAMD(arg_345: GLuint, arg_346: GLenum, arg_347: GLenum, arg_348: GLenum, arg_349: GLenum) void {
    return glad_glBlendFuncSeparateIndexedAMD.?(arg_345, arg_346, arg_347, arg_348, arg_349);
}
pub inline fn glBlendFuncSeparatei(arg_350: GLuint, arg_351: GLenum, arg_352: GLenum, arg_353: GLenum, arg_354: GLenum) void {
    return glad_glBlendFuncSeparatei.?(arg_350, arg_351, arg_352, arg_353, arg_354);
}
pub inline fn glBlendFuncSeparateiARB(arg_355: GLuint, arg_356: GLenum, arg_357: GLenum, arg_358: GLenum, arg_359: GLenum) void {
    return glad_glBlendFuncSeparateiARB.?(arg_355, arg_356, arg_357, arg_358, arg_359);
}
pub inline fn glBlendFunci(arg_360: GLuint, arg_361: GLenum, arg_362: GLenum) void {
    return glad_glBlendFunci.?(arg_360, arg_361, arg_362);
}
pub inline fn glBlendFunciARB(arg_363: GLuint, arg_364: GLenum, arg_365: GLenum) void {
    return glad_glBlendFunciARB.?(arg_363, arg_364, arg_365);
}
pub inline fn glBlendParameteriNV(arg_366: GLenum, arg_367: GLint) void {
    return glad_glBlendParameteriNV.?(arg_366, arg_367);
}
pub inline fn glBlitFramebuffer(arg_368: GLint, arg_369: GLint, arg_370: GLint, arg_371: GLint, arg_372: GLint, arg_373: GLint, arg_374: GLint, arg_375: GLint, arg_376: GLbitfield, arg_377: GLenum) void {
    return glad_glBlitFramebuffer.?(arg_368, arg_369, arg_370, arg_371, arg_372, arg_373, arg_374, arg_375, arg_376, arg_377);
}
pub inline fn glBlitFramebufferEXT(arg_378: GLint, arg_379: GLint, arg_380: GLint, arg_381: GLint, arg_382: GLint, arg_383: GLint, arg_384: GLint, arg_385: GLint, arg_386: GLbitfield, arg_387: GLenum) void {
    return glad_glBlitFramebufferEXT.?(arg_378, arg_379, arg_380, arg_381, arg_382, arg_383, arg_384, arg_385, arg_386, arg_387);
}
pub inline fn glBlitNamedFramebuffer(arg_388: GLuint, arg_389: GLuint, arg_390: GLint, arg_391: GLint, arg_392: GLint, arg_393: GLint, arg_394: GLint, arg_395: GLint, arg_396: GLint, arg_397: GLint, arg_398: GLbitfield, arg_399: GLenum) void {
    return glad_glBlitNamedFramebuffer.?(arg_388, arg_389, arg_390, arg_391, arg_392, arg_393, arg_394, arg_395, arg_396, arg_397, arg_398, arg_399);
}
pub inline fn glBufferAddressRangeNV(arg_400: GLenum, arg_401: GLuint, arg_402: GLuint64EXT, arg_403: GLsizeiptr) void {
    return glad_glBufferAddressRangeNV.?(arg_400, arg_401, arg_402, arg_403);
}
pub inline fn glBufferAttachMemoryNV(arg_404: GLenum, arg_405: GLuint, arg_406: GLuint64) void {
    return glad_glBufferAttachMemoryNV.?(arg_404, arg_405, arg_406);
}
pub inline fn glBufferData(arg_407: GLenum, arg_408: GLsizeiptr, arg_409: ?*const anyopaque, arg_410: GLenum) void {
    return glad_glBufferData.?(arg_407, arg_408, arg_409, arg_410);
}
pub inline fn glBufferDataARB(arg_411: GLenum, arg_412: GLsizeiptrARB, arg_413: ?*const anyopaque, arg_414: GLenum) void {
    return glad_glBufferDataARB.?(arg_411, arg_412, arg_413, arg_414);
}
pub inline fn glBufferPageCommitmentARB(arg_415: GLenum, arg_416: GLintptr, arg_417: GLsizeiptr, arg_418: GLboolean) void {
    return glad_glBufferPageCommitmentARB.?(arg_415, arg_416, arg_417, arg_418);
}
pub inline fn glBufferPageCommitmentMemNV(arg_419: GLenum, arg_420: GLintptr, arg_421: GLsizeiptr, arg_422: GLuint, arg_423: GLuint64, arg_424: GLboolean) void {
    return glad_glBufferPageCommitmentMemNV.?(arg_419, arg_420, arg_421, arg_422, arg_423, arg_424);
}
pub inline fn glBufferParameteriAPPLE(arg_425: GLenum, arg_426: GLenum, arg_427: GLint) void {
    return glad_glBufferParameteriAPPLE.?(arg_425, arg_426, arg_427);
}
pub inline fn glBufferStorage(arg_428: GLenum, arg_429: GLsizeiptr, arg_430: ?*const anyopaque, arg_431: GLbitfield) void {
    return glad_glBufferStorage.?(arg_428, arg_429, arg_430, arg_431);
}
pub inline fn glBufferStorageExternalEXT(arg_432: GLenum, arg_433: GLintptr, arg_434: GLsizeiptr, arg_435: GLeglClientBufferEXT, arg_436: GLbitfield) void {
    return glad_glBufferStorageExternalEXT.?(arg_432, arg_433, arg_434, arg_435, arg_436);
}
pub inline fn glBufferStorageMemEXT(arg_437: GLenum, arg_438: GLsizeiptr, arg_439: GLuint, arg_440: GLuint64) void {
    return glad_glBufferStorageMemEXT.?(arg_437, arg_438, arg_439, arg_440);
}
pub inline fn glBufferSubData(arg_441: GLenum, arg_442: GLintptr, arg_443: GLsizeiptr, arg_444: ?*const anyopaque) void {
    return glad_glBufferSubData.?(arg_441, arg_442, arg_443, arg_444);
}
pub inline fn glBufferSubDataARB(arg_445: GLenum, arg_446: GLintptrARB, arg_447: GLsizeiptrARB, arg_448: ?*const anyopaque) void {
    return glad_glBufferSubDataARB.?(arg_445, arg_446, arg_447, arg_448);
}
pub inline fn glCallCommandListNV(arg_449: GLuint) void {
    return glad_glCallCommandListNV.?(arg_449);
}
pub inline fn glCheckFramebufferStatus(arg_450: GLenum) GLenum {
    return glad_glCheckFramebufferStatus.?(arg_450);
}
pub inline fn glCheckFramebufferStatusEXT(arg_451: GLenum) GLenum {
    return glad_glCheckFramebufferStatusEXT.?(arg_451);
}
pub inline fn glCheckNamedFramebufferStatus(arg_452: GLuint, arg_453: GLenum) GLenum {
    return glad_glCheckNamedFramebufferStatus.?(arg_452, arg_453);
}
pub inline fn glCheckNamedFramebufferStatusEXT(arg_454: GLuint, arg_455: GLenum) GLenum {
    return glad_glCheckNamedFramebufferStatusEXT.?(arg_454, arg_455);
}
pub inline fn glClampColor(arg_456: GLenum, arg_457: GLenum) void {
    return glad_glClampColor.?(arg_456, arg_457);
}
pub inline fn glClampColorARB(arg_458: GLenum, arg_459: GLenum) void {
    return glad_glClampColorARB.?(arg_458, arg_459);
}
pub inline fn glClear(arg_460: GLbitfield) void {
    return glad_glClear.?(arg_460);
}
pub inline fn glClearAccumxOES(arg_461: GLfixed, arg_462: GLfixed, arg_463: GLfixed, arg_464: GLfixed) void {
    return glad_glClearAccumxOES.?(arg_461, arg_462, arg_463, arg_464);
}
pub inline fn glClearBufferData(arg_465: GLenum, arg_466: GLenum, arg_467: GLenum, arg_468: GLenum, arg_469: ?*const anyopaque) void {
    return glad_glClearBufferData.?(arg_465, arg_466, arg_467, arg_468, arg_469);
}
pub inline fn glClearBufferSubData(arg_470: GLenum, arg_471: GLenum, arg_472: GLintptr, arg_473: GLsizeiptr, arg_474: GLenum, arg_475: GLenum, arg_476: ?*const anyopaque) void {
    return glad_glClearBufferSubData.?(arg_470, arg_471, arg_472, arg_473, arg_474, arg_475, arg_476);
}
pub inline fn glClearBufferfi(arg_477: GLenum, arg_478: GLint, arg_479: GLfloat, arg_480: GLint) void {
    return glad_glClearBufferfi.?(arg_477, arg_478, arg_479, arg_480);
}
pub inline fn glClearBufferfv(arg_481: GLenum, arg_482: GLint, arg_483: [*c]const GLfloat) void {
    return glad_glClearBufferfv.?(arg_481, arg_482, arg_483);
}
pub inline fn glClearBufferiv(arg_484: GLenum, arg_485: GLint, arg_486: [*c]const GLint) void {
    return glad_glClearBufferiv.?(arg_484, arg_485, arg_486);
}
pub inline fn glClearBufferuiv(arg_487: GLenum, arg_488: GLint, arg_489: [*c]const GLuint) void {
    return glad_glClearBufferuiv.?(arg_487, arg_488, arg_489);
}
pub inline fn glClearColor(arg_490: GLfloat, arg_491: GLfloat, arg_492: GLfloat, arg_493: GLfloat) void {
    return glad_glClearColor.?(arg_490, arg_491, arg_492, arg_493);
}
pub inline fn glClearColorIiEXT(arg_494: GLint, arg_495: GLint, arg_496: GLint, arg_497: GLint) void {
    return glad_glClearColorIiEXT.?(arg_494, arg_495, arg_496, arg_497);
}
pub inline fn glClearColorIuiEXT(arg_498: GLuint, arg_499: GLuint, arg_500: GLuint, arg_501: GLuint) void {
    return glad_glClearColorIuiEXT.?(arg_498, arg_499, arg_500, arg_501);
}
pub inline fn glClearColorxOES(arg_502: GLfixed, arg_503: GLfixed, arg_504: GLfixed, arg_505: GLfixed) void {
    return glad_glClearColorxOES.?(arg_502, arg_503, arg_504, arg_505);
}
pub inline fn glClearDepth(arg_506: GLdouble) void {
    return glad_glClearDepth.?(arg_506);
}
pub inline fn glClearDepthdNV(arg_507: GLdouble) void {
    return glad_glClearDepthdNV.?(arg_507);
}
pub inline fn glClearDepthf(arg_508: GLfloat) void {
    return glad_glClearDepthf.?(arg_508);
}
pub inline fn glClearDepthfOES(arg_509: GLclampf) void {
    return glad_glClearDepthfOES.?(arg_509);
}
pub inline fn glClearDepthxOES(arg_510: GLfixed) void {
    return glad_glClearDepthxOES.?(arg_510);
}
pub inline fn glClearNamedBufferData(arg_511: GLuint, arg_512: GLenum, arg_513: GLenum, arg_514: GLenum, arg_515: ?*const anyopaque) void {
    return glad_glClearNamedBufferData.?(arg_511, arg_512, arg_513, arg_514, arg_515);
}
pub inline fn glClearNamedBufferDataEXT(arg_516: GLuint, arg_517: GLenum, arg_518: GLenum, arg_519: GLenum, arg_520: ?*const anyopaque) void {
    return glad_glClearNamedBufferDataEXT.?(arg_516, arg_517, arg_518, arg_519, arg_520);
}
pub inline fn glClearNamedBufferSubData(arg_521: GLuint, arg_522: GLenum, arg_523: GLintptr, arg_524: GLsizeiptr, arg_525: GLenum, arg_526: GLenum, arg_527: ?*const anyopaque) void {
    return glad_glClearNamedBufferSubData.?(arg_521, arg_522, arg_523, arg_524, arg_525, arg_526, arg_527);
}
pub inline fn glClearNamedBufferSubDataEXT(arg_528: GLuint, arg_529: GLenum, arg_530: GLsizeiptr, arg_531: GLsizeiptr, arg_532: GLenum, arg_533: GLenum, arg_534: ?*const anyopaque) void {
    return glad_glClearNamedBufferSubDataEXT.?(arg_528, arg_529, arg_530, arg_531, arg_532, arg_533, arg_534);
}
pub inline fn glClearNamedFramebufferfi(arg_535: GLuint, arg_536: GLenum, arg_537: GLint, arg_538: GLfloat, arg_539: GLint) void {
    return glad_glClearNamedFramebufferfi.?(arg_535, arg_536, arg_537, arg_538, arg_539);
}
pub inline fn glClearNamedFramebufferfv(arg_540: GLuint, arg_541: GLenum, arg_542: GLint, arg_543: [*c]const GLfloat) void {
    return glad_glClearNamedFramebufferfv.?(arg_540, arg_541, arg_542, arg_543);
}
pub inline fn glClearNamedFramebufferiv(arg_544: GLuint, arg_545: GLenum, arg_546: GLint, arg_547: [*c]const GLint) void {
    return glad_glClearNamedFramebufferiv.?(arg_544, arg_545, arg_546, arg_547);
}
pub inline fn glClearNamedFramebufferuiv(arg_548: GLuint, arg_549: GLenum, arg_550: GLint, arg_551: [*c]const GLuint) void {
    return glad_glClearNamedFramebufferuiv.?(arg_548, arg_549, arg_550, arg_551);
}
pub inline fn glClearStencil(arg_552: GLint) void {
    return glad_glClearStencil.?(arg_552);
}
pub inline fn glClearTexImage(arg_553: GLuint, arg_554: GLint, arg_555: GLenum, arg_556: GLenum, arg_557: ?*const anyopaque) void {
    return glad_glClearTexImage.?(arg_553, arg_554, arg_555, arg_556, arg_557);
}
pub inline fn glClearTexSubImage(arg_558: GLuint, arg_559: GLint, arg_560: GLint, arg_561: GLint, arg_562: GLint, arg_563: GLsizei, arg_564: GLsizei, arg_565: GLsizei, arg_566: GLenum, arg_567: GLenum, arg_568: ?*const anyopaque) void {
    return glad_glClearTexSubImage.?(arg_558, arg_559, arg_560, arg_561, arg_562, arg_563, arg_564, arg_565, arg_566, arg_567, arg_568);
}
pub inline fn glClientActiveTextureARB(arg_569: GLenum) void {
    return glad_glClientActiveTextureARB.?(arg_569);
}
pub inline fn glClientActiveVertexStreamATI(arg_570: GLenum) void {
    return glad_glClientActiveVertexStreamATI.?(arg_570);
}
pub inline fn glClientAttribDefaultEXT(arg_571: GLbitfield) void {
    return glad_glClientAttribDefaultEXT.?(arg_571);
}
pub inline fn glClientWaitSemaphoreui64NVX(arg_572: GLsizei, arg_573: [*c]const GLuint, arg_574: [*c]const GLuint64) void {
    return glad_glClientWaitSemaphoreui64NVX.?(arg_572, arg_573, arg_574);
}
pub inline fn glClientWaitSync(arg_575: GLsync, arg_576: GLbitfield, arg_577: GLuint64) GLenum {
    return glad_glClientWaitSync.?(arg_575, arg_576, arg_577);
}
pub inline fn glClipControl(arg_578: GLenum, arg_579: GLenum) void {
    return glad_glClipControl.?(arg_578, arg_579);
}
pub inline fn glClipPlanefOES(arg_580: GLenum, arg_581: [*c]const GLfloat) void {
    return glad_glClipPlanefOES.?(arg_580, arg_581);
}
pub inline fn glClipPlanexOES(arg_582: GLenum, arg_583: [*c]const GLfixed) void {
    return glad_glClipPlanexOES.?(arg_582, arg_583);
}
pub inline fn glColor3fVertex3fSUN(arg_584: GLfloat, arg_585: GLfloat, arg_586: GLfloat, arg_587: GLfloat, arg_588: GLfloat, arg_589: GLfloat) void {
    return glad_glColor3fVertex3fSUN.?(arg_584, arg_585, arg_586, arg_587, arg_588, arg_589);
}
pub inline fn glColor3fVertex3fvSUN(arg_590: [*c]const GLfloat, arg_591: [*c]const GLfloat) void {
    return glad_glColor3fVertex3fvSUN.?(arg_590, arg_591);
}
pub inline fn glColor3hNV(arg_592: GLhalfNV, arg_593: GLhalfNV, arg_594: GLhalfNV) void {
    return glad_glColor3hNV.?(arg_592, arg_593, arg_594);
}
pub inline fn glColor3hvNV(arg_595: [*c]const GLhalfNV) void {
    return glad_glColor3hvNV.?(arg_595);
}
pub inline fn glColor3xOES(arg_596: GLfixed, arg_597: GLfixed, arg_598: GLfixed) void {
    return glad_glColor3xOES.?(arg_596, arg_597, arg_598);
}
pub inline fn glColor3xvOES(arg_599: [*c]const GLfixed) void {
    return glad_glColor3xvOES.?(arg_599);
}
pub inline fn glColor4fNormal3fVertex3fSUN(arg_600: GLfloat, arg_601: GLfloat, arg_602: GLfloat, arg_603: GLfloat, arg_604: GLfloat, arg_605: GLfloat, arg_606: GLfloat, arg_607: GLfloat, arg_608: GLfloat, arg_609: GLfloat) void {
    return glad_glColor4fNormal3fVertex3fSUN.?(arg_600, arg_601, arg_602, arg_603, arg_604, arg_605, arg_606, arg_607, arg_608, arg_609);
}
pub inline fn glColor4fNormal3fVertex3fvSUN(arg_610: [*c]const GLfloat, arg_611: [*c]const GLfloat, arg_612: [*c]const GLfloat) void {
    return glad_glColor4fNormal3fVertex3fvSUN.?(arg_610, arg_611, arg_612);
}
pub inline fn glColor4hNV(arg_613: GLhalfNV, arg_614: GLhalfNV, arg_615: GLhalfNV, arg_616: GLhalfNV) void {
    return glad_glColor4hNV.?(arg_613, arg_614, arg_615, arg_616);
}
pub inline fn glColor4hvNV(arg_617: [*c]const GLhalfNV) void {
    return glad_glColor4hvNV.?(arg_617);
}
pub inline fn glColor4ubVertex2fSUN(arg_618: GLubyte, arg_619: GLubyte, arg_620: GLubyte, arg_621: GLubyte, arg_622: GLfloat, arg_623: GLfloat) void {
    return glad_glColor4ubVertex2fSUN.?(arg_618, arg_619, arg_620, arg_621, arg_622, arg_623);
}
pub inline fn glColor4ubVertex2fvSUN(arg_624: [*c]const GLubyte, arg_625: [*c]const GLfloat) void {
    return glad_glColor4ubVertex2fvSUN.?(arg_624, arg_625);
}
pub inline fn glColor4ubVertex3fSUN(arg_626: GLubyte, arg_627: GLubyte, arg_628: GLubyte, arg_629: GLubyte, arg_630: GLfloat, arg_631: GLfloat, arg_632: GLfloat) void {
    return glad_glColor4ubVertex3fSUN.?(arg_626, arg_627, arg_628, arg_629, arg_630, arg_631, arg_632);
}
pub inline fn glColor4ubVertex3fvSUN(arg_633: [*c]const GLubyte, arg_634: [*c]const GLfloat) void {
    return glad_glColor4ubVertex3fvSUN.?(arg_633, arg_634);
}
pub inline fn glColor4xOES(arg_635: GLfixed, arg_636: GLfixed, arg_637: GLfixed, arg_638: GLfixed) void {
    return glad_glColor4xOES.?(arg_635, arg_636, arg_637, arg_638);
}
pub inline fn glColor4xvOES(arg_639: [*c]const GLfixed) void {
    return glad_glColor4xvOES.?(arg_639);
}
pub inline fn glColorFormatNV(arg_640: GLint, arg_641: GLenum, arg_642: GLsizei) void {
    return glad_glColorFormatNV.?(arg_640, arg_641, arg_642);
}
pub inline fn glColorFragmentOp1ATI(arg_643: GLenum, arg_644: GLuint, arg_645: GLuint, arg_646: GLuint, arg_647: GLuint, arg_648: GLuint, arg_649: GLuint) void {
    return glad_glColorFragmentOp1ATI.?(arg_643, arg_644, arg_645, arg_646, arg_647, arg_648, arg_649);
}
pub inline fn glColorFragmentOp2ATI(arg_650: GLenum, arg_651: GLuint, arg_652: GLuint, arg_653: GLuint, arg_654: GLuint, arg_655: GLuint, arg_656: GLuint, arg_657: GLuint, arg_658: GLuint, arg_659: GLuint) void {
    return glad_glColorFragmentOp2ATI.?(arg_650, arg_651, arg_652, arg_653, arg_654, arg_655, arg_656, arg_657, arg_658, arg_659);
}
pub inline fn glColorFragmentOp3ATI(arg_660: GLenum, arg_661: GLuint, arg_662: GLuint, arg_663: GLuint, arg_664: GLuint, arg_665: GLuint, arg_666: GLuint, arg_667: GLuint, arg_668: GLuint, arg_669: GLuint, arg_670: GLuint, arg_671: GLuint, arg_672: GLuint) void {
    return glad_glColorFragmentOp3ATI.?(arg_660, arg_661, arg_662, arg_663, arg_664, arg_665, arg_666, arg_667, arg_668, arg_669, arg_670, arg_671, arg_672);
}
pub inline fn glColorMask(arg_673: GLboolean, arg_674: GLboolean, arg_675: GLboolean, arg_676: GLboolean) void {
    return glad_glColorMask.?(arg_673, arg_674, arg_675, arg_676);
}
pub inline fn glColorMaskIndexedEXT(arg_677: GLuint, arg_678: GLboolean, arg_679: GLboolean, arg_680: GLboolean, arg_681: GLboolean) void {
    return glad_glColorMaskIndexedEXT.?(arg_677, arg_678, arg_679, arg_680, arg_681);
}
pub inline fn glColorMaski(arg_682: GLuint, arg_683: GLboolean, arg_684: GLboolean, arg_685: GLboolean, arg_686: GLboolean) void {
    return glad_glColorMaski.?(arg_682, arg_683, arg_684, arg_685, arg_686);
}
pub inline fn glColorPointerEXT(arg_687: GLint, arg_688: GLenum, arg_689: GLsizei, arg_690: GLsizei, arg_691: ?*const anyopaque) void {
    return glad_glColorPointerEXT.?(arg_687, arg_688, arg_689, arg_690, arg_691);
}
pub inline fn glColorPointerListIBM(arg_692: GLint, arg_693: GLenum, arg_694: GLint, arg_695: [*c]?*const anyopaque, arg_696: GLint) void {
    return glad_glColorPointerListIBM.?(arg_692, arg_693, arg_694, arg_695, arg_696);
}
pub inline fn glColorPointervINTEL(arg_697: GLint, arg_698: GLenum, arg_699: [*c]?*const anyopaque) void {
    return glad_glColorPointervINTEL.?(arg_697, arg_698, arg_699);
}
pub inline fn glColorSubTableEXT(arg_700: GLenum, arg_701: GLsizei, arg_702: GLsizei, arg_703: GLenum, arg_704: GLenum, arg_705: ?*const anyopaque) void {
    return glad_glColorSubTableEXT.?(arg_700, arg_701, arg_702, arg_703, arg_704, arg_705);
}
pub inline fn glColorTableEXT(arg_706: GLenum, arg_707: GLenum, arg_708: GLsizei, arg_709: GLenum, arg_710: GLenum, arg_711: ?*const anyopaque) void {
    return glad_glColorTableEXT.?(arg_706, arg_707, arg_708, arg_709, arg_710, arg_711);
}
pub inline fn glColorTableParameterfvSGI(arg_712: GLenum, arg_713: GLenum, arg_714: [*c]const GLfloat) void {
    return glad_glColorTableParameterfvSGI.?(arg_712, arg_713, arg_714);
}
pub inline fn glColorTableParameterivSGI(arg_715: GLenum, arg_716: GLenum, arg_717: [*c]const GLint) void {
    return glad_glColorTableParameterivSGI.?(arg_715, arg_716, arg_717);
}
pub inline fn glColorTableSGI(arg_718: GLenum, arg_719: GLenum, arg_720: GLsizei, arg_721: GLenum, arg_722: GLenum, arg_723: ?*const anyopaque) void {
    return glad_glColorTableSGI.?(arg_718, arg_719, arg_720, arg_721, arg_722, arg_723);
}
pub inline fn glCombinerInputNV(arg_724: GLenum, arg_725: GLenum, arg_726: GLenum, arg_727: GLenum, arg_728: GLenum, arg_729: GLenum) void {
    return glad_glCombinerInputNV.?(arg_724, arg_725, arg_726, arg_727, arg_728, arg_729);
}
pub inline fn glCombinerOutputNV(arg_730: GLenum, arg_731: GLenum, arg_732: GLenum, arg_733: GLenum, arg_734: GLenum, arg_735: GLenum, arg_736: GLenum, arg_737: GLboolean, arg_738: GLboolean, arg_739: GLboolean) void {
    return glad_glCombinerOutputNV.?(arg_730, arg_731, arg_732, arg_733, arg_734, arg_735, arg_736, arg_737, arg_738, arg_739);
}
pub inline fn glCombinerParameterfNV(arg_740: GLenum, arg_741: GLfloat) void {
    return glad_glCombinerParameterfNV.?(arg_740, arg_741);
}
pub inline fn glCombinerParameterfvNV(arg_742: GLenum, arg_743: [*c]const GLfloat) void {
    return glad_glCombinerParameterfvNV.?(arg_742, arg_743);
}
pub inline fn glCombinerParameteriNV(arg_744: GLenum, arg_745: GLint) void {
    return glad_glCombinerParameteriNV.?(arg_744, arg_745);
}
pub inline fn glCombinerParameterivNV(arg_746: GLenum, arg_747: [*c]const GLint) void {
    return glad_glCombinerParameterivNV.?(arg_746, arg_747);
}
pub inline fn glCombinerStageParameterfvNV(arg_748: GLenum, arg_749: GLenum, arg_750: [*c]const GLfloat) void {
    return glad_glCombinerStageParameterfvNV.?(arg_748, arg_749, arg_750);
}
pub inline fn glCommandListSegmentsNV(arg_751: GLuint, arg_752: GLuint) void {
    return glad_glCommandListSegmentsNV.?(arg_751, arg_752);
}
pub inline fn glCompileCommandListNV(arg_753: GLuint) void {
    return glad_glCompileCommandListNV.?(arg_753);
}
pub inline fn glCompileShader(arg_754: GLuint) void {
    return glad_glCompileShader.?(arg_754);
}
pub inline fn glCompileShaderARB(arg_755: GLhandleARB) void {
    return glad_glCompileShaderARB.?(arg_755);
}
pub inline fn glCompileShaderIncludeARB(arg_756: GLuint, arg_757: GLsizei, arg_758: [*c]const [*c]const GLchar, arg_759: [*c]const GLint) void {
    return glad_glCompileShaderIncludeARB.?(arg_756, arg_757, arg_758, arg_759);
}
pub inline fn glCompressedMultiTexImage1DEXT(arg_760: GLenum, arg_761: GLenum, arg_762: GLint, arg_763: GLenum, arg_764: GLsizei, arg_765: GLint, arg_766: GLsizei, arg_767: ?*const anyopaque) void {
    return glad_glCompressedMultiTexImage1DEXT.?(arg_760, arg_761, arg_762, arg_763, arg_764, arg_765, arg_766, arg_767);
}
pub inline fn glCompressedMultiTexImage2DEXT(arg_768: GLenum, arg_769: GLenum, arg_770: GLint, arg_771: GLenum, arg_772: GLsizei, arg_773: GLsizei, arg_774: GLint, arg_775: GLsizei, arg_776: ?*const anyopaque) void {
    return glad_glCompressedMultiTexImage2DEXT.?(arg_768, arg_769, arg_770, arg_771, arg_772, arg_773, arg_774, arg_775, arg_776);
}
pub inline fn glCompressedMultiTexImage3DEXT(arg_777: GLenum, arg_778: GLenum, arg_779: GLint, arg_780: GLenum, arg_781: GLsizei, arg_782: GLsizei, arg_783: GLsizei, arg_784: GLint, arg_785: GLsizei, arg_786: ?*const anyopaque) void {
    return glad_glCompressedMultiTexImage3DEXT.?(arg_777, arg_778, arg_779, arg_780, arg_781, arg_782, arg_783, arg_784, arg_785, arg_786);
}
pub inline fn glCompressedMultiTexSubImage1DEXT(arg_787: GLenum, arg_788: GLenum, arg_789: GLint, arg_790: GLint, arg_791: GLsizei, arg_792: GLenum, arg_793: GLsizei, arg_794: ?*const anyopaque) void {
    return glad_glCompressedMultiTexSubImage1DEXT.?(arg_787, arg_788, arg_789, arg_790, arg_791, arg_792, arg_793, arg_794);
}
pub inline fn glCompressedMultiTexSubImage2DEXT(arg_795: GLenum, arg_796: GLenum, arg_797: GLint, arg_798: GLint, arg_799: GLint, arg_800: GLsizei, arg_801: GLsizei, arg_802: GLenum, arg_803: GLsizei, arg_804: ?*const anyopaque) void {
    return glad_glCompressedMultiTexSubImage2DEXT.?(arg_795, arg_796, arg_797, arg_798, arg_799, arg_800, arg_801, arg_802, arg_803, arg_804);
}
pub inline fn glCompressedMultiTexSubImage3DEXT(arg_805: GLenum, arg_806: GLenum, arg_807: GLint, arg_808: GLint, arg_809: GLint, arg_810: GLint, arg_811: GLsizei, arg_812: GLsizei, arg_813: GLsizei, arg_814: GLenum, arg_815: GLsizei, arg_816: ?*const anyopaque) void {
    return glad_glCompressedMultiTexSubImage3DEXT.?(arg_805, arg_806, arg_807, arg_808, arg_809, arg_810, arg_811, arg_812, arg_813, arg_814, arg_815, arg_816);
}
pub inline fn glCompressedTexImage1D(arg_817: GLenum, arg_818: GLint, arg_819: GLenum, arg_820: GLsizei, arg_821: GLint, arg_822: GLsizei, arg_823: ?*const anyopaque) void {
    return glad_glCompressedTexImage1D.?(arg_817, arg_818, arg_819, arg_820, arg_821, arg_822, arg_823);
}
pub inline fn glCompressedTexImage1DARB(arg_824: GLenum, arg_825: GLint, arg_826: GLenum, arg_827: GLsizei, arg_828: GLint, arg_829: GLsizei, arg_830: ?*const anyopaque) void {
    return glad_glCompressedTexImage1DARB.?(arg_824, arg_825, arg_826, arg_827, arg_828, arg_829, arg_830);
}
pub inline fn glCompressedTexImage2D(arg_831: GLenum, arg_832: GLint, arg_833: GLenum, arg_834: GLsizei, arg_835: GLsizei, arg_836: GLint, arg_837: GLsizei, arg_838: ?*const anyopaque) void {
    return glad_glCompressedTexImage2D.?(arg_831, arg_832, arg_833, arg_834, arg_835, arg_836, arg_837, arg_838);
}
pub inline fn glCompressedTexImage2DARB(arg_839: GLenum, arg_840: GLint, arg_841: GLenum, arg_842: GLsizei, arg_843: GLsizei, arg_844: GLint, arg_845: GLsizei, arg_846: ?*const anyopaque) void {
    return glad_glCompressedTexImage2DARB.?(arg_839, arg_840, arg_841, arg_842, arg_843, arg_844, arg_845, arg_846);
}
pub inline fn glCompressedTexImage3D(arg_847: GLenum, arg_848: GLint, arg_849: GLenum, arg_850: GLsizei, arg_851: GLsizei, arg_852: GLsizei, arg_853: GLint, arg_854: GLsizei, arg_855: ?*const anyopaque) void {
    return glad_glCompressedTexImage3D.?(arg_847, arg_848, arg_849, arg_850, arg_851, arg_852, arg_853, arg_854, arg_855);
}
pub inline fn glCompressedTexImage3DARB(arg_856: GLenum, arg_857: GLint, arg_858: GLenum, arg_859: GLsizei, arg_860: GLsizei, arg_861: GLsizei, arg_862: GLint, arg_863: GLsizei, arg_864: ?*const anyopaque) void {
    return glad_glCompressedTexImage3DARB.?(arg_856, arg_857, arg_858, arg_859, arg_860, arg_861, arg_862, arg_863, arg_864);
}
pub inline fn glCompressedTexSubImage1D(arg_865: GLenum, arg_866: GLint, arg_867: GLint, arg_868: GLsizei, arg_869: GLenum, arg_870: GLsizei, arg_871: ?*const anyopaque) void {
    return glad_glCompressedTexSubImage1D.?(arg_865, arg_866, arg_867, arg_868, arg_869, arg_870, arg_871);
}
pub inline fn glCompressedTexSubImage1DARB(arg_872: GLenum, arg_873: GLint, arg_874: GLint, arg_875: GLsizei, arg_876: GLenum, arg_877: GLsizei, arg_878: ?*const anyopaque) void {
    return glad_glCompressedTexSubImage1DARB.?(arg_872, arg_873, arg_874, arg_875, arg_876, arg_877, arg_878);
}
pub inline fn glCompressedTexSubImage2D(arg_879: GLenum, arg_880: GLint, arg_881: GLint, arg_882: GLint, arg_883: GLsizei, arg_884: GLsizei, arg_885: GLenum, arg_886: GLsizei, arg_887: ?*const anyopaque) void {
    return glad_glCompressedTexSubImage2D.?(arg_879, arg_880, arg_881, arg_882, arg_883, arg_884, arg_885, arg_886, arg_887);
}
pub inline fn glCompressedTexSubImage2DARB(arg_888: GLenum, arg_889: GLint, arg_890: GLint, arg_891: GLint, arg_892: GLsizei, arg_893: GLsizei, arg_894: GLenum, arg_895: GLsizei, arg_896: ?*const anyopaque) void {
    return glad_glCompressedTexSubImage2DARB.?(arg_888, arg_889, arg_890, arg_891, arg_892, arg_893, arg_894, arg_895, arg_896);
}
pub inline fn glCompressedTexSubImage3D(arg_897: GLenum, arg_898: GLint, arg_899: GLint, arg_900: GLint, arg_901: GLint, arg_902: GLsizei, arg_903: GLsizei, arg_904: GLsizei, arg_905: GLenum, arg_906: GLsizei, arg_907: ?*const anyopaque) void {
    return glad_glCompressedTexSubImage3D.?(arg_897, arg_898, arg_899, arg_900, arg_901, arg_902, arg_903, arg_904, arg_905, arg_906, arg_907);
}
pub inline fn glCompressedTexSubImage3DARB(arg_908: GLenum, arg_909: GLint, arg_910: GLint, arg_911: GLint, arg_912: GLint, arg_913: GLsizei, arg_914: GLsizei, arg_915: GLsizei, arg_916: GLenum, arg_917: GLsizei, arg_918: ?*const anyopaque) void {
    return glad_glCompressedTexSubImage3DARB.?(arg_908, arg_909, arg_910, arg_911, arg_912, arg_913, arg_914, arg_915, arg_916, arg_917, arg_918);
}
pub inline fn glCompressedTextureImage1DEXT(arg_919: GLuint, arg_920: GLenum, arg_921: GLint, arg_922: GLenum, arg_923: GLsizei, arg_924: GLint, arg_925: GLsizei, arg_926: ?*const anyopaque) void {
    return glad_glCompressedTextureImage1DEXT.?(arg_919, arg_920, arg_921, arg_922, arg_923, arg_924, arg_925, arg_926);
}
pub inline fn glCompressedTextureImage2DEXT(arg_927: GLuint, arg_928: GLenum, arg_929: GLint, arg_930: GLenum, arg_931: GLsizei, arg_932: GLsizei, arg_933: GLint, arg_934: GLsizei, arg_935: ?*const anyopaque) void {
    return glad_glCompressedTextureImage2DEXT.?(arg_927, arg_928, arg_929, arg_930, arg_931, arg_932, arg_933, arg_934, arg_935);
}
pub inline fn glCompressedTextureImage3DEXT(arg_936: GLuint, arg_937: GLenum, arg_938: GLint, arg_939: GLenum, arg_940: GLsizei, arg_941: GLsizei, arg_942: GLsizei, arg_943: GLint, arg_944: GLsizei, arg_945: ?*const anyopaque) void {
    return glad_glCompressedTextureImage3DEXT.?(arg_936, arg_937, arg_938, arg_939, arg_940, arg_941, arg_942, arg_943, arg_944, arg_945);
}
pub inline fn glCompressedTextureSubImage1D(arg_946: GLuint, arg_947: GLint, arg_948: GLint, arg_949: GLsizei, arg_950: GLenum, arg_951: GLsizei, arg_952: ?*const anyopaque) void {
    return glad_glCompressedTextureSubImage1D.?(arg_946, arg_947, arg_948, arg_949, arg_950, arg_951, arg_952);
}
pub inline fn glCompressedTextureSubImage1DEXT(arg_953: GLuint, arg_954: GLenum, arg_955: GLint, arg_956: GLint, arg_957: GLsizei, arg_958: GLenum, arg_959: GLsizei, arg_960: ?*const anyopaque) void {
    return glad_glCompressedTextureSubImage1DEXT.?(arg_953, arg_954, arg_955, arg_956, arg_957, arg_958, arg_959, arg_960);
}
pub inline fn glCompressedTextureSubImage2D(arg_961: GLuint, arg_962: GLint, arg_963: GLint, arg_964: GLint, arg_965: GLsizei, arg_966: GLsizei, arg_967: GLenum, arg_968: GLsizei, arg_969: ?*const anyopaque) void {
    return glad_glCompressedTextureSubImage2D.?(arg_961, arg_962, arg_963, arg_964, arg_965, arg_966, arg_967, arg_968, arg_969);
}
pub inline fn glCompressedTextureSubImage2DEXT(arg_970: GLuint, arg_971: GLenum, arg_972: GLint, arg_973: GLint, arg_974: GLint, arg_975: GLsizei, arg_976: GLsizei, arg_977: GLenum, arg_978: GLsizei, arg_979: ?*const anyopaque) void {
    return glad_glCompressedTextureSubImage2DEXT.?(arg_970, arg_971, arg_972, arg_973, arg_974, arg_975, arg_976, arg_977, arg_978, arg_979);
}
pub inline fn glCompressedTextureSubImage3D(arg_980: GLuint, arg_981: GLint, arg_982: GLint, arg_983: GLint, arg_984: GLint, arg_985: GLsizei, arg_986: GLsizei, arg_987: GLsizei, arg_988: GLenum, arg_989: GLsizei, arg_990: ?*const anyopaque) void {
    return glad_glCompressedTextureSubImage3D.?(arg_980, arg_981, arg_982, arg_983, arg_984, arg_985, arg_986, arg_987, arg_988, arg_989, arg_990);
}
pub inline fn glCompressedTextureSubImage3DEXT(arg_991: GLuint, arg_992: GLenum, arg_993: GLint, arg_994: GLint, arg_995: GLint, arg_996: GLint, arg_997: GLsizei, arg_998: GLsizei, arg_999: GLsizei, arg_1000: GLenum, arg_1001: GLsizei, arg_1002: ?*const anyopaque) void {
    return glad_glCompressedTextureSubImage3DEXT.?(arg_991, arg_992, arg_993, arg_994, arg_995, arg_996, arg_997, arg_998, arg_999, arg_1000, arg_1001, arg_1002);
}
pub inline fn glConservativeRasterParameterfNV(arg_1003: GLenum, arg_1004: GLfloat) void {
    return glad_glConservativeRasterParameterfNV.?(arg_1003, arg_1004);
}
pub inline fn glConservativeRasterParameteriNV(arg_1005: GLenum, arg_1006: GLint) void {
    return glad_glConservativeRasterParameteriNV.?(arg_1005, arg_1006);
}
pub inline fn glConvolutionFilter1DEXT(arg_1007: GLenum, arg_1008: GLenum, arg_1009: GLsizei, arg_1010: GLenum, arg_1011: GLenum, arg_1012: ?*const anyopaque) void {
    return glad_glConvolutionFilter1DEXT.?(arg_1007, arg_1008, arg_1009, arg_1010, arg_1011, arg_1012);
}
pub inline fn glConvolutionFilter2DEXT(arg_1013: GLenum, arg_1014: GLenum, arg_1015: GLsizei, arg_1016: GLsizei, arg_1017: GLenum, arg_1018: GLenum, arg_1019: ?*const anyopaque) void {
    return glad_glConvolutionFilter2DEXT.?(arg_1013, arg_1014, arg_1015, arg_1016, arg_1017, arg_1018, arg_1019);
}
pub inline fn glConvolutionParameterfEXT(arg_1020: GLenum, arg_1021: GLenum, arg_1022: GLfloat) void {
    return glad_glConvolutionParameterfEXT.?(arg_1020, arg_1021, arg_1022);
}
pub inline fn glConvolutionParameterfvEXT(arg_1023: GLenum, arg_1024: GLenum, arg_1025: [*c]const GLfloat) void {
    return glad_glConvolutionParameterfvEXT.?(arg_1023, arg_1024, arg_1025);
}
pub inline fn glConvolutionParameteriEXT(arg_1026: GLenum, arg_1027: GLenum, arg_1028: GLint) void {
    return glad_glConvolutionParameteriEXT.?(arg_1026, arg_1027, arg_1028);
}
pub inline fn glConvolutionParameterivEXT(arg_1029: GLenum, arg_1030: GLenum, arg_1031: [*c]const GLint) void {
    return glad_glConvolutionParameterivEXT.?(arg_1029, arg_1030, arg_1031);
}
pub inline fn glConvolutionParameterxOES(arg_1032: GLenum, arg_1033: GLenum, arg_1034: GLfixed) void {
    return glad_glConvolutionParameterxOES.?(arg_1032, arg_1033, arg_1034);
}
pub inline fn glConvolutionParameterxvOES(arg_1035: GLenum, arg_1036: GLenum, arg_1037: [*c]const GLfixed) void {
    return glad_glConvolutionParameterxvOES.?(arg_1035, arg_1036, arg_1037);
}
pub inline fn glCopyBufferSubData(arg_1038: GLenum, arg_1039: GLenum, arg_1040: GLintptr, arg_1041: GLintptr, arg_1042: GLsizeiptr) void {
    return glad_glCopyBufferSubData.?(arg_1038, arg_1039, arg_1040, arg_1041, arg_1042);
}
pub inline fn glCopyColorSubTableEXT(arg_1043: GLenum, arg_1044: GLsizei, arg_1045: GLint, arg_1046: GLint, arg_1047: GLsizei) void {
    return glad_glCopyColorSubTableEXT.?(arg_1043, arg_1044, arg_1045, arg_1046, arg_1047);
}
pub inline fn glCopyColorTableSGI(arg_1048: GLenum, arg_1049: GLenum, arg_1050: GLint, arg_1051: GLint, arg_1052: GLsizei) void {
    return glad_glCopyColorTableSGI.?(arg_1048, arg_1049, arg_1050, arg_1051, arg_1052);
}
pub inline fn glCopyConvolutionFilter1DEXT(arg_1053: GLenum, arg_1054: GLenum, arg_1055: GLint, arg_1056: GLint, arg_1057: GLsizei) void {
    return glad_glCopyConvolutionFilter1DEXT.?(arg_1053, arg_1054, arg_1055, arg_1056, arg_1057);
}
pub inline fn glCopyConvolutionFilter2DEXT(arg_1058: GLenum, arg_1059: GLenum, arg_1060: GLint, arg_1061: GLint, arg_1062: GLsizei, arg_1063: GLsizei) void {
    return glad_glCopyConvolutionFilter2DEXT.?(arg_1058, arg_1059, arg_1060, arg_1061, arg_1062, arg_1063);
}
pub inline fn glCopyImageSubData(arg_1064: GLuint, arg_1065: GLenum, arg_1066: GLint, arg_1067: GLint, arg_1068: GLint, arg_1069: GLint, arg_1070: GLuint, arg_1071: GLenum, arg_1072: GLint, arg_1073: GLint, arg_1074: GLint, arg_1075: GLint, arg_1076: GLsizei, arg_1077: GLsizei, arg_1078: GLsizei) void {
    return glad_glCopyImageSubData.?(arg_1064, arg_1065, arg_1066, arg_1067, arg_1068, arg_1069, arg_1070, arg_1071, arg_1072, arg_1073, arg_1074, arg_1075, arg_1076, arg_1077, arg_1078);
}
pub inline fn glCopyImageSubDataNV(arg_1079: GLuint, arg_1080: GLenum, arg_1081: GLint, arg_1082: GLint, arg_1083: GLint, arg_1084: GLint, arg_1085: GLuint, arg_1086: GLenum, arg_1087: GLint, arg_1088: GLint, arg_1089: GLint, arg_1090: GLint, arg_1091: GLsizei, arg_1092: GLsizei, arg_1093: GLsizei) void {
    return glad_glCopyImageSubDataNV.?(arg_1079, arg_1080, arg_1081, arg_1082, arg_1083, arg_1084, arg_1085, arg_1086, arg_1087, arg_1088, arg_1089, arg_1090, arg_1091, arg_1092, arg_1093);
}
pub inline fn glCopyMultiTexImage1DEXT(arg_1094: GLenum, arg_1095: GLenum, arg_1096: GLint, arg_1097: GLenum, arg_1098: GLint, arg_1099: GLint, arg_1100: GLsizei, arg_1101: GLint) void {
    return glad_glCopyMultiTexImage1DEXT.?(arg_1094, arg_1095, arg_1096, arg_1097, arg_1098, arg_1099, arg_1100, arg_1101);
}
pub inline fn glCopyMultiTexImage2DEXT(arg_1102: GLenum, arg_1103: GLenum, arg_1104: GLint, arg_1105: GLenum, arg_1106: GLint, arg_1107: GLint, arg_1108: GLsizei, arg_1109: GLsizei, arg_1110: GLint) void {
    return glad_glCopyMultiTexImage2DEXT.?(arg_1102, arg_1103, arg_1104, arg_1105, arg_1106, arg_1107, arg_1108, arg_1109, arg_1110);
}
pub inline fn glCopyMultiTexSubImage1DEXT(arg_1111: GLenum, arg_1112: GLenum, arg_1113: GLint, arg_1114: GLint, arg_1115: GLint, arg_1116: GLint, arg_1117: GLsizei) void {
    return glad_glCopyMultiTexSubImage1DEXT.?(arg_1111, arg_1112, arg_1113, arg_1114, arg_1115, arg_1116, arg_1117);
}
pub inline fn glCopyMultiTexSubImage2DEXT(arg_1118: GLenum, arg_1119: GLenum, arg_1120: GLint, arg_1121: GLint, arg_1122: GLint, arg_1123: GLint, arg_1124: GLint, arg_1125: GLsizei, arg_1126: GLsizei) void {
    return glad_glCopyMultiTexSubImage2DEXT.?(arg_1118, arg_1119, arg_1120, arg_1121, arg_1122, arg_1123, arg_1124, arg_1125, arg_1126);
}
pub inline fn glCopyMultiTexSubImage3DEXT(arg_1127: GLenum, arg_1128: GLenum, arg_1129: GLint, arg_1130: GLint, arg_1131: GLint, arg_1132: GLint, arg_1133: GLint, arg_1134: GLint, arg_1135: GLsizei, arg_1136: GLsizei) void {
    return glad_glCopyMultiTexSubImage3DEXT.?(arg_1127, arg_1128, arg_1129, arg_1130, arg_1131, arg_1132, arg_1133, arg_1134, arg_1135, arg_1136);
}
pub inline fn glCopyNamedBufferSubData(arg_1137: GLuint, arg_1138: GLuint, arg_1139: GLintptr, arg_1140: GLintptr, arg_1141: GLsizeiptr) void {
    return glad_glCopyNamedBufferSubData.?(arg_1137, arg_1138, arg_1139, arg_1140, arg_1141);
}
pub inline fn glCopyPathNV(arg_1142: GLuint, arg_1143: GLuint) void {
    return glad_glCopyPathNV.?(arg_1142, arg_1143);
}
pub inline fn glCopyTexImage1D(arg_1144: GLenum, arg_1145: GLint, arg_1146: GLenum, arg_1147: GLint, arg_1148: GLint, arg_1149: GLsizei, arg_1150: GLint) void {
    return glad_glCopyTexImage1D.?(arg_1144, arg_1145, arg_1146, arg_1147, arg_1148, arg_1149, arg_1150);
}
pub inline fn glCopyTexImage1DEXT(arg_1151: GLenum, arg_1152: GLint, arg_1153: GLenum, arg_1154: GLint, arg_1155: GLint, arg_1156: GLsizei, arg_1157: GLint) void {
    return glad_glCopyTexImage1DEXT.?(arg_1151, arg_1152, arg_1153, arg_1154, arg_1155, arg_1156, arg_1157);
}
pub inline fn glCopyTexImage2D(arg_1158: GLenum, arg_1159: GLint, arg_1160: GLenum, arg_1161: GLint, arg_1162: GLint, arg_1163: GLsizei, arg_1164: GLsizei, arg_1165: GLint) void {
    return glad_glCopyTexImage2D.?(arg_1158, arg_1159, arg_1160, arg_1161, arg_1162, arg_1163, arg_1164, arg_1165);
}
pub inline fn glCopyTexImage2DEXT(arg_1166: GLenum, arg_1167: GLint, arg_1168: GLenum, arg_1169: GLint, arg_1170: GLint, arg_1171: GLsizei, arg_1172: GLsizei, arg_1173: GLint) void {
    return glad_glCopyTexImage2DEXT.?(arg_1166, arg_1167, arg_1168, arg_1169, arg_1170, arg_1171, arg_1172, arg_1173);
}
pub inline fn glCopyTexSubImage1D(arg_1174: GLenum, arg_1175: GLint, arg_1176: GLint, arg_1177: GLint, arg_1178: GLint, arg_1179: GLsizei) void {
    return glad_glCopyTexSubImage1D.?(arg_1174, arg_1175, arg_1176, arg_1177, arg_1178, arg_1179);
}
pub inline fn glCopyTexSubImage1DEXT(arg_1180: GLenum, arg_1181: GLint, arg_1182: GLint, arg_1183: GLint, arg_1184: GLint, arg_1185: GLsizei) void {
    return glad_glCopyTexSubImage1DEXT.?(arg_1180, arg_1181, arg_1182, arg_1183, arg_1184, arg_1185);
}
pub inline fn glCopyTexSubImage2D(arg_1186: GLenum, arg_1187: GLint, arg_1188: GLint, arg_1189: GLint, arg_1190: GLint, arg_1191: GLint, arg_1192: GLsizei, arg_1193: GLsizei) void {
    return glad_glCopyTexSubImage2D.?(arg_1186, arg_1187, arg_1188, arg_1189, arg_1190, arg_1191, arg_1192, arg_1193);
}
pub inline fn glCopyTexSubImage2DEXT(arg_1194: GLenum, arg_1195: GLint, arg_1196: GLint, arg_1197: GLint, arg_1198: GLint, arg_1199: GLint, arg_1200: GLsizei, arg_1201: GLsizei) void {
    return glad_glCopyTexSubImage2DEXT.?(arg_1194, arg_1195, arg_1196, arg_1197, arg_1198, arg_1199, arg_1200, arg_1201);
}
pub inline fn glCopyTexSubImage3D(arg_1202: GLenum, arg_1203: GLint, arg_1204: GLint, arg_1205: GLint, arg_1206: GLint, arg_1207: GLint, arg_1208: GLint, arg_1209: GLsizei, arg_1210: GLsizei) void {
    return glad_glCopyTexSubImage3D.?(arg_1202, arg_1203, arg_1204, arg_1205, arg_1206, arg_1207, arg_1208, arg_1209, arg_1210);
}
pub inline fn glCopyTexSubImage3DEXT(arg_1211: GLenum, arg_1212: GLint, arg_1213: GLint, arg_1214: GLint, arg_1215: GLint, arg_1216: GLint, arg_1217: GLint, arg_1218: GLsizei, arg_1219: GLsizei) void {
    return glad_glCopyTexSubImage3DEXT.?(arg_1211, arg_1212, arg_1213, arg_1214, arg_1215, arg_1216, arg_1217, arg_1218, arg_1219);
}
pub inline fn glCopyTextureImage1DEXT(arg_1220: GLuint, arg_1221: GLenum, arg_1222: GLint, arg_1223: GLenum, arg_1224: GLint, arg_1225: GLint, arg_1226: GLsizei, arg_1227: GLint) void {
    return glad_glCopyTextureImage1DEXT.?(arg_1220, arg_1221, arg_1222, arg_1223, arg_1224, arg_1225, arg_1226, arg_1227);
}
pub inline fn glCopyTextureImage2DEXT(arg_1228: GLuint, arg_1229: GLenum, arg_1230: GLint, arg_1231: GLenum, arg_1232: GLint, arg_1233: GLint, arg_1234: GLsizei, arg_1235: GLsizei, arg_1236: GLint) void {
    return glad_glCopyTextureImage2DEXT.?(arg_1228, arg_1229, arg_1230, arg_1231, arg_1232, arg_1233, arg_1234, arg_1235, arg_1236);
}
pub inline fn glCopyTextureSubImage1D(arg_1237: GLuint, arg_1238: GLint, arg_1239: GLint, arg_1240: GLint, arg_1241: GLint, arg_1242: GLsizei) void {
    return glad_glCopyTextureSubImage1D.?(arg_1237, arg_1238, arg_1239, arg_1240, arg_1241, arg_1242);
}
pub inline fn glCopyTextureSubImage1DEXT(arg_1243: GLuint, arg_1244: GLenum, arg_1245: GLint, arg_1246: GLint, arg_1247: GLint, arg_1248: GLint, arg_1249: GLsizei) void {
    return glad_glCopyTextureSubImage1DEXT.?(arg_1243, arg_1244, arg_1245, arg_1246, arg_1247, arg_1248, arg_1249);
}
pub inline fn glCopyTextureSubImage2D(arg_1250: GLuint, arg_1251: GLint, arg_1252: GLint, arg_1253: GLint, arg_1254: GLint, arg_1255: GLint, arg_1256: GLsizei, arg_1257: GLsizei) void {
    return glad_glCopyTextureSubImage2D.?(arg_1250, arg_1251, arg_1252, arg_1253, arg_1254, arg_1255, arg_1256, arg_1257);
}
pub inline fn glCopyTextureSubImage2DEXT(arg_1258: GLuint, arg_1259: GLenum, arg_1260: GLint, arg_1261: GLint, arg_1262: GLint, arg_1263: GLint, arg_1264: GLint, arg_1265: GLsizei, arg_1266: GLsizei) void {
    return glad_glCopyTextureSubImage2DEXT.?(arg_1258, arg_1259, arg_1260, arg_1261, arg_1262, arg_1263, arg_1264, arg_1265, arg_1266);
}
pub inline fn glCopyTextureSubImage3D(arg_1267: GLuint, arg_1268: GLint, arg_1269: GLint, arg_1270: GLint, arg_1271: GLint, arg_1272: GLint, arg_1273: GLint, arg_1274: GLsizei, arg_1275: GLsizei) void {
    return glad_glCopyTextureSubImage3D.?(arg_1267, arg_1268, arg_1269, arg_1270, arg_1271, arg_1272, arg_1273, arg_1274, arg_1275);
}
pub inline fn glCopyTextureSubImage3DEXT(arg_1276: GLuint, arg_1277: GLenum, arg_1278: GLint, arg_1279: GLint, arg_1280: GLint, arg_1281: GLint, arg_1282: GLint, arg_1283: GLint, arg_1284: GLsizei, arg_1285: GLsizei) void {
    return glad_glCopyTextureSubImage3DEXT.?(arg_1276, arg_1277, arg_1278, arg_1279, arg_1280, arg_1281, arg_1282, arg_1283, arg_1284, arg_1285);
}
pub inline fn glCoverFillPathInstancedNV(arg_1286: GLsizei, arg_1287: GLenum, arg_1288: ?*const anyopaque, arg_1289: GLuint, arg_1290: GLenum, arg_1291: GLenum, arg_1292: [*c]const GLfloat) void {
    return glad_glCoverFillPathInstancedNV.?(arg_1286, arg_1287, arg_1288, arg_1289, arg_1290, arg_1291, arg_1292);
}
pub inline fn glCoverFillPathNV(arg_1293: GLuint, arg_1294: GLenum) void {
    return glad_glCoverFillPathNV.?(arg_1293, arg_1294);
}
pub inline fn glCoverStrokePathInstancedNV(arg_1295: GLsizei, arg_1296: GLenum, arg_1297: ?*const anyopaque, arg_1298: GLuint, arg_1299: GLenum, arg_1300: GLenum, arg_1301: [*c]const GLfloat) void {
    return glad_glCoverStrokePathInstancedNV.?(arg_1295, arg_1296, arg_1297, arg_1298, arg_1299, arg_1300, arg_1301);
}
pub inline fn glCoverStrokePathNV(arg_1302: GLuint, arg_1303: GLenum) void {
    return glad_glCoverStrokePathNV.?(arg_1302, arg_1303);
}
pub inline fn glCoverageModulationNV(arg_1304: GLenum) void {
    return glad_glCoverageModulationNV.?(arg_1304);
}
pub inline fn glCoverageModulationTableNV(arg_1305: GLsizei, arg_1306: [*c]const GLfloat) void {
    return glad_glCoverageModulationTableNV.?(arg_1305, arg_1306);
}
pub inline fn glCreateBuffers(arg_1307: GLsizei, arg_1308: [*c]GLuint) void {
    return glad_glCreateBuffers.?(arg_1307, arg_1308);
}
pub inline fn glCreateCommandListsNV(arg_1309: GLsizei, arg_1310: [*c]GLuint) void {
    return glad_glCreateCommandListsNV.?(arg_1309, arg_1310);
}
pub inline fn glCreateFramebuffers(arg_1311: GLsizei, arg_1312: [*c]GLuint) void {
    return glad_glCreateFramebuffers.?(arg_1311, arg_1312);
}
pub inline fn glCreateMemoryObjectsEXT(arg_1313: GLsizei, arg_1314: [*c]GLuint) void {
    return glad_glCreateMemoryObjectsEXT.?(arg_1313, arg_1314);
}
pub inline fn glCreatePerfQueryINTEL(arg_1315: GLuint, arg_1316: [*c]GLuint) void {
    return glad_glCreatePerfQueryINTEL.?(arg_1315, arg_1316);
}
pub inline fn glCreateProgram() GLuint {
    return glad_glCreateProgram.?();
}
pub inline fn glCreateProgramObjectARB() GLhandleARB {
    return glad_glCreateProgramObjectARB.?();
}
pub inline fn glCreateProgramPipelines(arg_1317: GLsizei, arg_1318: [*c]GLuint) void {
    return glad_glCreateProgramPipelines.?(arg_1317, arg_1318);
}
pub inline fn glCreateProgressFenceNVX() GLuint {
    return glad_glCreateProgressFenceNVX.?();
}
pub inline fn glCreateQueries(arg_1319: GLenum, arg_1320: GLsizei, arg_1321: [*c]GLuint) void {
    return glad_glCreateQueries.?(arg_1319, arg_1320, arg_1321);
}
pub inline fn glCreateRenderbuffers(arg_1322: GLsizei, arg_1323: [*c]GLuint) void {
    return glad_glCreateRenderbuffers.?(arg_1322, arg_1323);
}
pub inline fn glCreateSamplers(arg_1324: GLsizei, arg_1325: [*c]GLuint) void {
    return glad_glCreateSamplers.?(arg_1324, arg_1325);
}
pub inline fn glCreateSemaphoresNV(arg_1326: GLsizei, arg_1327: [*c]GLuint) void {
    return glad_glCreateSemaphoresNV.?(arg_1326, arg_1327);
}
pub inline fn glCreateShader(arg_1328: GLenum) GLuint {
    return glad_glCreateShader.?(arg_1328);
}
pub inline fn glCreateShaderObjectARB(arg_1329: GLenum) GLhandleARB {
    return glad_glCreateShaderObjectARB.?(arg_1329);
}
pub inline fn glCreateShaderProgramEXT(arg_1330: GLenum, arg_1331: [*c]const GLchar) GLuint {
    return glad_glCreateShaderProgramEXT.?(arg_1330, arg_1331);
}
pub inline fn glCreateShaderProgramv(arg_1332: GLenum, arg_1333: GLsizei, arg_1334: [*c]const [*c]const GLchar) GLuint {
    return glad_glCreateShaderProgramv.?(arg_1332, arg_1333, arg_1334);
}
pub inline fn glCreateStatesNV(arg_1335: GLsizei, arg_1336: [*c]GLuint) void {
    return glad_glCreateStatesNV.?(arg_1335, arg_1336);
}
pub inline fn glCreateSyncFromCLeventARB(arg_1337: ?*struct__cl_context, arg_1338: ?*struct__cl_event, arg_1339: GLbitfield) GLsync {
    return glad_glCreateSyncFromCLeventARB.?(arg_1337, arg_1338, arg_1339);
}
pub inline fn glCreateTextures(arg_1340: GLenum, arg_1341: GLsizei, arg_1342: [*c]GLuint) void {
    return glad_glCreateTextures.?(arg_1340, arg_1341, arg_1342);
}
pub inline fn glCreateTransformFeedbacks(arg_1343: GLsizei, arg_1344: [*c]GLuint) void {
    return glad_glCreateTransformFeedbacks.?(arg_1343, arg_1344);
}
pub inline fn glCreateVertexArrays(arg_1345: GLsizei, arg_1346: [*c]GLuint) void {
    return glad_glCreateVertexArrays.?(arg_1345, arg_1346);
}
pub inline fn glCullFace(arg_1347: GLenum) void {
    return glad_glCullFace.?(arg_1347);
}
pub inline fn glCullParameterdvEXT(arg_1348: GLenum, arg_1349: [*c]GLdouble) void {
    return glad_glCullParameterdvEXT.?(arg_1348, arg_1349);
}
pub inline fn glCullParameterfvEXT(arg_1350: GLenum, arg_1351: [*c]GLfloat) void {
    return glad_glCullParameterfvEXT.?(arg_1350, arg_1351);
}
pub inline fn glCurrentPaletteMatrixARB(arg_1352: GLint) void {
    return glad_glCurrentPaletteMatrixARB.?(arg_1352);
}
pub inline fn glDebugMessageCallback(arg_1353: GLDEBUGPROC, arg_1354: ?*const anyopaque) void {
    return glad_glDebugMessageCallback.?(arg_1353, arg_1354);
}
pub inline fn glDebugMessageCallbackAMD(arg_1355: GLDEBUGPROCAMD, arg_1356: ?*anyopaque) void {
    return glad_glDebugMessageCallbackAMD.?(arg_1355, arg_1356);
}
pub inline fn glDebugMessageCallbackARB(arg_1357: GLDEBUGPROCARB, arg_1358: ?*const anyopaque) void {
    return glad_glDebugMessageCallbackARB.?(arg_1357, arg_1358);
}
pub inline fn glDebugMessageControl(arg_1359: GLenum, arg_1360: GLenum, arg_1361: GLenum, arg_1362: GLsizei, arg_1363: [*c]const GLuint, arg_1364: GLboolean) void {
    return glad_glDebugMessageControl.?(arg_1359, arg_1360, arg_1361, arg_1362, arg_1363, arg_1364);
}
pub inline fn glDebugMessageControlARB(arg_1365: GLenum, arg_1366: GLenum, arg_1367: GLenum, arg_1368: GLsizei, arg_1369: [*c]const GLuint, arg_1370: GLboolean) void {
    return glad_glDebugMessageControlARB.?(arg_1365, arg_1366, arg_1367, arg_1368, arg_1369, arg_1370);
}
pub inline fn glDebugMessageEnableAMD(arg_1371: GLenum, arg_1372: GLenum, arg_1373: GLsizei, arg_1374: [*c]const GLuint, arg_1375: GLboolean) void {
    return glad_glDebugMessageEnableAMD.?(arg_1371, arg_1372, arg_1373, arg_1374, arg_1375);
}
pub inline fn glDebugMessageInsert(arg_1376: GLenum, arg_1377: GLenum, arg_1378: GLuint, arg_1379: GLenum, arg_1380: GLsizei, arg_1381: [*c]const GLchar) void {
    return glad_glDebugMessageInsert.?(arg_1376, arg_1377, arg_1378, arg_1379, arg_1380, arg_1381);
}
pub inline fn glDebugMessageInsertAMD(arg_1382: GLenum, arg_1383: GLenum, arg_1384: GLuint, arg_1385: GLsizei, arg_1386: [*c]const GLchar) void {
    return glad_glDebugMessageInsertAMD.?(arg_1382, arg_1383, arg_1384, arg_1385, arg_1386);
}
pub inline fn glDebugMessageInsertARB(arg_1387: GLenum, arg_1388: GLenum, arg_1389: GLuint, arg_1390: GLenum, arg_1391: GLsizei, arg_1392: [*c]const GLchar) void {
    return glad_glDebugMessageInsertARB.?(arg_1387, arg_1388, arg_1389, arg_1390, arg_1391, arg_1392);
}
pub inline fn glDeformSGIX(arg_1393: GLbitfield) void {
    return glad_glDeformSGIX.?(arg_1393);
}
pub inline fn glDeformationMap3dSGIX(arg_1394: GLenum, arg_1395: GLdouble, arg_1396: GLdouble, arg_1397: GLint, arg_1398: GLint, arg_1399: GLdouble, arg_1400: GLdouble, arg_1401: GLint, arg_1402: GLint, arg_1403: GLdouble, arg_1404: GLdouble, arg_1405: GLint, arg_1406: GLint, arg_1407: [*c]const GLdouble) void {
    return glad_glDeformationMap3dSGIX.?(arg_1394, arg_1395, arg_1396, arg_1397, arg_1398, arg_1399, arg_1400, arg_1401, arg_1402, arg_1403, arg_1404, arg_1405, arg_1406, arg_1407);
}
pub inline fn glDeformationMap3fSGIX(arg_1408: GLenum, arg_1409: GLfloat, arg_1410: GLfloat, arg_1411: GLint, arg_1412: GLint, arg_1413: GLfloat, arg_1414: GLfloat, arg_1415: GLint, arg_1416: GLint, arg_1417: GLfloat, arg_1418: GLfloat, arg_1419: GLint, arg_1420: GLint, arg_1421: [*c]const GLfloat) void {
    return glad_glDeformationMap3fSGIX.?(arg_1408, arg_1409, arg_1410, arg_1411, arg_1412, arg_1413, arg_1414, arg_1415, arg_1416, arg_1417, arg_1418, arg_1419, arg_1420, arg_1421);
}
pub inline fn glDeleteAsyncMarkersSGIX(arg_1422: GLuint, arg_1423: GLsizei) void {
    return glad_glDeleteAsyncMarkersSGIX.?(arg_1422, arg_1423);
}
pub inline fn glDeleteBuffers(arg_1424: GLsizei, arg_1425: [*c]const GLuint) void {
    return glad_glDeleteBuffers.?(arg_1424, arg_1425);
}
pub inline fn glDeleteBuffersARB(arg_1426: GLsizei, arg_1427: [*c]const GLuint) void {
    return glad_glDeleteBuffersARB.?(arg_1426, arg_1427);
}
pub inline fn glDeleteCommandListsNV(arg_1428: GLsizei, arg_1429: [*c]const GLuint) void {
    return glad_glDeleteCommandListsNV.?(arg_1428, arg_1429);
}
pub inline fn glDeleteFencesAPPLE(arg_1430: GLsizei, arg_1431: [*c]const GLuint) void {
    return glad_glDeleteFencesAPPLE.?(arg_1430, arg_1431);
}
pub inline fn glDeleteFencesNV(arg_1432: GLsizei, arg_1433: [*c]const GLuint) void {
    return glad_glDeleteFencesNV.?(arg_1432, arg_1433);
}
pub inline fn glDeleteFragmentShaderATI(arg_1434: GLuint) void {
    return glad_glDeleteFragmentShaderATI.?(arg_1434);
}
pub inline fn glDeleteFramebuffers(arg_1435: GLsizei, arg_1436: [*c]const GLuint) void {
    return glad_glDeleteFramebuffers.?(arg_1435, arg_1436);
}
pub inline fn glDeleteFramebuffersEXT(arg_1437: GLsizei, arg_1438: [*c]const GLuint) void {
    return glad_glDeleteFramebuffersEXT.?(arg_1437, arg_1438);
}
pub inline fn glDeleteMemoryObjectsEXT(arg_1439: GLsizei, arg_1440: [*c]const GLuint) void {
    return glad_glDeleteMemoryObjectsEXT.?(arg_1439, arg_1440);
}
pub inline fn glDeleteNamedStringARB(arg_1441: GLint, arg_1442: [*c]const GLchar) void {
    return glad_glDeleteNamedStringARB.?(arg_1441, arg_1442);
}
pub inline fn glDeleteNamesAMD(arg_1443: GLenum, arg_1444: GLuint, arg_1445: [*c]const GLuint) void {
    return glad_glDeleteNamesAMD.?(arg_1443, arg_1444, arg_1445);
}
pub inline fn glDeleteObjectARB(arg_1446: GLhandleARB) void {
    return glad_glDeleteObjectARB.?(arg_1446);
}
pub inline fn glDeleteOcclusionQueriesNV(arg_1447: GLsizei, arg_1448: [*c]const GLuint) void {
    return glad_glDeleteOcclusionQueriesNV.?(arg_1447, arg_1448);
}
pub inline fn glDeletePathsNV(arg_1449: GLuint, arg_1450: GLsizei) void {
    return glad_glDeletePathsNV.?(arg_1449, arg_1450);
}
pub inline fn glDeletePerfMonitorsAMD(arg_1451: GLsizei, arg_1452: [*c]GLuint) void {
    return glad_glDeletePerfMonitorsAMD.?(arg_1451, arg_1452);
}
pub inline fn glDeletePerfQueryINTEL(arg_1453: GLuint) void {
    return glad_glDeletePerfQueryINTEL.?(arg_1453);
}
pub inline fn glDeleteProgram(arg_1454: GLuint) void {
    return glad_glDeleteProgram.?(arg_1454);
}
pub inline fn glDeleteProgramPipelines(arg_1455: GLsizei, arg_1456: [*c]const GLuint) void {
    return glad_glDeleteProgramPipelines.?(arg_1455, arg_1456);
}
pub inline fn glDeleteProgramsARB(arg_1457: GLsizei, arg_1458: [*c]const GLuint) void {
    return glad_glDeleteProgramsARB.?(arg_1457, arg_1458);
}
pub inline fn glDeleteProgramsNV(arg_1459: GLsizei, arg_1460: [*c]const GLuint) void {
    return glad_glDeleteProgramsNV.?(arg_1459, arg_1460);
}
pub inline fn glDeleteQueries(arg_1461: GLsizei, arg_1462: [*c]const GLuint) void {
    return glad_glDeleteQueries.?(arg_1461, arg_1462);
}
pub inline fn glDeleteQueriesARB(arg_1463: GLsizei, arg_1464: [*c]const GLuint) void {
    return glad_glDeleteQueriesARB.?(arg_1463, arg_1464);
}
pub inline fn glDeleteQueryResourceTagNV(arg_1465: GLsizei, arg_1466: [*c]const GLint) void {
    return glad_glDeleteQueryResourceTagNV.?(arg_1465, arg_1466);
}
pub inline fn glDeleteRenderbuffers(arg_1467: GLsizei, arg_1468: [*c]const GLuint) void {
    return glad_glDeleteRenderbuffers.?(arg_1467, arg_1468);
}
pub inline fn glDeleteRenderbuffersEXT(arg_1469: GLsizei, arg_1470: [*c]const GLuint) void {
    return glad_glDeleteRenderbuffersEXT.?(arg_1469, arg_1470);
}
pub inline fn glDeleteSamplers(arg_1471: GLsizei, arg_1472: [*c]const GLuint) void {
    return glad_glDeleteSamplers.?(arg_1471, arg_1472);
}
pub inline fn glDeleteSemaphoresEXT(arg_1473: GLsizei, arg_1474: [*c]const GLuint) void {
    return glad_glDeleteSemaphoresEXT.?(arg_1473, arg_1474);
}
pub inline fn glDeleteShader(arg_1475: GLuint) void {
    return glad_glDeleteShader.?(arg_1475);
}
pub inline fn glDeleteStatesNV(arg_1476: GLsizei, arg_1477: [*c]const GLuint) void {
    return glad_glDeleteStatesNV.?(arg_1476, arg_1477);
}
pub inline fn glDeleteSync(arg_1478: GLsync) void {
    return glad_glDeleteSync.?(arg_1478);
}
pub inline fn glDeleteTextures(arg_1479: GLsizei, arg_1480: [*c]const GLuint) void {
    return glad_glDeleteTextures.?(arg_1479, arg_1480);
}
pub inline fn glDeleteTexturesEXT(arg_1481: GLsizei, arg_1482: [*c]const GLuint) void {
    return glad_glDeleteTexturesEXT.?(arg_1481, arg_1482);
}
pub inline fn glDeleteTransformFeedbacks(arg_1483: GLsizei, arg_1484: [*c]const GLuint) void {
    return glad_glDeleteTransformFeedbacks.?(arg_1483, arg_1484);
}
pub inline fn glDeleteTransformFeedbacksNV(arg_1485: GLsizei, arg_1486: [*c]const GLuint) void {
    return glad_glDeleteTransformFeedbacksNV.?(arg_1485, arg_1486);
}
pub inline fn glDeleteVertexArrays(arg_1487: GLsizei, arg_1488: [*c]const GLuint) void {
    return glad_glDeleteVertexArrays.?(arg_1487, arg_1488);
}
pub inline fn glDeleteVertexArraysAPPLE(arg_1489: GLsizei, arg_1490: [*c]const GLuint) void {
    return glad_glDeleteVertexArraysAPPLE.?(arg_1489, arg_1490);
}
pub inline fn glDeleteVertexShaderEXT(arg_1491: GLuint) void {
    return glad_glDeleteVertexShaderEXT.?(arg_1491);
}
pub inline fn glDepthBoundsEXT(arg_1492: GLclampd, arg_1493: GLclampd) void {
    return glad_glDepthBoundsEXT.?(arg_1492, arg_1493);
}
pub inline fn glDepthBoundsdNV(arg_1494: GLdouble, arg_1495: GLdouble) void {
    return glad_glDepthBoundsdNV.?(arg_1494, arg_1495);
}
pub inline fn glDepthFunc(arg_1496: GLenum) void {
    return glad_glDepthFunc.?(arg_1496);
}
pub inline fn glDepthMask(arg_1497: GLboolean) void {
    return glad_glDepthMask.?(arg_1497);
}
pub inline fn glDepthRange(arg_1498: GLdouble, arg_1499: GLdouble) void {
    return glad_glDepthRange.?(arg_1498, arg_1499);
}
pub inline fn glDepthRangeArraydvNV(arg_1500: GLuint, arg_1501: GLsizei, arg_1502: [*c]const GLdouble) void {
    return glad_glDepthRangeArraydvNV.?(arg_1500, arg_1501, arg_1502);
}
pub inline fn glDepthRangeArrayv(arg_1503: GLuint, arg_1504: GLsizei, arg_1505: [*c]const GLdouble) void {
    return glad_glDepthRangeArrayv.?(arg_1503, arg_1504, arg_1505);
}
pub inline fn glDepthRangeIndexed(arg_1506: GLuint, arg_1507: GLdouble, arg_1508: GLdouble) void {
    return glad_glDepthRangeIndexed.?(arg_1506, arg_1507, arg_1508);
}
pub inline fn glDepthRangeIndexeddNV(arg_1509: GLuint, arg_1510: GLdouble, arg_1511: GLdouble) void {
    return glad_glDepthRangeIndexeddNV.?(arg_1509, arg_1510, arg_1511);
}
pub inline fn glDepthRangedNV(arg_1512: GLdouble, arg_1513: GLdouble) void {
    return glad_glDepthRangedNV.?(arg_1512, arg_1513);
}
pub inline fn glDepthRangef(arg_1514: GLfloat, arg_1515: GLfloat) void {
    return glad_glDepthRangef.?(arg_1514, arg_1515);
}
pub inline fn glDepthRangefOES(arg_1516: GLclampf, arg_1517: GLclampf) void {
    return glad_glDepthRangefOES.?(arg_1516, arg_1517);
}
pub inline fn glDepthRangexOES(arg_1518: GLfixed, arg_1519: GLfixed) void {
    return glad_glDepthRangexOES.?(arg_1518, arg_1519);
}
pub inline fn glDetachObjectARB(arg_1520: GLhandleARB, arg_1521: GLhandleARB) void {
    return glad_glDetachObjectARB.?(arg_1520, arg_1521);
}
pub inline fn glDetachShader(arg_1522: GLuint, arg_1523: GLuint) void {
    return glad_glDetachShader.?(arg_1522, arg_1523);
}
pub inline fn glDetailTexFuncSGIS(arg_1524: GLenum, arg_1525: GLsizei, arg_1526: [*c]const GLfloat) void {
    return glad_glDetailTexFuncSGIS.?(arg_1524, arg_1525, arg_1526);
}
pub inline fn glDisable(arg_1527: GLenum) void {
    return glad_glDisable.?(arg_1527);
}
pub inline fn glDisableClientStateIndexedEXT(arg_1528: GLenum, arg_1529: GLuint) void {
    return glad_glDisableClientStateIndexedEXT.?(arg_1528, arg_1529);
}
pub inline fn glDisableClientStateiEXT(arg_1530: GLenum, arg_1531: GLuint) void {
    return glad_glDisableClientStateiEXT.?(arg_1530, arg_1531);
}
pub inline fn glDisableIndexedEXT(arg_1532: GLenum, arg_1533: GLuint) void {
    return glad_glDisableIndexedEXT.?(arg_1532, arg_1533);
}
pub inline fn glDisableVariantClientStateEXT(arg_1534: GLuint) void {
    return glad_glDisableVariantClientStateEXT.?(arg_1534);
}
pub inline fn glDisableVertexArrayAttrib(arg_1535: GLuint, arg_1536: GLuint) void {
    return glad_glDisableVertexArrayAttrib.?(arg_1535, arg_1536);
}
pub inline fn glDisableVertexArrayAttribEXT(arg_1537: GLuint, arg_1538: GLuint) void {
    return glad_glDisableVertexArrayAttribEXT.?(arg_1537, arg_1538);
}
pub inline fn glDisableVertexArrayEXT(arg_1539: GLuint, arg_1540: GLenum) void {
    return glad_glDisableVertexArrayEXT.?(arg_1539, arg_1540);
}
pub inline fn glDisableVertexAttribAPPLE(arg_1541: GLuint, arg_1542: GLenum) void {
    return glad_glDisableVertexAttribAPPLE.?(arg_1541, arg_1542);
}
pub inline fn glDisableVertexAttribArray(arg_1543: GLuint) void {
    return glad_glDisableVertexAttribArray.?(arg_1543);
}
pub inline fn glDisableVertexAttribArrayARB(arg_1544: GLuint) void {
    return glad_glDisableVertexAttribArrayARB.?(arg_1544);
}
pub inline fn glDisablei(arg_1545: GLenum, arg_1546: GLuint) void {
    return glad_glDisablei.?(arg_1545, arg_1546);
}
pub inline fn glDispatchCompute(arg_1547: GLuint, arg_1548: GLuint, arg_1549: GLuint) void {
    return glad_glDispatchCompute.?(arg_1547, arg_1548, arg_1549);
}
pub inline fn glDispatchComputeGroupSizeARB(arg_1550: GLuint, arg_1551: GLuint, arg_1552: GLuint, arg_1553: GLuint, arg_1554: GLuint, arg_1555: GLuint) void {
    return glad_glDispatchComputeGroupSizeARB.?(arg_1550, arg_1551, arg_1552, arg_1553, arg_1554, arg_1555);
}
pub inline fn glDispatchComputeIndirect(arg_1556: GLintptr) void {
    return glad_glDispatchComputeIndirect.?(arg_1556);
}
pub inline fn glDrawArrays(arg_1557: GLenum, arg_1558: GLint, arg_1559: GLsizei) void {
    return glad_glDrawArrays.?(arg_1557, arg_1558, arg_1559);
}
pub inline fn glDrawArraysEXT(arg_1560: GLenum, arg_1561: GLint, arg_1562: GLsizei) void {
    return glad_glDrawArraysEXT.?(arg_1560, arg_1561, arg_1562);
}
pub inline fn glDrawArraysIndirect(arg_1563: GLenum, arg_1564: ?*const anyopaque) void {
    return glad_glDrawArraysIndirect.?(arg_1563, arg_1564);
}
pub inline fn glDrawArraysInstanced(arg_1565: GLenum, arg_1566: GLint, arg_1567: GLsizei, arg_1568: GLsizei) void {
    return glad_glDrawArraysInstanced.?(arg_1565, arg_1566, arg_1567, arg_1568);
}
pub inline fn glDrawArraysInstancedARB(arg_1569: GLenum, arg_1570: GLint, arg_1571: GLsizei, arg_1572: GLsizei) void {
    return glad_glDrawArraysInstancedARB.?(arg_1569, arg_1570, arg_1571, arg_1572);
}
pub inline fn glDrawArraysInstancedBaseInstance(arg_1573: GLenum, arg_1574: GLint, arg_1575: GLsizei, arg_1576: GLsizei, arg_1577: GLuint) void {
    return glad_glDrawArraysInstancedBaseInstance.?(arg_1573, arg_1574, arg_1575, arg_1576, arg_1577);
}
pub inline fn glDrawArraysInstancedEXT(arg_1578: GLenum, arg_1579: GLint, arg_1580: GLsizei, arg_1581: GLsizei) void {
    return glad_glDrawArraysInstancedEXT.?(arg_1578, arg_1579, arg_1580, arg_1581);
}
pub inline fn glDrawBuffer(arg_1582: GLenum) void {
    return glad_glDrawBuffer.?(arg_1582);
}
pub inline fn glDrawBuffers(arg_1583: GLsizei, arg_1584: [*c]const GLenum) void {
    return glad_glDrawBuffers.?(arg_1583, arg_1584);
}
pub inline fn glDrawBuffersARB(arg_1585: GLsizei, arg_1586: [*c]const GLenum) void {
    return glad_glDrawBuffersARB.?(arg_1585, arg_1586);
}
pub inline fn glDrawBuffersATI(arg_1587: GLsizei, arg_1588: [*c]const GLenum) void {
    return glad_glDrawBuffersATI.?(arg_1587, arg_1588);
}
pub inline fn glDrawCommandsAddressNV(arg_1589: GLenum, arg_1590: [*c]const GLuint64, arg_1591: [*c]const GLsizei, arg_1592: GLuint) void {
    return glad_glDrawCommandsAddressNV.?(arg_1589, arg_1590, arg_1591, arg_1592);
}
pub inline fn glDrawCommandsNV(arg_1593: GLenum, arg_1594: GLuint, arg_1595: [*c]const GLintptr, arg_1596: [*c]const GLsizei, arg_1597: GLuint) void {
    return glad_glDrawCommandsNV.?(arg_1593, arg_1594, arg_1595, arg_1596, arg_1597);
}
pub inline fn glDrawCommandsStatesAddressNV(arg_1598: [*c]const GLuint64, arg_1599: [*c]const GLsizei, arg_1600: [*c]const GLuint, arg_1601: [*c]const GLuint, arg_1602: GLuint) void {
    return glad_glDrawCommandsStatesAddressNV.?(arg_1598, arg_1599, arg_1600, arg_1601, arg_1602);
}
pub inline fn glDrawCommandsStatesNV(arg_1603: GLuint, arg_1604: [*c]const GLintptr, arg_1605: [*c]const GLsizei, arg_1606: [*c]const GLuint, arg_1607: [*c]const GLuint, arg_1608: GLuint) void {
    return glad_glDrawCommandsStatesNV.?(arg_1603, arg_1604, arg_1605, arg_1606, arg_1607, arg_1608);
}
pub inline fn glDrawElementArrayAPPLE(arg_1609: GLenum, arg_1610: GLint, arg_1611: GLsizei) void {
    return glad_glDrawElementArrayAPPLE.?(arg_1609, arg_1610, arg_1611);
}
pub inline fn glDrawElementArrayATI(arg_1612: GLenum, arg_1613: GLsizei) void {
    return glad_glDrawElementArrayATI.?(arg_1612, arg_1613);
}
pub inline fn glDrawElements(arg_1614: GLenum, arg_1615: GLsizei, arg_1616: GLenum, arg_1617: ?*const anyopaque) void {
    return glad_glDrawElements.?(arg_1614, arg_1615, arg_1616, arg_1617);
}
pub inline fn glDrawElementsBaseVertex(arg_1618: GLenum, arg_1619: GLsizei, arg_1620: GLenum, arg_1621: ?*const anyopaque, arg_1622: GLint) void {
    return glad_glDrawElementsBaseVertex.?(arg_1618, arg_1619, arg_1620, arg_1621, arg_1622);
}
pub inline fn glDrawElementsIndirect(arg_1623: GLenum, arg_1624: GLenum, arg_1625: ?*const anyopaque) void {
    return glad_glDrawElementsIndirect.?(arg_1623, arg_1624, arg_1625);
}
pub inline fn glDrawElementsInstanced(arg_1626: GLenum, arg_1627: GLsizei, arg_1628: GLenum, arg_1629: ?*const anyopaque, arg_1630: GLsizei) void {
    return glad_glDrawElementsInstanced.?(arg_1626, arg_1627, arg_1628, arg_1629, arg_1630);
}
pub inline fn glDrawElementsInstancedARB(arg_1631: GLenum, arg_1632: GLsizei, arg_1633: GLenum, arg_1634: ?*const anyopaque, arg_1635: GLsizei) void {
    return glad_glDrawElementsInstancedARB.?(arg_1631, arg_1632, arg_1633, arg_1634, arg_1635);
}
pub inline fn glDrawElementsInstancedBaseInstance(arg_1636: GLenum, arg_1637: GLsizei, arg_1638: GLenum, arg_1639: ?*const anyopaque, arg_1640: GLsizei, arg_1641: GLuint) void {
    return glad_glDrawElementsInstancedBaseInstance.?(arg_1636, arg_1637, arg_1638, arg_1639, arg_1640, arg_1641);
}
pub inline fn glDrawElementsInstancedBaseVertex(arg_1642: GLenum, arg_1643: GLsizei, arg_1644: GLenum, arg_1645: ?*const anyopaque, arg_1646: GLsizei, arg_1647: GLint) void {
    return glad_glDrawElementsInstancedBaseVertex.?(arg_1642, arg_1643, arg_1644, arg_1645, arg_1646, arg_1647);
}
pub inline fn glDrawElementsInstancedBaseVertexBaseInstance(arg_1648: GLenum, arg_1649: GLsizei, arg_1650: GLenum, arg_1651: ?*const anyopaque, arg_1652: GLsizei, arg_1653: GLint, arg_1654: GLuint) void {
    return glad_glDrawElementsInstancedBaseVertexBaseInstance.?(arg_1648, arg_1649, arg_1650, arg_1651, arg_1652, arg_1653, arg_1654);
}
pub inline fn glDrawElementsInstancedEXT(arg_1655: GLenum, arg_1656: GLsizei, arg_1657: GLenum, arg_1658: ?*const anyopaque, arg_1659: GLsizei) void {
    return glad_glDrawElementsInstancedEXT.?(arg_1655, arg_1656, arg_1657, arg_1658, arg_1659);
}
pub inline fn glDrawMeshArraysSUN(arg_1660: GLenum, arg_1661: GLint, arg_1662: GLsizei, arg_1663: GLsizei) void {
    return glad_glDrawMeshArraysSUN.?(arg_1660, arg_1661, arg_1662, arg_1663);
}
pub inline fn glDrawMeshTasksIndirectNV(arg_1664: GLintptr) void {
    return glad_glDrawMeshTasksIndirectNV.?(arg_1664);
}
pub inline fn glDrawMeshTasksNV(arg_1665: GLuint, arg_1666: GLuint) void {
    return glad_glDrawMeshTasksNV.?(arg_1665, arg_1666);
}
pub inline fn glDrawRangeElementArrayAPPLE(arg_1667: GLenum, arg_1668: GLuint, arg_1669: GLuint, arg_1670: GLint, arg_1671: GLsizei) void {
    return glad_glDrawRangeElementArrayAPPLE.?(arg_1667, arg_1668, arg_1669, arg_1670, arg_1671);
}
pub inline fn glDrawRangeElementArrayATI(arg_1672: GLenum, arg_1673: GLuint, arg_1674: GLuint, arg_1675: GLsizei) void {
    return glad_glDrawRangeElementArrayATI.?(arg_1672, arg_1673, arg_1674, arg_1675);
}
pub inline fn glDrawRangeElements(arg_1676: GLenum, arg_1677: GLuint, arg_1678: GLuint, arg_1679: GLsizei, arg_1680: GLenum, arg_1681: ?*const anyopaque) void {
    return glad_glDrawRangeElements.?(arg_1676, arg_1677, arg_1678, arg_1679, arg_1680, arg_1681);
}
pub inline fn glDrawRangeElementsBaseVertex(arg_1682: GLenum, arg_1683: GLuint, arg_1684: GLuint, arg_1685: GLsizei, arg_1686: GLenum, arg_1687: ?*const anyopaque, arg_1688: GLint) void {
    return glad_glDrawRangeElementsBaseVertex.?(arg_1682, arg_1683, arg_1684, arg_1685, arg_1686, arg_1687, arg_1688);
}
pub inline fn glDrawRangeElementsEXT(arg_1689: GLenum, arg_1690: GLuint, arg_1691: GLuint, arg_1692: GLsizei, arg_1693: GLenum, arg_1694: ?*const anyopaque) void {
    return glad_glDrawRangeElementsEXT.?(arg_1689, arg_1690, arg_1691, arg_1692, arg_1693, arg_1694);
}
pub inline fn glDrawTextureNV(arg_1695: GLuint, arg_1696: GLuint, arg_1697: GLfloat, arg_1698: GLfloat, arg_1699: GLfloat, arg_1700: GLfloat, arg_1701: GLfloat, arg_1702: GLfloat, arg_1703: GLfloat, arg_1704: GLfloat, arg_1705: GLfloat) void {
    return glad_glDrawTextureNV.?(arg_1695, arg_1696, arg_1697, arg_1698, arg_1699, arg_1700, arg_1701, arg_1702, arg_1703, arg_1704, arg_1705);
}
pub inline fn glDrawTransformFeedback(arg_1706: GLenum, arg_1707: GLuint) void {
    return glad_glDrawTransformFeedback.?(arg_1706, arg_1707);
}
pub inline fn glDrawTransformFeedbackInstanced(arg_1708: GLenum, arg_1709: GLuint, arg_1710: GLsizei) void {
    return glad_glDrawTransformFeedbackInstanced.?(arg_1708, arg_1709, arg_1710);
}
pub inline fn glDrawTransformFeedbackNV(arg_1711: GLenum, arg_1712: GLuint) void {
    return glad_glDrawTransformFeedbackNV.?(arg_1711, arg_1712);
}
pub inline fn glDrawTransformFeedbackStream(arg_1713: GLenum, arg_1714: GLuint, arg_1715: GLuint) void {
    return glad_glDrawTransformFeedbackStream.?(arg_1713, arg_1714, arg_1715);
}
pub inline fn glDrawTransformFeedbackStreamInstanced(arg_1716: GLenum, arg_1717: GLuint, arg_1718: GLuint, arg_1719: GLsizei) void {
    return glad_glDrawTransformFeedbackStreamInstanced.?(arg_1716, arg_1717, arg_1718, arg_1719);
}
pub inline fn glDrawVkImageNV(arg_1720: GLuint64, arg_1721: GLuint, arg_1722: GLfloat, arg_1723: GLfloat, arg_1724: GLfloat, arg_1725: GLfloat, arg_1726: GLfloat, arg_1727: GLfloat, arg_1728: GLfloat, arg_1729: GLfloat, arg_1730: GLfloat) void {
    return glad_glDrawVkImageNV.?(arg_1720, arg_1721, arg_1722, arg_1723, arg_1724, arg_1725, arg_1726, arg_1727, arg_1728, arg_1729, arg_1730);
}
pub inline fn glEGLImageTargetTexStorageEXT(arg_1731: GLenum, arg_1732: GLeglImageOES, arg_1733: [*c]const GLint) void {
    return glad_glEGLImageTargetTexStorageEXT.?(arg_1731, arg_1732, arg_1733);
}
pub inline fn glEGLImageTargetTextureStorageEXT(arg_1734: GLuint, arg_1735: GLeglImageOES, arg_1736: [*c]const GLint) void {
    return glad_glEGLImageTargetTextureStorageEXT.?(arg_1734, arg_1735, arg_1736);
}
pub inline fn glEdgeFlagFormatNV(arg_1737: GLsizei) void {
    return glad_glEdgeFlagFormatNV.?(arg_1737);
}
pub inline fn glEdgeFlagPointerEXT(arg_1738: GLsizei, arg_1739: GLsizei, arg_1740: [*c]const GLboolean) void {
    return glad_glEdgeFlagPointerEXT.?(arg_1738, arg_1739, arg_1740);
}
pub inline fn glEdgeFlagPointerListIBM(arg_1741: GLint, arg_1742: [*c][*c]const GLboolean, arg_1743: GLint) void {
    return glad_glEdgeFlagPointerListIBM.?(arg_1741, arg_1742, arg_1743);
}
pub inline fn glElementPointerAPPLE(arg_1744: GLenum, arg_1745: ?*const anyopaque) void {
    return glad_glElementPointerAPPLE.?(arg_1744, arg_1745);
}
pub inline fn glElementPointerATI(arg_1746: GLenum, arg_1747: ?*const anyopaque) void {
    return glad_glElementPointerATI.?(arg_1746, arg_1747);
}
pub inline fn glEnable(arg_1748: GLenum) void {
    return glad_glEnable.?(arg_1748);
}
pub inline fn glEnableClientStateIndexedEXT(arg_1749: GLenum, arg_1750: GLuint) void {
    return glad_glEnableClientStateIndexedEXT.?(arg_1749, arg_1750);
}
pub inline fn glEnableClientStateiEXT(arg_1751: GLenum, arg_1752: GLuint) void {
    return glad_glEnableClientStateiEXT.?(arg_1751, arg_1752);
}
pub inline fn glEnableIndexedEXT(arg_1753: GLenum, arg_1754: GLuint) void {
    return glad_glEnableIndexedEXT.?(arg_1753, arg_1754);
}
pub inline fn glEnableVariantClientStateEXT(arg_1755: GLuint) void {
    return glad_glEnableVariantClientStateEXT.?(arg_1755);
}
pub inline fn glEnableVertexArrayAttrib(arg_1756: GLuint, arg_1757: GLuint) void {
    return glad_glEnableVertexArrayAttrib.?(arg_1756, arg_1757);
}
pub inline fn glEnableVertexArrayAttribEXT(arg_1758: GLuint, arg_1759: GLuint) void {
    return glad_glEnableVertexArrayAttribEXT.?(arg_1758, arg_1759);
}
pub inline fn glEnableVertexArrayEXT(arg_1760: GLuint, arg_1761: GLenum) void {
    return glad_glEnableVertexArrayEXT.?(arg_1760, arg_1761);
}
pub inline fn glEnableVertexAttribAPPLE(arg_1762: GLuint, arg_1763: GLenum) void {
    return glad_glEnableVertexAttribAPPLE.?(arg_1762, arg_1763);
}
pub inline fn glEnableVertexAttribArray(arg_1764: GLuint) void {
    return glad_glEnableVertexAttribArray.?(arg_1764);
}
pub inline fn glEnableVertexAttribArrayARB(arg_1765: GLuint) void {
    return glad_glEnableVertexAttribArrayARB.?(arg_1765);
}
pub inline fn glEnablei(arg_1766: GLenum, arg_1767: GLuint) void {
    return glad_glEnablei.?(arg_1766, arg_1767);
}
pub inline fn glEndConditionalRender() void {
    return glad_glEndConditionalRender.?();
}
pub inline fn glEndConditionalRenderNV() void {
    return glad_glEndConditionalRenderNV.?();
}
pub inline fn glEndConditionalRenderNVX() void {
    return glad_glEndConditionalRenderNVX.?();
}
pub inline fn glEndFragmentShaderATI() void {
    return glad_glEndFragmentShaderATI.?();
}
pub inline fn glEndOcclusionQueryNV() void {
    return glad_glEndOcclusionQueryNV.?();
}
pub inline fn glEndPerfMonitorAMD(arg_1768: GLuint) void {
    return glad_glEndPerfMonitorAMD.?(arg_1768);
}
pub inline fn glEndPerfQueryINTEL(arg_1769: GLuint) void {
    return glad_glEndPerfQueryINTEL.?(arg_1769);
}
pub inline fn glEndQuery(arg_1770: GLenum) void {
    return glad_glEndQuery.?(arg_1770);
}
pub inline fn glEndQueryARB(arg_1771: GLenum) void {
    return glad_glEndQueryARB.?(arg_1771);
}
pub inline fn glEndQueryIndexed(arg_1772: GLenum, arg_1773: GLuint) void {
    return glad_glEndQueryIndexed.?(arg_1772, arg_1773);
}
pub inline fn glEndTransformFeedback() void {
    return glad_glEndTransformFeedback.?();
}
pub inline fn glEndTransformFeedbackEXT() void {
    return glad_glEndTransformFeedbackEXT.?();
}
pub inline fn glEndTransformFeedbackNV() void {
    return glad_glEndTransformFeedbackNV.?();
}
pub inline fn glEndVertexShaderEXT() void {
    return glad_glEndVertexShaderEXT.?();
}
pub inline fn glEndVideoCaptureNV(arg_1774: GLuint) void {
    return glad_glEndVideoCaptureNV.?(arg_1774);
}
pub inline fn glEvalCoord1xOES(arg_1775: GLfixed) void {
    return glad_glEvalCoord1xOES.?(arg_1775);
}
pub inline fn glEvalCoord1xvOES(arg_1776: [*c]const GLfixed) void {
    return glad_glEvalCoord1xvOES.?(arg_1776);
}
pub inline fn glEvalCoord2xOES(arg_1777: GLfixed, arg_1778: GLfixed) void {
    return glad_glEvalCoord2xOES.?(arg_1777, arg_1778);
}
pub inline fn glEvalCoord2xvOES(arg_1779: [*c]const GLfixed) void {
    return glad_glEvalCoord2xvOES.?(arg_1779);
}
pub inline fn glEvalMapsNV(arg_1780: GLenum, arg_1781: GLenum) void {
    return glad_glEvalMapsNV.?(arg_1780, arg_1781);
}
pub inline fn glEvaluateDepthValuesARB() void {
    return glad_glEvaluateDepthValuesARB.?();
}
pub inline fn glExecuteProgramNV(arg_1782: GLenum, arg_1783: GLuint, arg_1784: [*c]const GLfloat) void {
    return glad_glExecuteProgramNV.?(arg_1782, arg_1783, arg_1784);
}
pub inline fn glExtractComponentEXT(arg_1785: GLuint, arg_1786: GLuint, arg_1787: GLuint) void {
    return glad_glExtractComponentEXT.?(arg_1785, arg_1786, arg_1787);
}
pub inline fn glFeedbackBufferxOES(arg_1788: GLsizei, arg_1789: GLenum, arg_1790: [*c]const GLfixed) void {
    return glad_glFeedbackBufferxOES.?(arg_1788, arg_1789, arg_1790);
}
pub inline fn glFenceSync(arg_1791: GLenum, arg_1792: GLbitfield) GLsync {
    return glad_glFenceSync.?(arg_1791, arg_1792);
}
pub inline fn glFinalCombinerInputNV(arg_1793: GLenum, arg_1794: GLenum, arg_1795: GLenum, arg_1796: GLenum) void {
    return glad_glFinalCombinerInputNV.?(arg_1793, arg_1794, arg_1795, arg_1796);
}
pub inline fn glFinish() void {
    return glad_glFinish.?();
}
pub inline fn glFinishAsyncSGIX(arg_1797: [*c]GLuint) GLint {
    return glad_glFinishAsyncSGIX.?(arg_1797);
}
pub inline fn glFinishFenceAPPLE(arg_1798: GLuint) void {
    return glad_glFinishFenceAPPLE.?(arg_1798);
}
pub inline fn glFinishFenceNV(arg_1799: GLuint) void {
    return glad_glFinishFenceNV.?(arg_1799);
}
pub inline fn glFinishObjectAPPLE(arg_1800: GLenum, arg_1801: GLint) void {
    return glad_glFinishObjectAPPLE.?(arg_1800, arg_1801);
}
pub inline fn glFinishTextureSUNX() void {
    return glad_glFinishTextureSUNX.?();
}
pub inline fn glFlush() void {
    return glad_glFlush.?();
}
pub inline fn glFlushMappedBufferRange(arg_1802: GLenum, arg_1803: GLintptr, arg_1804: GLsizeiptr) void {
    return glad_glFlushMappedBufferRange.?(arg_1802, arg_1803, arg_1804);
}
pub inline fn glFlushMappedBufferRangeAPPLE(arg_1805: GLenum, arg_1806: GLintptr, arg_1807: GLsizeiptr) void {
    return glad_glFlushMappedBufferRangeAPPLE.?(arg_1805, arg_1806, arg_1807);
}
pub inline fn glFlushMappedNamedBufferRange(arg_1808: GLuint, arg_1809: GLintptr, arg_1810: GLsizeiptr) void {
    return glad_glFlushMappedNamedBufferRange.?(arg_1808, arg_1809, arg_1810);
}
pub inline fn glFlushMappedNamedBufferRangeEXT(arg_1811: GLuint, arg_1812: GLintptr, arg_1813: GLsizeiptr) void {
    return glad_glFlushMappedNamedBufferRangeEXT.?(arg_1811, arg_1812, arg_1813);
}
pub inline fn glFlushPixelDataRangeNV(arg_1814: GLenum) void {
    return glad_glFlushPixelDataRangeNV.?(arg_1814);
}
pub inline fn glFlushRasterSGIX() void {
    return glad_glFlushRasterSGIX.?();
}
pub inline fn glFlushStaticDataIBM(arg_1815: GLenum) void {
    return glad_glFlushStaticDataIBM.?(arg_1815);
}
pub inline fn glFlushVertexArrayRangeAPPLE(arg_1816: GLsizei, arg_1817: ?*anyopaque) void {
    return glad_glFlushVertexArrayRangeAPPLE.?(arg_1816, arg_1817);
}
pub inline fn glFlushVertexArrayRangeNV() void {
    return glad_glFlushVertexArrayRangeNV.?();
}
pub inline fn glFogCoordFormatNV(arg_1818: GLenum, arg_1819: GLsizei) void {
    return glad_glFogCoordFormatNV.?(arg_1818, arg_1819);
}
pub inline fn glFogCoordPointerEXT(arg_1820: GLenum, arg_1821: GLsizei, arg_1822: ?*const anyopaque) void {
    return glad_glFogCoordPointerEXT.?(arg_1820, arg_1821, arg_1822);
}
pub inline fn glFogCoordPointerListIBM(arg_1823: GLenum, arg_1824: GLint, arg_1825: [*c]?*const anyopaque, arg_1826: GLint) void {
    return glad_glFogCoordPointerListIBM.?(arg_1823, arg_1824, arg_1825, arg_1826);
}
pub inline fn glFogCoorddEXT(arg_1827: GLdouble) void {
    return glad_glFogCoorddEXT.?(arg_1827);
}
pub inline fn glFogCoorddvEXT(arg_1828: [*c]const GLdouble) void {
    return glad_glFogCoorddvEXT.?(arg_1828);
}
pub inline fn glFogCoordfEXT(arg_1829: GLfloat) void {
    return glad_glFogCoordfEXT.?(arg_1829);
}
pub inline fn glFogCoordfvEXT(arg_1830: [*c]const GLfloat) void {
    return glad_glFogCoordfvEXT.?(arg_1830);
}
pub inline fn glFogCoordhNV(arg_1831: GLhalfNV) void {
    return glad_glFogCoordhNV.?(arg_1831);
}
pub inline fn glFogCoordhvNV(arg_1832: [*c]const GLhalfNV) void {
    return glad_glFogCoordhvNV.?(arg_1832);
}
pub inline fn glFogFuncSGIS(arg_1833: GLsizei, arg_1834: [*c]const GLfloat) void {
    return glad_glFogFuncSGIS.?(arg_1833, arg_1834);
}
pub inline fn glFogxOES(arg_1835: GLenum, arg_1836: GLfixed) void {
    return glad_glFogxOES.?(arg_1835, arg_1836);
}
pub inline fn glFogxvOES(arg_1837: GLenum, arg_1838: [*c]const GLfixed) void {
    return glad_glFogxvOES.?(arg_1837, arg_1838);
}
pub inline fn glFragmentColorMaterialSGIX(arg_1839: GLenum, arg_1840: GLenum) void {
    return glad_glFragmentColorMaterialSGIX.?(arg_1839, arg_1840);
}
pub inline fn glFragmentCoverageColorNV(arg_1841: GLuint) void {
    return glad_glFragmentCoverageColorNV.?(arg_1841);
}
pub inline fn glFragmentLightModelfSGIX(arg_1842: GLenum, arg_1843: GLfloat) void {
    return glad_glFragmentLightModelfSGIX.?(arg_1842, arg_1843);
}
pub inline fn glFragmentLightModelfvSGIX(arg_1844: GLenum, arg_1845: [*c]const GLfloat) void {
    return glad_glFragmentLightModelfvSGIX.?(arg_1844, arg_1845);
}
pub inline fn glFragmentLightModeliSGIX(arg_1846: GLenum, arg_1847: GLint) void {
    return glad_glFragmentLightModeliSGIX.?(arg_1846, arg_1847);
}
pub inline fn glFragmentLightModelivSGIX(arg_1848: GLenum, arg_1849: [*c]const GLint) void {
    return glad_glFragmentLightModelivSGIX.?(arg_1848, arg_1849);
}
pub inline fn glFragmentLightfSGIX(arg_1850: GLenum, arg_1851: GLenum, arg_1852: GLfloat) void {
    return glad_glFragmentLightfSGIX.?(arg_1850, arg_1851, arg_1852);
}
pub inline fn glFragmentLightfvSGIX(arg_1853: GLenum, arg_1854: GLenum, arg_1855: [*c]const GLfloat) void {
    return glad_glFragmentLightfvSGIX.?(arg_1853, arg_1854, arg_1855);
}
pub inline fn glFragmentLightiSGIX(arg_1856: GLenum, arg_1857: GLenum, arg_1858: GLint) void {
    return glad_glFragmentLightiSGIX.?(arg_1856, arg_1857, arg_1858);
}
pub inline fn glFragmentLightivSGIX(arg_1859: GLenum, arg_1860: GLenum, arg_1861: [*c]const GLint) void {
    return glad_glFragmentLightivSGIX.?(arg_1859, arg_1860, arg_1861);
}
pub inline fn glFragmentMaterialfSGIX(arg_1862: GLenum, arg_1863: GLenum, arg_1864: GLfloat) void {
    return glad_glFragmentMaterialfSGIX.?(arg_1862, arg_1863, arg_1864);
}
pub inline fn glFragmentMaterialfvSGIX(arg_1865: GLenum, arg_1866: GLenum, arg_1867: [*c]const GLfloat) void {
    return glad_glFragmentMaterialfvSGIX.?(arg_1865, arg_1866, arg_1867);
}
pub inline fn glFragmentMaterialiSGIX(arg_1868: GLenum, arg_1869: GLenum, arg_1870: GLint) void {
    return glad_glFragmentMaterialiSGIX.?(arg_1868, arg_1869, arg_1870);
}
pub inline fn glFragmentMaterialivSGIX(arg_1871: GLenum, arg_1872: GLenum, arg_1873: [*c]const GLint) void {
    return glad_glFragmentMaterialivSGIX.?(arg_1871, arg_1872, arg_1873);
}
pub inline fn glFrameTerminatorGREMEDY() void {
    return glad_glFrameTerminatorGREMEDY.?();
}
pub inline fn glFrameZoomSGIX(arg_1874: GLint) void {
    return glad_glFrameZoomSGIX.?(arg_1874);
}
pub inline fn glFramebufferDrawBufferEXT(arg_1875: GLuint, arg_1876: GLenum) void {
    return glad_glFramebufferDrawBufferEXT.?(arg_1875, arg_1876);
}
pub inline fn glFramebufferDrawBuffersEXT(arg_1877: GLuint, arg_1878: GLsizei, arg_1879: [*c]const GLenum) void {
    return glad_glFramebufferDrawBuffersEXT.?(arg_1877, arg_1878, arg_1879);
}
pub inline fn glFramebufferFetchBarrierEXT() void {
    return glad_glFramebufferFetchBarrierEXT.?();
}
pub inline fn glFramebufferParameteri(arg_1880: GLenum, arg_1881: GLenum, arg_1882: GLint) void {
    return glad_glFramebufferParameteri.?(arg_1880, arg_1881, arg_1882);
}
pub inline fn glFramebufferParameteriMESA(arg_1883: GLenum, arg_1884: GLenum, arg_1885: GLint) void {
    return glad_glFramebufferParameteriMESA.?(arg_1883, arg_1884, arg_1885);
}
pub inline fn glFramebufferReadBufferEXT(arg_1886: GLuint, arg_1887: GLenum) void {
    return glad_glFramebufferReadBufferEXT.?(arg_1886, arg_1887);
}
pub inline fn glFramebufferRenderbuffer(arg_1888: GLenum, arg_1889: GLenum, arg_1890: GLenum, arg_1891: GLuint) void {
    return glad_glFramebufferRenderbuffer.?(arg_1888, arg_1889, arg_1890, arg_1891);
}
pub inline fn glFramebufferRenderbufferEXT(arg_1892: GLenum, arg_1893: GLenum, arg_1894: GLenum, arg_1895: GLuint) void {
    return glad_glFramebufferRenderbufferEXT.?(arg_1892, arg_1893, arg_1894, arg_1895);
}
pub inline fn glFramebufferSampleLocationsfvARB(arg_1896: GLenum, arg_1897: GLuint, arg_1898: GLsizei, arg_1899: [*c]const GLfloat) void {
    return glad_glFramebufferSampleLocationsfvARB.?(arg_1896, arg_1897, arg_1898, arg_1899);
}
pub inline fn glFramebufferSampleLocationsfvNV(arg_1900: GLenum, arg_1901: GLuint, arg_1902: GLsizei, arg_1903: [*c]const GLfloat) void {
    return glad_glFramebufferSampleLocationsfvNV.?(arg_1900, arg_1901, arg_1902, arg_1903);
}
pub inline fn glFramebufferSamplePositionsfvAMD(arg_1904: GLenum, arg_1905: GLuint, arg_1906: GLuint, arg_1907: [*c]const GLfloat) void {
    return glad_glFramebufferSamplePositionsfvAMD.?(arg_1904, arg_1905, arg_1906, arg_1907);
}
pub inline fn glFramebufferTexture(arg_1908: GLenum, arg_1909: GLenum, arg_1910: GLuint, arg_1911: GLint) void {
    return glad_glFramebufferTexture.?(arg_1908, arg_1909, arg_1910, arg_1911);
}
pub inline fn glFramebufferTexture1D(arg_1912: GLenum, arg_1913: GLenum, arg_1914: GLenum, arg_1915: GLuint, arg_1916: GLint) void {
    return glad_glFramebufferTexture1D.?(arg_1912, arg_1913, arg_1914, arg_1915, arg_1916);
}
pub inline fn glFramebufferTexture1DEXT(arg_1917: GLenum, arg_1918: GLenum, arg_1919: GLenum, arg_1920: GLuint, arg_1921: GLint) void {
    return glad_glFramebufferTexture1DEXT.?(arg_1917, arg_1918, arg_1919, arg_1920, arg_1921);
}
pub inline fn glFramebufferTexture2D(arg_1922: GLenum, arg_1923: GLenum, arg_1924: GLenum, arg_1925: GLuint, arg_1926: GLint) void {
    return glad_glFramebufferTexture2D.?(arg_1922, arg_1923, arg_1924, arg_1925, arg_1926);
}
pub inline fn glFramebufferTexture2DEXT(arg_1927: GLenum, arg_1928: GLenum, arg_1929: GLenum, arg_1930: GLuint, arg_1931: GLint) void {
    return glad_glFramebufferTexture2DEXT.?(arg_1927, arg_1928, arg_1929, arg_1930, arg_1931);
}
pub inline fn glFramebufferTexture3D(arg_1932: GLenum, arg_1933: GLenum, arg_1934: GLenum, arg_1935: GLuint, arg_1936: GLint, arg_1937: GLint) void {
    return glad_glFramebufferTexture3D.?(arg_1932, arg_1933, arg_1934, arg_1935, arg_1936, arg_1937);
}
pub inline fn glFramebufferTexture3DEXT(arg_1938: GLenum, arg_1939: GLenum, arg_1940: GLenum, arg_1941: GLuint, arg_1942: GLint, arg_1943: GLint) void {
    return glad_glFramebufferTexture3DEXT.?(arg_1938, arg_1939, arg_1940, arg_1941, arg_1942, arg_1943);
}
pub inline fn glFramebufferTextureARB(arg_1944: GLenum, arg_1945: GLenum, arg_1946: GLuint, arg_1947: GLint) void {
    return glad_glFramebufferTextureARB.?(arg_1944, arg_1945, arg_1946, arg_1947);
}
pub inline fn glFramebufferTextureEXT(arg_1948: GLenum, arg_1949: GLenum, arg_1950: GLuint, arg_1951: GLint) void {
    return glad_glFramebufferTextureEXT.?(arg_1948, arg_1949, arg_1950, arg_1951);
}
pub inline fn glFramebufferTextureFaceARB(arg_1952: GLenum, arg_1953: GLenum, arg_1954: GLuint, arg_1955: GLint, arg_1956: GLenum) void {
    return glad_glFramebufferTextureFaceARB.?(arg_1952, arg_1953, arg_1954, arg_1955, arg_1956);
}
pub inline fn glFramebufferTextureFaceEXT(arg_1957: GLenum, arg_1958: GLenum, arg_1959: GLuint, arg_1960: GLint, arg_1961: GLenum) void {
    return glad_glFramebufferTextureFaceEXT.?(arg_1957, arg_1958, arg_1959, arg_1960, arg_1961);
}
pub inline fn glFramebufferTextureLayer(arg_1962: GLenum, arg_1963: GLenum, arg_1964: GLuint, arg_1965: GLint, arg_1966: GLint) void {
    return glad_glFramebufferTextureLayer.?(arg_1962, arg_1963, arg_1964, arg_1965, arg_1966);
}
pub inline fn glFramebufferTextureLayerARB(arg_1967: GLenum, arg_1968: GLenum, arg_1969: GLuint, arg_1970: GLint, arg_1971: GLint) void {
    return glad_glFramebufferTextureLayerARB.?(arg_1967, arg_1968, arg_1969, arg_1970, arg_1971);
}
pub inline fn glFramebufferTextureLayerEXT(arg_1972: GLenum, arg_1973: GLenum, arg_1974: GLuint, arg_1975: GLint, arg_1976: GLint) void {
    return glad_glFramebufferTextureLayerEXT.?(arg_1972, arg_1973, arg_1974, arg_1975, arg_1976);
}
pub inline fn glFramebufferTextureMultiviewOVR(arg_1977: GLenum, arg_1978: GLenum, arg_1979: GLuint, arg_1980: GLint, arg_1981: GLint, arg_1982: GLsizei) void {
    return glad_glFramebufferTextureMultiviewOVR.?(arg_1977, arg_1978, arg_1979, arg_1980, arg_1981, arg_1982);
}
pub inline fn glFreeObjectBufferATI(arg_1983: GLuint) void {
    return glad_glFreeObjectBufferATI.?(arg_1983);
}
pub inline fn glFrontFace(arg_1984: GLenum) void {
    return glad_glFrontFace.?(arg_1984);
}
pub inline fn glFrustumfOES(arg_1985: GLfloat, arg_1986: GLfloat, arg_1987: GLfloat, arg_1988: GLfloat, arg_1989: GLfloat, arg_1990: GLfloat) void {
    return glad_glFrustumfOES.?(arg_1985, arg_1986, arg_1987, arg_1988, arg_1989, arg_1990);
}
pub inline fn glFrustumxOES(arg_1991: GLfixed, arg_1992: GLfixed, arg_1993: GLfixed, arg_1994: GLfixed, arg_1995: GLfixed, arg_1996: GLfixed) void {
    return glad_glFrustumxOES.?(arg_1991, arg_1992, arg_1993, arg_1994, arg_1995, arg_1996);
}
pub inline fn glGenAsyncMarkersSGIX(arg_1997: GLsizei) GLuint {
    return glad_glGenAsyncMarkersSGIX.?(arg_1997);
}
pub inline fn glGenBuffers(arg_1998: GLsizei, arg_1999: [*c]GLuint) void {
    return glad_glGenBuffers.?(arg_1998, arg_1999);
}
pub inline fn glGenBuffersARB(arg_2000: GLsizei, arg_2001: [*c]GLuint) void {
    return glad_glGenBuffersARB.?(arg_2000, arg_2001);
}
pub inline fn glGenFencesAPPLE(arg_2002: GLsizei, arg_2003: [*c]GLuint) void {
    return glad_glGenFencesAPPLE.?(arg_2002, arg_2003);
}
pub inline fn glGenFencesNV(arg_2004: GLsizei, arg_2005: [*c]GLuint) void {
    return glad_glGenFencesNV.?(arg_2004, arg_2005);
}
pub inline fn glGenFragmentShadersATI(arg_2006: GLuint) GLuint {
    return glad_glGenFragmentShadersATI.?(arg_2006);
}
pub inline fn glGenFramebuffers(arg_2007: GLsizei, arg_2008: [*c]GLuint) void {
    return glad_glGenFramebuffers.?(arg_2007, arg_2008);
}
pub inline fn glGenFramebuffersEXT(arg_2009: GLsizei, arg_2010: [*c]GLuint) void {
    return glad_glGenFramebuffersEXT.?(arg_2009, arg_2010);
}
pub inline fn glGenNamesAMD(arg_2011: GLenum, arg_2012: GLuint, arg_2013: [*c]GLuint) void {
    return glad_glGenNamesAMD.?(arg_2011, arg_2012, arg_2013);
}
pub inline fn glGenOcclusionQueriesNV(arg_2014: GLsizei, arg_2015: [*c]GLuint) void {
    return glad_glGenOcclusionQueriesNV.?(arg_2014, arg_2015);
}
pub inline fn glGenPathsNV(arg_2016: GLsizei) GLuint {
    return glad_glGenPathsNV.?(arg_2016);
}
pub inline fn glGenPerfMonitorsAMD(arg_2017: GLsizei, arg_2018: [*c]GLuint) void {
    return glad_glGenPerfMonitorsAMD.?(arg_2017, arg_2018);
}
pub inline fn glGenProgramPipelines(arg_2019: GLsizei, arg_2020: [*c]GLuint) void {
    return glad_glGenProgramPipelines.?(arg_2019, arg_2020);
}
pub inline fn glGenProgramsARB(arg_2021: GLsizei, arg_2022: [*c]GLuint) void {
    return glad_glGenProgramsARB.?(arg_2021, arg_2022);
}
pub inline fn glGenProgramsNV(arg_2023: GLsizei, arg_2024: [*c]GLuint) void {
    return glad_glGenProgramsNV.?(arg_2023, arg_2024);
}
pub inline fn glGenQueries(arg_2025: GLsizei, arg_2026: [*c]GLuint) void {
    return glad_glGenQueries.?(arg_2025, arg_2026);
}
pub inline fn glGenQueriesARB(arg_2027: GLsizei, arg_2028: [*c]GLuint) void {
    return glad_glGenQueriesARB.?(arg_2027, arg_2028);
}
pub inline fn glGenQueryResourceTagNV(arg_2029: GLsizei, arg_2030: [*c]GLint) void {
    return glad_glGenQueryResourceTagNV.?(arg_2029, arg_2030);
}
pub inline fn glGenRenderbuffers(arg_2031: GLsizei, arg_2032: [*c]GLuint) void {
    return glad_glGenRenderbuffers.?(arg_2031, arg_2032);
}
pub inline fn glGenRenderbuffersEXT(arg_2033: GLsizei, arg_2034: [*c]GLuint) void {
    return glad_glGenRenderbuffersEXT.?(arg_2033, arg_2034);
}
pub inline fn glGenSamplers(arg_2035: GLsizei, arg_2036: [*c]GLuint) void {
    return glad_glGenSamplers.?(arg_2035, arg_2036);
}
pub inline fn glGenSemaphoresEXT(arg_2037: GLsizei, arg_2038: [*c]GLuint) void {
    return glad_glGenSemaphoresEXT.?(arg_2037, arg_2038);
}
pub inline fn glGenSymbolsEXT(arg_2039: GLenum, arg_2040: GLenum, arg_2041: GLenum, arg_2042: GLuint) GLuint {
    return glad_glGenSymbolsEXT.?(arg_2039, arg_2040, arg_2041, arg_2042);
}
pub inline fn glGenTextures(arg_2043: GLsizei, arg_2044: [*c]GLuint) void {
    return glad_glGenTextures.?(arg_2043, arg_2044);
}
pub inline fn glGenTexturesEXT(arg_2045: GLsizei, arg_2046: [*c]GLuint) void {
    return glad_glGenTexturesEXT.?(arg_2045, arg_2046);
}
pub inline fn glGenTransformFeedbacks(arg_2047: GLsizei, arg_2048: [*c]GLuint) void {
    return glad_glGenTransformFeedbacks.?(arg_2047, arg_2048);
}
pub inline fn glGenTransformFeedbacksNV(arg_2049: GLsizei, arg_2050: [*c]GLuint) void {
    return glad_glGenTransformFeedbacksNV.?(arg_2049, arg_2050);
}
pub inline fn glGenVertexArrays(arg_2051: GLsizei, arg_2052: [*c]GLuint) void {
    return glad_glGenVertexArrays.?(arg_2051, arg_2052);
}
pub inline fn glGenVertexArraysAPPLE(arg_2053: GLsizei, arg_2054: [*c]GLuint) void {
    return glad_glGenVertexArraysAPPLE.?(arg_2053, arg_2054);
}
pub inline fn glGenVertexShadersEXT(arg_2055: GLuint) GLuint {
    return glad_glGenVertexShadersEXT.?(arg_2055);
}
pub inline fn glGenerateMipmap(arg_2056: GLenum) void {
    return glad_glGenerateMipmap.?(arg_2056);
}
pub inline fn glGenerateMipmapEXT(arg_2057: GLenum) void {
    return glad_glGenerateMipmapEXT.?(arg_2057);
}
pub inline fn glGenerateMultiTexMipmapEXT(arg_2058: GLenum, arg_2059: GLenum) void {
    return glad_glGenerateMultiTexMipmapEXT.?(arg_2058, arg_2059);
}
pub inline fn glGenerateTextureMipmap(arg_2060: GLuint) void {
    return glad_glGenerateTextureMipmap.?(arg_2060);
}
pub inline fn glGenerateTextureMipmapEXT(arg_2061: GLuint, arg_2062: GLenum) void {
    return glad_glGenerateTextureMipmapEXT.?(arg_2061, arg_2062);
}
pub inline fn glGetActiveAtomicCounterBufferiv(arg_2063: GLuint, arg_2064: GLuint, arg_2065: GLenum, arg_2066: [*c]GLint) void {
    return glad_glGetActiveAtomicCounterBufferiv.?(arg_2063, arg_2064, arg_2065, arg_2066);
}
pub inline fn glGetActiveAttrib(arg_2067: GLuint, arg_2068: GLuint, arg_2069: GLsizei, arg_2070: [*c]GLsizei, arg_2071: [*c]GLint, arg_2072: [*c]GLenum, arg_2073: [*c]GLchar) void {
    return glad_glGetActiveAttrib.?(arg_2067, arg_2068, arg_2069, arg_2070, arg_2071, arg_2072, arg_2073);
}
pub inline fn glGetActiveAttribARB(arg_2074: GLhandleARB, arg_2075: GLuint, arg_2076: GLsizei, arg_2077: [*c]GLsizei, arg_2078: [*c]GLint, arg_2079: [*c]GLenum, arg_2080: [*c]GLcharARB) void {
    return glad_glGetActiveAttribARB.?(arg_2074, arg_2075, arg_2076, arg_2077, arg_2078, arg_2079, arg_2080);
}
pub inline fn glGetActiveSubroutineName(arg_2081: GLuint, arg_2082: GLenum, arg_2083: GLuint, arg_2084: GLsizei, arg_2085: [*c]GLsizei, arg_2086: [*c]GLchar) void {
    return glad_glGetActiveSubroutineName.?(arg_2081, arg_2082, arg_2083, arg_2084, arg_2085, arg_2086);
}
pub inline fn glGetActiveSubroutineUniformName(arg_2087: GLuint, arg_2088: GLenum, arg_2089: GLuint, arg_2090: GLsizei, arg_2091: [*c]GLsizei, arg_2092: [*c]GLchar) void {
    return glad_glGetActiveSubroutineUniformName.?(arg_2087, arg_2088, arg_2089, arg_2090, arg_2091, arg_2092);
}
pub inline fn glGetActiveSubroutineUniformiv(arg_2093: GLuint, arg_2094: GLenum, arg_2095: GLuint, arg_2096: GLenum, arg_2097: [*c]GLint) void {
    return glad_glGetActiveSubroutineUniformiv.?(arg_2093, arg_2094, arg_2095, arg_2096, arg_2097);
}
pub inline fn glGetActiveUniform(arg_2098: GLuint, arg_2099: GLuint, arg_2100: GLsizei, arg_2101: [*c]GLsizei, arg_2102: [*c]GLint, arg_2103: [*c]GLenum, arg_2104: [*c]GLchar) void {
    return glad_glGetActiveUniform.?(arg_2098, arg_2099, arg_2100, arg_2101, arg_2102, arg_2103, arg_2104);
}
pub inline fn glGetActiveUniformARB(arg_2105: GLhandleARB, arg_2106: GLuint, arg_2107: GLsizei, arg_2108: [*c]GLsizei, arg_2109: [*c]GLint, arg_2110: [*c]GLenum, arg_2111: [*c]GLcharARB) void {
    return glad_glGetActiveUniformARB.?(arg_2105, arg_2106, arg_2107, arg_2108, arg_2109, arg_2110, arg_2111);
}
pub inline fn glGetActiveUniformBlockName(arg_2112: GLuint, arg_2113: GLuint, arg_2114: GLsizei, arg_2115: [*c]GLsizei, arg_2116: [*c]GLchar) void {
    return glad_glGetActiveUniformBlockName.?(arg_2112, arg_2113, arg_2114, arg_2115, arg_2116);
}
pub inline fn glGetActiveUniformBlockiv(arg_2117: GLuint, arg_2118: GLuint, arg_2119: GLenum, arg_2120: [*c]GLint) void {
    return glad_glGetActiveUniformBlockiv.?(arg_2117, arg_2118, arg_2119, arg_2120);
}
pub inline fn glGetActiveUniformName(arg_2121: GLuint, arg_2122: GLuint, arg_2123: GLsizei, arg_2124: [*c]GLsizei, arg_2125: [*c]GLchar) void {
    return glad_glGetActiveUniformName.?(arg_2121, arg_2122, arg_2123, arg_2124, arg_2125);
}
pub inline fn glGetActiveUniformsiv(arg_2126: GLuint, arg_2127: GLsizei, arg_2128: [*c]const GLuint, arg_2129: GLenum, arg_2130: [*c]GLint) void {
    return glad_glGetActiveUniformsiv.?(arg_2126, arg_2127, arg_2128, arg_2129, arg_2130);
}
pub inline fn glGetActiveVaryingNV(arg_2131: GLuint, arg_2132: GLuint, arg_2133: GLsizei, arg_2134: [*c]GLsizei, arg_2135: [*c]GLsizei, arg_2136: [*c]GLenum, arg_2137: [*c]GLchar) void {
    return glad_glGetActiveVaryingNV.?(arg_2131, arg_2132, arg_2133, arg_2134, arg_2135, arg_2136, arg_2137);
}
pub inline fn glGetArrayObjectfvATI(arg_2138: GLenum, arg_2139: GLenum, arg_2140: [*c]GLfloat) void {
    return glad_glGetArrayObjectfvATI.?(arg_2138, arg_2139, arg_2140);
}
pub inline fn glGetArrayObjectivATI(arg_2141: GLenum, arg_2142: GLenum, arg_2143: [*c]GLint) void {
    return glad_glGetArrayObjectivATI.?(arg_2141, arg_2142, arg_2143);
}
pub inline fn glGetAttachedObjectsARB(arg_2144: GLhandleARB, arg_2145: GLsizei, arg_2146: [*c]GLsizei, arg_2147: [*c]GLhandleARB) void {
    return glad_glGetAttachedObjectsARB.?(arg_2144, arg_2145, arg_2146, arg_2147);
}
pub inline fn glGetAttachedShaders(arg_2148: GLuint, arg_2149: GLsizei, arg_2150: [*c]GLsizei, arg_2151: [*c]GLuint) void {
    return glad_glGetAttachedShaders.?(arg_2148, arg_2149, arg_2150, arg_2151);
}
pub inline fn glGetAttribLocation(arg_2152: GLuint, arg_2153: [*c]const GLchar) GLint {
    return glad_glGetAttribLocation.?(arg_2152, arg_2153);
}
pub inline fn glGetAttribLocationARB(arg_2154: GLhandleARB, arg_2155: [*c]const GLcharARB) GLint {
    return glad_glGetAttribLocationARB.?(arg_2154, arg_2155);
}
pub inline fn glGetBooleanIndexedvEXT(arg_2156: GLenum, arg_2157: GLuint, arg_2158: [*c]GLboolean) void {
    return glad_glGetBooleanIndexedvEXT.?(arg_2156, arg_2157, arg_2158);
}
pub inline fn glGetBooleani_v(arg_2159: GLenum, arg_2160: GLuint, arg_2161: [*c]GLboolean) void {
    return glad_glGetBooleani_v.?(arg_2159, arg_2160, arg_2161);
}
pub inline fn glGetBooleanv(arg_2162: GLenum, arg_2163: [*c]GLboolean) void {
    return glad_glGetBooleanv.?(arg_2162, arg_2163);
}
pub inline fn glGetBufferParameteri64v(arg_2164: GLenum, arg_2165: GLenum, arg_2166: [*c]GLint64) void {
    return glad_glGetBufferParameteri64v.?(arg_2164, arg_2165, arg_2166);
}
pub inline fn glGetBufferParameteriv(arg_2167: GLenum, arg_2168: GLenum, arg_2169: [*c]GLint) void {
    return glad_glGetBufferParameteriv.?(arg_2167, arg_2168, arg_2169);
}
pub inline fn glGetBufferParameterivARB(arg_2170: GLenum, arg_2171: GLenum, arg_2172: [*c]GLint) void {
    return glad_glGetBufferParameterivARB.?(arg_2170, arg_2171, arg_2172);
}
pub inline fn glGetBufferParameterui64vNV(arg_2173: GLenum, arg_2174: GLenum, arg_2175: [*c]GLuint64EXT) void {
    return glad_glGetBufferParameterui64vNV.?(arg_2173, arg_2174, arg_2175);
}
pub inline fn glGetBufferPointerv(arg_2176: GLenum, arg_2177: GLenum, arg_2178: [*c]?*anyopaque) void {
    return glad_glGetBufferPointerv.?(arg_2176, arg_2177, arg_2178);
}
pub inline fn glGetBufferPointervARB(arg_2179: GLenum, arg_2180: GLenum, arg_2181: [*c]?*anyopaque) void {
    return glad_glGetBufferPointervARB.?(arg_2179, arg_2180, arg_2181);
}
pub inline fn glGetBufferSubData(arg_2182: GLenum, arg_2183: GLintptr, arg_2184: GLsizeiptr, arg_2185: ?*anyopaque) void {
    return glad_glGetBufferSubData.?(arg_2182, arg_2183, arg_2184, arg_2185);
}
pub inline fn glGetBufferSubDataARB(arg_2186: GLenum, arg_2187: GLintptrARB, arg_2188: GLsizeiptrARB, arg_2189: ?*anyopaque) void {
    return glad_glGetBufferSubDataARB.?(arg_2186, arg_2187, arg_2188, arg_2189);
}
pub inline fn glGetClipPlanefOES(arg_2190: GLenum, arg_2191: [*c]GLfloat) void {
    return glad_glGetClipPlanefOES.?(arg_2190, arg_2191);
}
pub inline fn glGetClipPlanexOES(arg_2192: GLenum, arg_2193: [*c]GLfixed) void {
    return glad_glGetClipPlanexOES.?(arg_2192, arg_2193);
}
pub inline fn glGetColorTableEXT(arg_2194: GLenum, arg_2195: GLenum, arg_2196: GLenum, arg_2197: ?*anyopaque) void {
    return glad_glGetColorTableEXT.?(arg_2194, arg_2195, arg_2196, arg_2197);
}
pub inline fn glGetColorTableParameterfvEXT(arg_2198: GLenum, arg_2199: GLenum, arg_2200: [*c]GLfloat) void {
    return glad_glGetColorTableParameterfvEXT.?(arg_2198, arg_2199, arg_2200);
}
pub inline fn glGetColorTableParameterfvSGI(arg_2201: GLenum, arg_2202: GLenum, arg_2203: [*c]GLfloat) void {
    return glad_glGetColorTableParameterfvSGI.?(arg_2201, arg_2202, arg_2203);
}
pub inline fn glGetColorTableParameterivEXT(arg_2204: GLenum, arg_2205: GLenum, arg_2206: [*c]GLint) void {
    return glad_glGetColorTableParameterivEXT.?(arg_2204, arg_2205, arg_2206);
}
pub inline fn glGetColorTableParameterivSGI(arg_2207: GLenum, arg_2208: GLenum, arg_2209: [*c]GLint) void {
    return glad_glGetColorTableParameterivSGI.?(arg_2207, arg_2208, arg_2209);
}
pub inline fn glGetColorTableSGI(arg_2210: GLenum, arg_2211: GLenum, arg_2212: GLenum, arg_2213: ?*anyopaque) void {
    return glad_glGetColorTableSGI.?(arg_2210, arg_2211, arg_2212, arg_2213);
}
pub inline fn glGetCombinerInputParameterfvNV(arg_2214: GLenum, arg_2215: GLenum, arg_2216: GLenum, arg_2217: GLenum, arg_2218: [*c]GLfloat) void {
    return glad_glGetCombinerInputParameterfvNV.?(arg_2214, arg_2215, arg_2216, arg_2217, arg_2218);
}
pub inline fn glGetCombinerInputParameterivNV(arg_2219: GLenum, arg_2220: GLenum, arg_2221: GLenum, arg_2222: GLenum, arg_2223: [*c]GLint) void {
    return glad_glGetCombinerInputParameterivNV.?(arg_2219, arg_2220, arg_2221, arg_2222, arg_2223);
}
pub inline fn glGetCombinerOutputParameterfvNV(arg_2224: GLenum, arg_2225: GLenum, arg_2226: GLenum, arg_2227: [*c]GLfloat) void {
    return glad_glGetCombinerOutputParameterfvNV.?(arg_2224, arg_2225, arg_2226, arg_2227);
}
pub inline fn glGetCombinerOutputParameterivNV(arg_2228: GLenum, arg_2229: GLenum, arg_2230: GLenum, arg_2231: [*c]GLint) void {
    return glad_glGetCombinerOutputParameterivNV.?(arg_2228, arg_2229, arg_2230, arg_2231);
}
pub inline fn glGetCombinerStageParameterfvNV(arg_2232: GLenum, arg_2233: GLenum, arg_2234: [*c]GLfloat) void {
    return glad_glGetCombinerStageParameterfvNV.?(arg_2232, arg_2233, arg_2234);
}
pub inline fn glGetCommandHeaderNV(arg_2235: GLenum, arg_2236: GLuint) GLuint {
    return glad_glGetCommandHeaderNV.?(arg_2235, arg_2236);
}
pub inline fn glGetCompressedMultiTexImageEXT(arg_2237: GLenum, arg_2238: GLenum, arg_2239: GLint, arg_2240: ?*anyopaque) void {
    return glad_glGetCompressedMultiTexImageEXT.?(arg_2237, arg_2238, arg_2239, arg_2240);
}
pub inline fn glGetCompressedTexImage(arg_2241: GLenum, arg_2242: GLint, arg_2243: ?*anyopaque) void {
    return glad_glGetCompressedTexImage.?(arg_2241, arg_2242, arg_2243);
}
pub inline fn glGetCompressedTexImageARB(arg_2244: GLenum, arg_2245: GLint, arg_2246: ?*anyopaque) void {
    return glad_glGetCompressedTexImageARB.?(arg_2244, arg_2245, arg_2246);
}
pub inline fn glGetCompressedTextureImage(arg_2247: GLuint, arg_2248: GLint, arg_2249: GLsizei, arg_2250: ?*anyopaque) void {
    return glad_glGetCompressedTextureImage.?(arg_2247, arg_2248, arg_2249, arg_2250);
}
pub inline fn glGetCompressedTextureImageEXT(arg_2251: GLuint, arg_2252: GLenum, arg_2253: GLint, arg_2254: ?*anyopaque) void {
    return glad_glGetCompressedTextureImageEXT.?(arg_2251, arg_2252, arg_2253, arg_2254);
}
pub inline fn glGetCompressedTextureSubImage(arg_2255: GLuint, arg_2256: GLint, arg_2257: GLint, arg_2258: GLint, arg_2259: GLint, arg_2260: GLsizei, arg_2261: GLsizei, arg_2262: GLsizei, arg_2263: GLsizei, arg_2264: ?*anyopaque) void {
    return glad_glGetCompressedTextureSubImage.?(arg_2255, arg_2256, arg_2257, arg_2258, arg_2259, arg_2260, arg_2261, arg_2262, arg_2263, arg_2264);
}
pub inline fn glGetConvolutionFilterEXT(arg_2265: GLenum, arg_2266: GLenum, arg_2267: GLenum, arg_2268: ?*anyopaque) void {
    return glad_glGetConvolutionFilterEXT.?(arg_2265, arg_2266, arg_2267, arg_2268);
}
pub inline fn glGetConvolutionParameterfvEXT(arg_2269: GLenum, arg_2270: GLenum, arg_2271: [*c]GLfloat) void {
    return glad_glGetConvolutionParameterfvEXT.?(arg_2269, arg_2270, arg_2271);
}
pub inline fn glGetConvolutionParameterivEXT(arg_2272: GLenum, arg_2273: GLenum, arg_2274: [*c]GLint) void {
    return glad_glGetConvolutionParameterivEXT.?(arg_2272, arg_2273, arg_2274);
}
pub inline fn glGetConvolutionParameterxvOES(arg_2275: GLenum, arg_2276: GLenum, arg_2277: [*c]GLfixed) void {
    return glad_glGetConvolutionParameterxvOES.?(arg_2275, arg_2276, arg_2277);
}
pub inline fn glGetCoverageModulationTableNV(arg_2278: GLsizei, arg_2279: [*c]GLfloat) void {
    return glad_glGetCoverageModulationTableNV.?(arg_2278, arg_2279);
}
pub inline fn glGetDebugMessageLog(arg_2280: GLuint, arg_2281: GLsizei, arg_2282: [*c]GLenum, arg_2283: [*c]GLenum, arg_2284: [*c]GLuint, arg_2285: [*c]GLenum, arg_2286: [*c]GLsizei, arg_2287: [*c]GLchar) GLuint {
    return glad_glGetDebugMessageLog.?(arg_2280, arg_2281, arg_2282, arg_2283, arg_2284, arg_2285, arg_2286, arg_2287);
}
pub inline fn glGetDebugMessageLogAMD(arg_2288: GLuint, arg_2289: GLsizei, arg_2290: [*c]GLenum, arg_2291: [*c]GLenum, arg_2292: [*c]GLuint, arg_2293: [*c]GLsizei, arg_2294: [*c]GLchar) GLuint {
    return glad_glGetDebugMessageLogAMD.?(arg_2288, arg_2289, arg_2290, arg_2291, arg_2292, arg_2293, arg_2294);
}
pub inline fn glGetDebugMessageLogARB(arg_2295: GLuint, arg_2296: GLsizei, arg_2297: [*c]GLenum, arg_2298: [*c]GLenum, arg_2299: [*c]GLuint, arg_2300: [*c]GLenum, arg_2301: [*c]GLsizei, arg_2302: [*c]GLchar) GLuint {
    return glad_glGetDebugMessageLogARB.?(arg_2295, arg_2296, arg_2297, arg_2298, arg_2299, arg_2300, arg_2301, arg_2302);
}
pub inline fn glGetDetailTexFuncSGIS(arg_2303: GLenum, arg_2304: [*c]GLfloat) void {
    return glad_glGetDetailTexFuncSGIS.?(arg_2303, arg_2304);
}
pub inline fn glGetDoubleIndexedvEXT(arg_2305: GLenum, arg_2306: GLuint, arg_2307: [*c]GLdouble) void {
    return glad_glGetDoubleIndexedvEXT.?(arg_2305, arg_2306, arg_2307);
}
pub inline fn glGetDoublei_v(arg_2308: GLenum, arg_2309: GLuint, arg_2310: [*c]GLdouble) void {
    return glad_glGetDoublei_v.?(arg_2308, arg_2309, arg_2310);
}
pub inline fn glGetDoublei_vEXT(arg_2311: GLenum, arg_2312: GLuint, arg_2313: [*c]GLdouble) void {
    return glad_glGetDoublei_vEXT.?(arg_2311, arg_2312, arg_2313);
}
pub inline fn glGetDoublev(arg_2314: GLenum, arg_2315: [*c]GLdouble) void {
    return glad_glGetDoublev.?(arg_2314, arg_2315);
}
pub inline fn glGetError() GLenum {
    return glad_glGetError.?();
}
pub inline fn glGetFenceivNV(arg_2316: GLuint, arg_2317: GLenum, arg_2318: [*c]GLint) void {
    return glad_glGetFenceivNV.?(arg_2316, arg_2317, arg_2318);
}
pub inline fn glGetFinalCombinerInputParameterfvNV(arg_2319: GLenum, arg_2320: GLenum, arg_2321: [*c]GLfloat) void {
    return glad_glGetFinalCombinerInputParameterfvNV.?(arg_2319, arg_2320, arg_2321);
}
pub inline fn glGetFinalCombinerInputParameterivNV(arg_2322: GLenum, arg_2323: GLenum, arg_2324: [*c]GLint) void {
    return glad_glGetFinalCombinerInputParameterivNV.?(arg_2322, arg_2323, arg_2324);
}
pub inline fn glGetFirstPerfQueryIdINTEL(arg_2325: [*c]GLuint) void {
    return glad_glGetFirstPerfQueryIdINTEL.?(arg_2325);
}
pub inline fn glGetFixedvOES(arg_2326: GLenum, arg_2327: [*c]GLfixed) void {
    return glad_glGetFixedvOES.?(arg_2326, arg_2327);
}
pub inline fn glGetFloatIndexedvEXT(arg_2328: GLenum, arg_2329: GLuint, arg_2330: [*c]GLfloat) void {
    return glad_glGetFloatIndexedvEXT.?(arg_2328, arg_2329, arg_2330);
}
pub inline fn glGetFloati_v(arg_2331: GLenum, arg_2332: GLuint, arg_2333: [*c]GLfloat) void {
    return glad_glGetFloati_v.?(arg_2331, arg_2332, arg_2333);
}
pub inline fn glGetFloati_vEXT(arg_2334: GLenum, arg_2335: GLuint, arg_2336: [*c]GLfloat) void {
    return glad_glGetFloati_vEXT.?(arg_2334, arg_2335, arg_2336);
}
pub inline fn glGetFloatv(arg_2337: GLenum, arg_2338: [*c]GLfloat) void {
    return glad_glGetFloatv.?(arg_2337, arg_2338);
}
pub inline fn glGetFogFuncSGIS(arg_2339: [*c]GLfloat) void {
    return glad_glGetFogFuncSGIS.?(arg_2339);
}
pub inline fn glGetFragDataIndex(arg_2340: GLuint, arg_2341: [*c]const GLchar) GLint {
    return glad_glGetFragDataIndex.?(arg_2340, arg_2341);
}
pub inline fn glGetFragDataLocation(arg_2342: GLuint, arg_2343: [*c]const GLchar) GLint {
    return glad_glGetFragDataLocation.?(arg_2342, arg_2343);
}
pub inline fn glGetFragDataLocationEXT(arg_2344: GLuint, arg_2345: [*c]const GLchar) GLint {
    return glad_glGetFragDataLocationEXT.?(arg_2344, arg_2345);
}
pub inline fn glGetFragmentLightfvSGIX(arg_2346: GLenum, arg_2347: GLenum, arg_2348: [*c]GLfloat) void {
    return glad_glGetFragmentLightfvSGIX.?(arg_2346, arg_2347, arg_2348);
}
pub inline fn glGetFragmentLightivSGIX(arg_2349: GLenum, arg_2350: GLenum, arg_2351: [*c]GLint) void {
    return glad_glGetFragmentLightivSGIX.?(arg_2349, arg_2350, arg_2351);
}
pub inline fn glGetFragmentMaterialfvSGIX(arg_2352: GLenum, arg_2353: GLenum, arg_2354: [*c]GLfloat) void {
    return glad_glGetFragmentMaterialfvSGIX.?(arg_2352, arg_2353, arg_2354);
}
pub inline fn glGetFragmentMaterialivSGIX(arg_2355: GLenum, arg_2356: GLenum, arg_2357: [*c]GLint) void {
    return glad_glGetFragmentMaterialivSGIX.?(arg_2355, arg_2356, arg_2357);
}
pub inline fn glGetFramebufferAttachmentParameteriv(arg_2358: GLenum, arg_2359: GLenum, arg_2360: GLenum, arg_2361: [*c]GLint) void {
    return glad_glGetFramebufferAttachmentParameteriv.?(arg_2358, arg_2359, arg_2360, arg_2361);
}
pub inline fn glGetFramebufferAttachmentParameterivEXT(arg_2362: GLenum, arg_2363: GLenum, arg_2364: GLenum, arg_2365: [*c]GLint) void {
    return glad_glGetFramebufferAttachmentParameterivEXT.?(arg_2362, arg_2363, arg_2364, arg_2365);
}
pub inline fn glGetFramebufferParameterfvAMD(arg_2366: GLenum, arg_2367: GLenum, arg_2368: GLuint, arg_2369: GLuint, arg_2370: GLsizei, arg_2371: [*c]GLfloat) void {
    return glad_glGetFramebufferParameterfvAMD.?(arg_2366, arg_2367, arg_2368, arg_2369, arg_2370, arg_2371);
}
pub inline fn glGetFramebufferParameteriv(arg_2372: GLenum, arg_2373: GLenum, arg_2374: [*c]GLint) void {
    return glad_glGetFramebufferParameteriv.?(arg_2372, arg_2373, arg_2374);
}
pub inline fn glGetFramebufferParameterivEXT(arg_2375: GLuint, arg_2376: GLenum, arg_2377: [*c]GLint) void {
    return glad_glGetFramebufferParameterivEXT.?(arg_2375, arg_2376, arg_2377);
}
pub inline fn glGetFramebufferParameterivMESA(arg_2378: GLenum, arg_2379: GLenum, arg_2380: [*c]GLint) void {
    return glad_glGetFramebufferParameterivMESA.?(arg_2378, arg_2379, arg_2380);
}
pub inline fn glGetGraphicsResetStatus() GLenum {
    return glad_glGetGraphicsResetStatus.?();
}
pub inline fn glGetGraphicsResetStatusARB() GLenum {
    return glad_glGetGraphicsResetStatusARB.?();
}
pub inline fn glGetHandleARB(arg_2381: GLenum) GLhandleARB {
    return glad_glGetHandleARB.?(arg_2381);
}
pub inline fn glGetHistogramEXT(arg_2382: GLenum, arg_2383: GLboolean, arg_2384: GLenum, arg_2385: GLenum, arg_2386: ?*anyopaque) void {
    return glad_glGetHistogramEXT.?(arg_2382, arg_2383, arg_2384, arg_2385, arg_2386);
}
pub inline fn glGetHistogramParameterfvEXT(arg_2387: GLenum, arg_2388: GLenum, arg_2389: [*c]GLfloat) void {
    return glad_glGetHistogramParameterfvEXT.?(arg_2387, arg_2388, arg_2389);
}
pub inline fn glGetHistogramParameterivEXT(arg_2390: GLenum, arg_2391: GLenum, arg_2392: [*c]GLint) void {
    return glad_glGetHistogramParameterivEXT.?(arg_2390, arg_2391, arg_2392);
}
pub inline fn glGetHistogramParameterxvOES(arg_2393: GLenum, arg_2394: GLenum, arg_2395: [*c]GLfixed) void {
    return glad_glGetHistogramParameterxvOES.?(arg_2393, arg_2394, arg_2395);
}
pub inline fn glGetImageHandleARB(arg_2396: GLuint, arg_2397: GLint, arg_2398: GLboolean, arg_2399: GLint, arg_2400: GLenum) GLuint64 {
    return glad_glGetImageHandleARB.?(arg_2396, arg_2397, arg_2398, arg_2399, arg_2400);
}
pub inline fn glGetImageHandleNV(arg_2401: GLuint, arg_2402: GLint, arg_2403: GLboolean, arg_2404: GLint, arg_2405: GLenum) GLuint64 {
    return glad_glGetImageHandleNV.?(arg_2401, arg_2402, arg_2403, arg_2404, arg_2405);
}
pub inline fn glGetImageTransformParameterfvHP(arg_2406: GLenum, arg_2407: GLenum, arg_2408: [*c]GLfloat) void {
    return glad_glGetImageTransformParameterfvHP.?(arg_2406, arg_2407, arg_2408);
}
pub inline fn glGetImageTransformParameterivHP(arg_2409: GLenum, arg_2410: GLenum, arg_2411: [*c]GLint) void {
    return glad_glGetImageTransformParameterivHP.?(arg_2409, arg_2410, arg_2411);
}
pub inline fn glGetInfoLogARB(arg_2412: GLhandleARB, arg_2413: GLsizei, arg_2414: [*c]GLsizei, arg_2415: [*c]GLcharARB) void {
    return glad_glGetInfoLogARB.?(arg_2412, arg_2413, arg_2414, arg_2415);
}
pub inline fn glGetInstrumentsSGIX() GLint {
    return glad_glGetInstrumentsSGIX.?();
}
pub inline fn glGetInteger64i_v(arg_2416: GLenum, arg_2417: GLuint, arg_2418: [*c]GLint64) void {
    return glad_glGetInteger64i_v.?(arg_2416, arg_2417, arg_2418);
}
pub inline fn glGetInteger64v(arg_2419: GLenum, arg_2420: [*c]GLint64) void {
    return glad_glGetInteger64v.?(arg_2419, arg_2420);
}
pub inline fn glGetIntegerIndexedvEXT(arg_2421: GLenum, arg_2422: GLuint, arg_2423: [*c]GLint) void {
    return glad_glGetIntegerIndexedvEXT.?(arg_2421, arg_2422, arg_2423);
}
pub inline fn glGetIntegeri_v(arg_2424: GLenum, arg_2425: GLuint, arg_2426: [*c]GLint) void {
    return glad_glGetIntegeri_v.?(arg_2424, arg_2425, arg_2426);
}
pub inline fn glGetIntegerui64i_vNV(arg_2427: GLenum, arg_2428: GLuint, arg_2429: [*c]GLuint64EXT) void {
    return glad_glGetIntegerui64i_vNV.?(arg_2427, arg_2428, arg_2429);
}
pub inline fn glGetIntegerui64vNV(arg_2430: GLenum, arg_2431: [*c]GLuint64EXT) void {
    return glad_glGetIntegerui64vNV.?(arg_2430, arg_2431);
}
pub inline fn glGetIntegerv(arg_2432: GLenum, arg_2433: [*c]GLint) void {
    return glad_glGetIntegerv.?(arg_2432, arg_2433);
}
pub inline fn glGetInternalformatSampleivNV(arg_2434: GLenum, arg_2435: GLenum, arg_2436: GLsizei, arg_2437: GLenum, arg_2438: GLsizei, arg_2439: [*c]GLint) void {
    return glad_glGetInternalformatSampleivNV.?(arg_2434, arg_2435, arg_2436, arg_2437, arg_2438, arg_2439);
}
pub inline fn glGetInternalformati64v(arg_2440: GLenum, arg_2441: GLenum, arg_2442: GLenum, arg_2443: GLsizei, arg_2444: [*c]GLint64) void {
    return glad_glGetInternalformati64v.?(arg_2440, arg_2441, arg_2442, arg_2443, arg_2444);
}
pub inline fn glGetInternalformativ(arg_2445: GLenum, arg_2446: GLenum, arg_2447: GLenum, arg_2448: GLsizei, arg_2449: [*c]GLint) void {
    return glad_glGetInternalformativ.?(arg_2445, arg_2446, arg_2447, arg_2448, arg_2449);
}
pub inline fn glGetInvariantBooleanvEXT(arg_2450: GLuint, arg_2451: GLenum, arg_2452: [*c]GLboolean) void {
    return glad_glGetInvariantBooleanvEXT.?(arg_2450, arg_2451, arg_2452);
}
pub inline fn glGetInvariantFloatvEXT(arg_2453: GLuint, arg_2454: GLenum, arg_2455: [*c]GLfloat) void {
    return glad_glGetInvariantFloatvEXT.?(arg_2453, arg_2454, arg_2455);
}
pub inline fn glGetInvariantIntegervEXT(arg_2456: GLuint, arg_2457: GLenum, arg_2458: [*c]GLint) void {
    return glad_glGetInvariantIntegervEXT.?(arg_2456, arg_2457, arg_2458);
}
pub inline fn glGetLightxOES(arg_2459: GLenum, arg_2460: GLenum, arg_2461: [*c]GLfixed) void {
    return glad_glGetLightxOES.?(arg_2459, arg_2460, arg_2461);
}
pub inline fn glGetListParameterfvSGIX(arg_2462: GLuint, arg_2463: GLenum, arg_2464: [*c]GLfloat) void {
    return glad_glGetListParameterfvSGIX.?(arg_2462, arg_2463, arg_2464);
}
pub inline fn glGetListParameterivSGIX(arg_2465: GLuint, arg_2466: GLenum, arg_2467: [*c]GLint) void {
    return glad_glGetListParameterivSGIX.?(arg_2465, arg_2466, arg_2467);
}
pub inline fn glGetLocalConstantBooleanvEXT(arg_2468: GLuint, arg_2469: GLenum, arg_2470: [*c]GLboolean) void {
    return glad_glGetLocalConstantBooleanvEXT.?(arg_2468, arg_2469, arg_2470);
}
pub inline fn glGetLocalConstantFloatvEXT(arg_2471: GLuint, arg_2472: GLenum, arg_2473: [*c]GLfloat) void {
    return glad_glGetLocalConstantFloatvEXT.?(arg_2471, arg_2472, arg_2473);
}
pub inline fn glGetLocalConstantIntegervEXT(arg_2474: GLuint, arg_2475: GLenum, arg_2476: [*c]GLint) void {
    return glad_glGetLocalConstantIntegervEXT.?(arg_2474, arg_2475, arg_2476);
}
pub inline fn glGetMapAttribParameterfvNV(arg_2477: GLenum, arg_2478: GLuint, arg_2479: GLenum, arg_2480: [*c]GLfloat) void {
    return glad_glGetMapAttribParameterfvNV.?(arg_2477, arg_2478, arg_2479, arg_2480);
}
pub inline fn glGetMapAttribParameterivNV(arg_2481: GLenum, arg_2482: GLuint, arg_2483: GLenum, arg_2484: [*c]GLint) void {
    return glad_glGetMapAttribParameterivNV.?(arg_2481, arg_2482, arg_2483, arg_2484);
}
pub inline fn glGetMapControlPointsNV(arg_2485: GLenum, arg_2486: GLuint, arg_2487: GLenum, arg_2488: GLsizei, arg_2489: GLsizei, arg_2490: GLboolean, arg_2491: ?*anyopaque) void {
    return glad_glGetMapControlPointsNV.?(arg_2485, arg_2486, arg_2487, arg_2488, arg_2489, arg_2490, arg_2491);
}
pub inline fn glGetMapParameterfvNV(arg_2492: GLenum, arg_2493: GLenum, arg_2494: [*c]GLfloat) void {
    return glad_glGetMapParameterfvNV.?(arg_2492, arg_2493, arg_2494);
}
pub inline fn glGetMapParameterivNV(arg_2495: GLenum, arg_2496: GLenum, arg_2497: [*c]GLint) void {
    return glad_glGetMapParameterivNV.?(arg_2495, arg_2496, arg_2497);
}
pub inline fn glGetMapxvOES(arg_2498: GLenum, arg_2499: GLenum, arg_2500: [*c]GLfixed) void {
    return glad_glGetMapxvOES.?(arg_2498, arg_2499, arg_2500);
}
pub inline fn glGetMaterialxOES(arg_2501: GLenum, arg_2502: GLenum, arg_2503: GLfixed) void {
    return glad_glGetMaterialxOES.?(arg_2501, arg_2502, arg_2503);
}
pub inline fn glGetMemoryObjectDetachedResourcesuivNV(arg_2504: GLuint, arg_2505: GLenum, arg_2506: GLint, arg_2507: GLsizei, arg_2508: [*c]GLuint) void {
    return glad_glGetMemoryObjectDetachedResourcesuivNV.?(arg_2504, arg_2505, arg_2506, arg_2507, arg_2508);
}
pub inline fn glGetMemoryObjectParameterivEXT(arg_2509: GLuint, arg_2510: GLenum, arg_2511: [*c]GLint) void {
    return glad_glGetMemoryObjectParameterivEXT.?(arg_2509, arg_2510, arg_2511);
}
pub inline fn glGetMinmaxEXT(arg_2512: GLenum, arg_2513: GLboolean, arg_2514: GLenum, arg_2515: GLenum, arg_2516: ?*anyopaque) void {
    return glad_glGetMinmaxEXT.?(arg_2512, arg_2513, arg_2514, arg_2515, arg_2516);
}
pub inline fn glGetMinmaxParameterfvEXT(arg_2517: GLenum, arg_2518: GLenum, arg_2519: [*c]GLfloat) void {
    return glad_glGetMinmaxParameterfvEXT.?(arg_2517, arg_2518, arg_2519);
}
pub inline fn glGetMinmaxParameterivEXT(arg_2520: GLenum, arg_2521: GLenum, arg_2522: [*c]GLint) void {
    return glad_glGetMinmaxParameterivEXT.?(arg_2520, arg_2521, arg_2522);
}
pub inline fn glGetMultiTexEnvfvEXT(arg_2523: GLenum, arg_2524: GLenum, arg_2525: GLenum, arg_2526: [*c]GLfloat) void {
    return glad_glGetMultiTexEnvfvEXT.?(arg_2523, arg_2524, arg_2525, arg_2526);
}
pub inline fn glGetMultiTexEnvivEXT(arg_2527: GLenum, arg_2528: GLenum, arg_2529: GLenum, arg_2530: [*c]GLint) void {
    return glad_glGetMultiTexEnvivEXT.?(arg_2527, arg_2528, arg_2529, arg_2530);
}
pub inline fn glGetMultiTexGendvEXT(arg_2531: GLenum, arg_2532: GLenum, arg_2533: GLenum, arg_2534: [*c]GLdouble) void {
    return glad_glGetMultiTexGendvEXT.?(arg_2531, arg_2532, arg_2533, arg_2534);
}
pub inline fn glGetMultiTexGenfvEXT(arg_2535: GLenum, arg_2536: GLenum, arg_2537: GLenum, arg_2538: [*c]GLfloat) void {
    return glad_glGetMultiTexGenfvEXT.?(arg_2535, arg_2536, arg_2537, arg_2538);
}
pub inline fn glGetMultiTexGenivEXT(arg_2539: GLenum, arg_2540: GLenum, arg_2541: GLenum, arg_2542: [*c]GLint) void {
    return glad_glGetMultiTexGenivEXT.?(arg_2539, arg_2540, arg_2541, arg_2542);
}
pub inline fn glGetMultiTexImageEXT(arg_2543: GLenum, arg_2544: GLenum, arg_2545: GLint, arg_2546: GLenum, arg_2547: GLenum, arg_2548: ?*anyopaque) void {
    return glad_glGetMultiTexImageEXT.?(arg_2543, arg_2544, arg_2545, arg_2546, arg_2547, arg_2548);
}
pub inline fn glGetMultiTexLevelParameterfvEXT(arg_2549: GLenum, arg_2550: GLenum, arg_2551: GLint, arg_2552: GLenum, arg_2553: [*c]GLfloat) void {
    return glad_glGetMultiTexLevelParameterfvEXT.?(arg_2549, arg_2550, arg_2551, arg_2552, arg_2553);
}
pub inline fn glGetMultiTexLevelParameterivEXT(arg_2554: GLenum, arg_2555: GLenum, arg_2556: GLint, arg_2557: GLenum, arg_2558: [*c]GLint) void {
    return glad_glGetMultiTexLevelParameterivEXT.?(arg_2554, arg_2555, arg_2556, arg_2557, arg_2558);
}
pub inline fn glGetMultiTexParameterIivEXT(arg_2559: GLenum, arg_2560: GLenum, arg_2561: GLenum, arg_2562: [*c]GLint) void {
    return glad_glGetMultiTexParameterIivEXT.?(arg_2559, arg_2560, arg_2561, arg_2562);
}
pub inline fn glGetMultiTexParameterIuivEXT(arg_2563: GLenum, arg_2564: GLenum, arg_2565: GLenum, arg_2566: [*c]GLuint) void {
    return glad_glGetMultiTexParameterIuivEXT.?(arg_2563, arg_2564, arg_2565, arg_2566);
}
pub inline fn glGetMultiTexParameterfvEXT(arg_2567: GLenum, arg_2568: GLenum, arg_2569: GLenum, arg_2570: [*c]GLfloat) void {
    return glad_glGetMultiTexParameterfvEXT.?(arg_2567, arg_2568, arg_2569, arg_2570);
}
pub inline fn glGetMultiTexParameterivEXT(arg_2571: GLenum, arg_2572: GLenum, arg_2573: GLenum, arg_2574: [*c]GLint) void {
    return glad_glGetMultiTexParameterivEXT.?(arg_2571, arg_2572, arg_2573, arg_2574);
}
pub inline fn glGetMultisamplefv(arg_2575: GLenum, arg_2576: GLuint, arg_2577: [*c]GLfloat) void {
    return glad_glGetMultisamplefv.?(arg_2575, arg_2576, arg_2577);
}
pub inline fn glGetMultisamplefvNV(arg_2578: GLenum, arg_2579: GLuint, arg_2580: [*c]GLfloat) void {
    return glad_glGetMultisamplefvNV.?(arg_2578, arg_2579, arg_2580);
}
pub inline fn glGetNamedBufferParameteri64v(arg_2581: GLuint, arg_2582: GLenum, arg_2583: [*c]GLint64) void {
    return glad_glGetNamedBufferParameteri64v.?(arg_2581, arg_2582, arg_2583);
}
pub inline fn glGetNamedBufferParameteriv(arg_2584: GLuint, arg_2585: GLenum, arg_2586: [*c]GLint) void {
    return glad_glGetNamedBufferParameteriv.?(arg_2584, arg_2585, arg_2586);
}
pub inline fn glGetNamedBufferParameterivEXT(arg_2587: GLuint, arg_2588: GLenum, arg_2589: [*c]GLint) void {
    return glad_glGetNamedBufferParameterivEXT.?(arg_2587, arg_2588, arg_2589);
}
pub inline fn glGetNamedBufferParameterui64vNV(arg_2590: GLuint, arg_2591: GLenum, arg_2592: [*c]GLuint64EXT) void {
    return glad_glGetNamedBufferParameterui64vNV.?(arg_2590, arg_2591, arg_2592);
}
pub inline fn glGetNamedBufferPointerv(arg_2593: GLuint, arg_2594: GLenum, arg_2595: [*c]?*anyopaque) void {
    return glad_glGetNamedBufferPointerv.?(arg_2593, arg_2594, arg_2595);
}
pub inline fn glGetNamedBufferPointervEXT(arg_2596: GLuint, arg_2597: GLenum, arg_2598: [*c]?*anyopaque) void {
    return glad_glGetNamedBufferPointervEXT.?(arg_2596, arg_2597, arg_2598);
}
pub inline fn glGetNamedBufferSubData(arg_2599: GLuint, arg_2600: GLintptr, arg_2601: GLsizeiptr, arg_2602: ?*anyopaque) void {
    return glad_glGetNamedBufferSubData.?(arg_2599, arg_2600, arg_2601, arg_2602);
}
pub inline fn glGetNamedBufferSubDataEXT(arg_2603: GLuint, arg_2604: GLintptr, arg_2605: GLsizeiptr, arg_2606: ?*anyopaque) void {
    return glad_glGetNamedBufferSubDataEXT.?(arg_2603, arg_2604, arg_2605, arg_2606);
}
pub inline fn glGetNamedFramebufferAttachmentParameteriv(arg_2607: GLuint, arg_2608: GLenum, arg_2609: GLenum, arg_2610: [*c]GLint) void {
    return glad_glGetNamedFramebufferAttachmentParameteriv.?(arg_2607, arg_2608, arg_2609, arg_2610);
}
pub inline fn glGetNamedFramebufferAttachmentParameterivEXT(arg_2611: GLuint, arg_2612: GLenum, arg_2613: GLenum, arg_2614: [*c]GLint) void {
    return glad_glGetNamedFramebufferAttachmentParameterivEXT.?(arg_2611, arg_2612, arg_2613, arg_2614);
}
pub inline fn glGetNamedFramebufferParameterfvAMD(arg_2615: GLuint, arg_2616: GLenum, arg_2617: GLuint, arg_2618: GLuint, arg_2619: GLsizei, arg_2620: [*c]GLfloat) void {
    return glad_glGetNamedFramebufferParameterfvAMD.?(arg_2615, arg_2616, arg_2617, arg_2618, arg_2619, arg_2620);
}
pub inline fn glGetNamedFramebufferParameteriv(arg_2621: GLuint, arg_2622: GLenum, arg_2623: [*c]GLint) void {
    return glad_glGetNamedFramebufferParameteriv.?(arg_2621, arg_2622, arg_2623);
}
pub inline fn glGetNamedFramebufferParameterivEXT(arg_2624: GLuint, arg_2625: GLenum, arg_2626: [*c]GLint) void {
    return glad_glGetNamedFramebufferParameterivEXT.?(arg_2624, arg_2625, arg_2626);
}
pub inline fn glGetNamedProgramLocalParameterIivEXT(arg_2627: GLuint, arg_2628: GLenum, arg_2629: GLuint, arg_2630: [*c]GLint) void {
    return glad_glGetNamedProgramLocalParameterIivEXT.?(arg_2627, arg_2628, arg_2629, arg_2630);
}
pub inline fn glGetNamedProgramLocalParameterIuivEXT(arg_2631: GLuint, arg_2632: GLenum, arg_2633: GLuint, arg_2634: [*c]GLuint) void {
    return glad_glGetNamedProgramLocalParameterIuivEXT.?(arg_2631, arg_2632, arg_2633, arg_2634);
}
pub inline fn glGetNamedProgramLocalParameterdvEXT(arg_2635: GLuint, arg_2636: GLenum, arg_2637: GLuint, arg_2638: [*c]GLdouble) void {
    return glad_glGetNamedProgramLocalParameterdvEXT.?(arg_2635, arg_2636, arg_2637, arg_2638);
}
pub inline fn glGetNamedProgramLocalParameterfvEXT(arg_2639: GLuint, arg_2640: GLenum, arg_2641: GLuint, arg_2642: [*c]GLfloat) void {
    return glad_glGetNamedProgramLocalParameterfvEXT.?(arg_2639, arg_2640, arg_2641, arg_2642);
}
pub inline fn glGetNamedProgramStringEXT(arg_2643: GLuint, arg_2644: GLenum, arg_2645: GLenum, arg_2646: ?*anyopaque) void {
    return glad_glGetNamedProgramStringEXT.?(arg_2643, arg_2644, arg_2645, arg_2646);
}
pub inline fn glGetNamedProgramivEXT(arg_2647: GLuint, arg_2648: GLenum, arg_2649: GLenum, arg_2650: [*c]GLint) void {
    return glad_glGetNamedProgramivEXT.?(arg_2647, arg_2648, arg_2649, arg_2650);
}
pub inline fn glGetNamedRenderbufferParameteriv(arg_2651: GLuint, arg_2652: GLenum, arg_2653: [*c]GLint) void {
    return glad_glGetNamedRenderbufferParameteriv.?(arg_2651, arg_2652, arg_2653);
}
pub inline fn glGetNamedRenderbufferParameterivEXT(arg_2654: GLuint, arg_2655: GLenum, arg_2656: [*c]GLint) void {
    return glad_glGetNamedRenderbufferParameterivEXT.?(arg_2654, arg_2655, arg_2656);
}
pub inline fn glGetNamedStringARB(arg_2657: GLint, arg_2658: [*c]const GLchar, arg_2659: GLsizei, arg_2660: [*c]GLint, arg_2661: [*c]GLchar) void {
    return glad_glGetNamedStringARB.?(arg_2657, arg_2658, arg_2659, arg_2660, arg_2661);
}
pub inline fn glGetNamedStringivARB(arg_2662: GLint, arg_2663: [*c]const GLchar, arg_2664: GLenum, arg_2665: [*c]GLint) void {
    return glad_glGetNamedStringivARB.?(arg_2662, arg_2663, arg_2664, arg_2665);
}
pub inline fn glGetNextPerfQueryIdINTEL(arg_2666: GLuint, arg_2667: [*c]GLuint) void {
    return glad_glGetNextPerfQueryIdINTEL.?(arg_2666, arg_2667);
}
pub inline fn glGetObjectBufferfvATI(arg_2668: GLuint, arg_2669: GLenum, arg_2670: [*c]GLfloat) void {
    return glad_glGetObjectBufferfvATI.?(arg_2668, arg_2669, arg_2670);
}
pub inline fn glGetObjectBufferivATI(arg_2671: GLuint, arg_2672: GLenum, arg_2673: [*c]GLint) void {
    return glad_glGetObjectBufferivATI.?(arg_2671, arg_2672, arg_2673);
}
pub inline fn glGetObjectLabel(arg_2674: GLenum, arg_2675: GLuint, arg_2676: GLsizei, arg_2677: [*c]GLsizei, arg_2678: [*c]GLchar) void {
    return glad_glGetObjectLabel.?(arg_2674, arg_2675, arg_2676, arg_2677, arg_2678);
}
pub inline fn glGetObjectLabelEXT(arg_2679: GLenum, arg_2680: GLuint, arg_2681: GLsizei, arg_2682: [*c]GLsizei, arg_2683: [*c]GLchar) void {
    return glad_glGetObjectLabelEXT.?(arg_2679, arg_2680, arg_2681, arg_2682, arg_2683);
}
pub inline fn glGetObjectParameterfvARB(arg_2684: GLhandleARB, arg_2685: GLenum, arg_2686: [*c]GLfloat) void {
    return glad_glGetObjectParameterfvARB.?(arg_2684, arg_2685, arg_2686);
}
pub inline fn glGetObjectParameterivAPPLE(arg_2687: GLenum, arg_2688: GLuint, arg_2689: GLenum, arg_2690: [*c]GLint) void {
    return glad_glGetObjectParameterivAPPLE.?(arg_2687, arg_2688, arg_2689, arg_2690);
}
pub inline fn glGetObjectParameterivARB(arg_2691: GLhandleARB, arg_2692: GLenum, arg_2693: [*c]GLint) void {
    return glad_glGetObjectParameterivARB.?(arg_2691, arg_2692, arg_2693);
}
pub inline fn glGetObjectPtrLabel(arg_2694: ?*const anyopaque, arg_2695: GLsizei, arg_2696: [*c]GLsizei, arg_2697: [*c]GLchar) void {
    return glad_glGetObjectPtrLabel.?(arg_2694, arg_2695, arg_2696, arg_2697);
}
pub inline fn glGetOcclusionQueryivNV(arg_2698: GLuint, arg_2699: GLenum, arg_2700: [*c]GLint) void {
    return glad_glGetOcclusionQueryivNV.?(arg_2698, arg_2699, arg_2700);
}
pub inline fn glGetOcclusionQueryuivNV(arg_2701: GLuint, arg_2702: GLenum, arg_2703: [*c]GLuint) void {
    return glad_glGetOcclusionQueryuivNV.?(arg_2701, arg_2702, arg_2703);
}
pub inline fn glGetPathCommandsNV(arg_2704: GLuint, arg_2705: [*c]GLubyte) void {
    return glad_glGetPathCommandsNV.?(arg_2704, arg_2705);
}
pub inline fn glGetPathCoordsNV(arg_2706: GLuint, arg_2707: [*c]GLfloat) void {
    return glad_glGetPathCoordsNV.?(arg_2706, arg_2707);
}
pub inline fn glGetPathDashArrayNV(arg_2708: GLuint, arg_2709: [*c]GLfloat) void {
    return glad_glGetPathDashArrayNV.?(arg_2708, arg_2709);
}
pub inline fn glGetPathLengthNV(arg_2710: GLuint, arg_2711: GLsizei, arg_2712: GLsizei) GLfloat {
    return glad_glGetPathLengthNV.?(arg_2710, arg_2711, arg_2712);
}
pub inline fn glGetPathMetricRangeNV(arg_2713: GLbitfield, arg_2714: GLuint, arg_2715: GLsizei, arg_2716: GLsizei, arg_2717: [*c]GLfloat) void {
    return glad_glGetPathMetricRangeNV.?(arg_2713, arg_2714, arg_2715, arg_2716, arg_2717);
}
pub inline fn glGetPathMetricsNV(arg_2718: GLbitfield, arg_2719: GLsizei, arg_2720: GLenum, arg_2721: ?*const anyopaque, arg_2722: GLuint, arg_2723: GLsizei, arg_2724: [*c]GLfloat) void {
    return glad_glGetPathMetricsNV.?(arg_2718, arg_2719, arg_2720, arg_2721, arg_2722, arg_2723, arg_2724);
}
pub inline fn glGetPathParameterfvNV(arg_2725: GLuint, arg_2726: GLenum, arg_2727: [*c]GLfloat) void {
    return glad_glGetPathParameterfvNV.?(arg_2725, arg_2726, arg_2727);
}
pub inline fn glGetPathParameterivNV(arg_2728: GLuint, arg_2729: GLenum, arg_2730: [*c]GLint) void {
    return glad_glGetPathParameterivNV.?(arg_2728, arg_2729, arg_2730);
}
pub inline fn glGetPathSpacingNV(arg_2731: GLenum, arg_2732: GLsizei, arg_2733: GLenum, arg_2734: ?*const anyopaque, arg_2735: GLuint, arg_2736: GLfloat, arg_2737: GLfloat, arg_2738: GLenum, arg_2739: [*c]GLfloat) void {
    return glad_glGetPathSpacingNV.?(arg_2731, arg_2732, arg_2733, arg_2734, arg_2735, arg_2736, arg_2737, arg_2738, arg_2739);
}
pub inline fn glGetPerfCounterInfoINTEL(arg_2740: GLuint, arg_2741: GLuint, arg_2742: GLuint, arg_2743: [*c]GLchar, arg_2744: GLuint, arg_2745: [*c]GLchar, arg_2746: [*c]GLuint, arg_2747: [*c]GLuint, arg_2748: [*c]GLuint, arg_2749: [*c]GLuint, arg_2750: [*c]GLuint64) void {
    return glad_glGetPerfCounterInfoINTEL.?(arg_2740, arg_2741, arg_2742, arg_2743, arg_2744, arg_2745, arg_2746, arg_2747, arg_2748, arg_2749, arg_2750);
}
pub inline fn glGetPerfMonitorCounterDataAMD(arg_2751: GLuint, arg_2752: GLenum, arg_2753: GLsizei, arg_2754: [*c]GLuint, arg_2755: [*c]GLint) void {
    return glad_glGetPerfMonitorCounterDataAMD.?(arg_2751, arg_2752, arg_2753, arg_2754, arg_2755);
}
pub inline fn glGetPerfMonitorCounterInfoAMD(arg_2756: GLuint, arg_2757: GLuint, arg_2758: GLenum, arg_2759: ?*anyopaque) void {
    return glad_glGetPerfMonitorCounterInfoAMD.?(arg_2756, arg_2757, arg_2758, arg_2759);
}
pub inline fn glGetPerfMonitorCounterStringAMD(arg_2760: GLuint, arg_2761: GLuint, arg_2762: GLsizei, arg_2763: [*c]GLsizei, arg_2764: [*c]GLchar) void {
    return glad_glGetPerfMonitorCounterStringAMD.?(arg_2760, arg_2761, arg_2762, arg_2763, arg_2764);
}
pub inline fn glGetPerfMonitorCountersAMD(arg_2765: GLuint, arg_2766: [*c]GLint, arg_2767: [*c]GLint, arg_2768: GLsizei, arg_2769: [*c]GLuint) void {
    return glad_glGetPerfMonitorCountersAMD.?(arg_2765, arg_2766, arg_2767, arg_2768, arg_2769);
}
pub inline fn glGetPerfMonitorGroupStringAMD(arg_2770: GLuint, arg_2771: GLsizei, arg_2772: [*c]GLsizei, arg_2773: [*c]GLchar) void {
    return glad_glGetPerfMonitorGroupStringAMD.?(arg_2770, arg_2771, arg_2772, arg_2773);
}
pub inline fn glGetPerfMonitorGroupsAMD(arg_2774: [*c]GLint, arg_2775: GLsizei, arg_2776: [*c]GLuint) void {
    return glad_glGetPerfMonitorGroupsAMD.?(arg_2774, arg_2775, arg_2776);
}
pub inline fn glGetPerfQueryDataINTEL(arg_2777: GLuint, arg_2778: GLuint, arg_2779: GLsizei, arg_2780: ?*anyopaque, arg_2781: [*c]GLuint) void {
    return glad_glGetPerfQueryDataINTEL.?(arg_2777, arg_2778, arg_2779, arg_2780, arg_2781);
}
pub inline fn glGetPerfQueryIdByNameINTEL(arg_2782: [*c]GLchar, arg_2783: [*c]GLuint) void {
    return glad_glGetPerfQueryIdByNameINTEL.?(arg_2782, arg_2783);
}
pub inline fn glGetPerfQueryInfoINTEL(arg_2784: GLuint, arg_2785: GLuint, arg_2786: [*c]GLchar, arg_2787: [*c]GLuint, arg_2788: [*c]GLuint, arg_2789: [*c]GLuint, arg_2790: [*c]GLuint) void {
    return glad_glGetPerfQueryInfoINTEL.?(arg_2784, arg_2785, arg_2786, arg_2787, arg_2788, arg_2789, arg_2790);
}
pub inline fn glGetPixelMapxv(arg_2791: GLenum, arg_2792: GLint, arg_2793: [*c]GLfixed) void {
    return glad_glGetPixelMapxv.?(arg_2791, arg_2792, arg_2793);
}
pub inline fn glGetPixelTexGenParameterfvSGIS(arg_2794: GLenum, arg_2795: [*c]GLfloat) void {
    return glad_glGetPixelTexGenParameterfvSGIS.?(arg_2794, arg_2795);
}
pub inline fn glGetPixelTexGenParameterivSGIS(arg_2796: GLenum, arg_2797: [*c]GLint) void {
    return glad_glGetPixelTexGenParameterivSGIS.?(arg_2796, arg_2797);
}
pub inline fn glGetPixelTransformParameterfvEXT(arg_2798: GLenum, arg_2799: GLenum, arg_2800: [*c]GLfloat) void {
    return glad_glGetPixelTransformParameterfvEXT.?(arg_2798, arg_2799, arg_2800);
}
pub inline fn glGetPixelTransformParameterivEXT(arg_2801: GLenum, arg_2802: GLenum, arg_2803: [*c]GLint) void {
    return glad_glGetPixelTransformParameterivEXT.?(arg_2801, arg_2802, arg_2803);
}
pub inline fn glGetPointerIndexedvEXT(arg_2804: GLenum, arg_2805: GLuint, arg_2806: [*c]?*anyopaque) void {
    return glad_glGetPointerIndexedvEXT.?(arg_2804, arg_2805, arg_2806);
}
pub inline fn glGetPointeri_vEXT(arg_2807: GLenum, arg_2808: GLuint, arg_2809: [*c]?*anyopaque) void {
    return glad_glGetPointeri_vEXT.?(arg_2807, arg_2808, arg_2809);
}
pub inline fn glGetPointerv(arg_2810: GLenum, arg_2811: [*c]?*anyopaque) void {
    return glad_glGetPointerv.?(arg_2810, arg_2811);
}
pub inline fn glGetPointervEXT(arg_2812: GLenum, arg_2813: [*c]?*anyopaque) void {
    return glad_glGetPointervEXT.?(arg_2812, arg_2813);
}
pub inline fn glGetProgramBinary(arg_2814: GLuint, arg_2815: GLsizei, arg_2816: [*c]GLsizei, arg_2817: [*c]GLenum, arg_2818: ?*anyopaque) void {
    return glad_glGetProgramBinary.?(arg_2814, arg_2815, arg_2816, arg_2817, arg_2818);
}
pub inline fn glGetProgramEnvParameterIivNV(arg_2819: GLenum, arg_2820: GLuint, arg_2821: [*c]GLint) void {
    return glad_glGetProgramEnvParameterIivNV.?(arg_2819, arg_2820, arg_2821);
}
pub inline fn glGetProgramEnvParameterIuivNV(arg_2822: GLenum, arg_2823: GLuint, arg_2824: [*c]GLuint) void {
    return glad_glGetProgramEnvParameterIuivNV.?(arg_2822, arg_2823, arg_2824);
}
pub inline fn glGetProgramEnvParameterdvARB(arg_2825: GLenum, arg_2826: GLuint, arg_2827: [*c]GLdouble) void {
    return glad_glGetProgramEnvParameterdvARB.?(arg_2825, arg_2826, arg_2827);
}
pub inline fn glGetProgramEnvParameterfvARB(arg_2828: GLenum, arg_2829: GLuint, arg_2830: [*c]GLfloat) void {
    return glad_glGetProgramEnvParameterfvARB.?(arg_2828, arg_2829, arg_2830);
}
pub inline fn glGetProgramInfoLog(arg_2831: GLuint, arg_2832: GLsizei, arg_2833: [*c]GLsizei, arg_2834: [*c]GLchar) void {
    return glad_glGetProgramInfoLog.?(arg_2831, arg_2832, arg_2833, arg_2834);
}
pub inline fn glGetProgramInterfaceiv(arg_2835: GLuint, arg_2836: GLenum, arg_2837: GLenum, arg_2838: [*c]GLint) void {
    return glad_glGetProgramInterfaceiv.?(arg_2835, arg_2836, arg_2837, arg_2838);
}
pub inline fn glGetProgramLocalParameterIivNV(arg_2839: GLenum, arg_2840: GLuint, arg_2841: [*c]GLint) void {
    return glad_glGetProgramLocalParameterIivNV.?(arg_2839, arg_2840, arg_2841);
}
pub inline fn glGetProgramLocalParameterIuivNV(arg_2842: GLenum, arg_2843: GLuint, arg_2844: [*c]GLuint) void {
    return glad_glGetProgramLocalParameterIuivNV.?(arg_2842, arg_2843, arg_2844);
}
pub inline fn glGetProgramLocalParameterdvARB(arg_2845: GLenum, arg_2846: GLuint, arg_2847: [*c]GLdouble) void {
    return glad_glGetProgramLocalParameterdvARB.?(arg_2845, arg_2846, arg_2847);
}
pub inline fn glGetProgramLocalParameterfvARB(arg_2848: GLenum, arg_2849: GLuint, arg_2850: [*c]GLfloat) void {
    return glad_glGetProgramLocalParameterfvARB.?(arg_2848, arg_2849, arg_2850);
}
pub inline fn glGetProgramNamedParameterdvNV(arg_2851: GLuint, arg_2852: GLsizei, arg_2853: [*c]const GLubyte, arg_2854: [*c]GLdouble) void {
    return glad_glGetProgramNamedParameterdvNV.?(arg_2851, arg_2852, arg_2853, arg_2854);
}
pub inline fn glGetProgramNamedParameterfvNV(arg_2855: GLuint, arg_2856: GLsizei, arg_2857: [*c]const GLubyte, arg_2858: [*c]GLfloat) void {
    return glad_glGetProgramNamedParameterfvNV.?(arg_2855, arg_2856, arg_2857, arg_2858);
}
pub inline fn glGetProgramParameterdvNV(arg_2859: GLenum, arg_2860: GLuint, arg_2861: GLenum, arg_2862: [*c]GLdouble) void {
    return glad_glGetProgramParameterdvNV.?(arg_2859, arg_2860, arg_2861, arg_2862);
}
pub inline fn glGetProgramParameterfvNV(arg_2863: GLenum, arg_2864: GLuint, arg_2865: GLenum, arg_2866: [*c]GLfloat) void {
    return glad_glGetProgramParameterfvNV.?(arg_2863, arg_2864, arg_2865, arg_2866);
}
pub inline fn glGetProgramPipelineInfoLog(arg_2867: GLuint, arg_2868: GLsizei, arg_2869: [*c]GLsizei, arg_2870: [*c]GLchar) void {
    return glad_glGetProgramPipelineInfoLog.?(arg_2867, arg_2868, arg_2869, arg_2870);
}
pub inline fn glGetProgramPipelineiv(arg_2871: GLuint, arg_2872: GLenum, arg_2873: [*c]GLint) void {
    return glad_glGetProgramPipelineiv.?(arg_2871, arg_2872, arg_2873);
}
pub inline fn glGetProgramResourceIndex(arg_2874: GLuint, arg_2875: GLenum, arg_2876: [*c]const GLchar) GLuint {
    return glad_glGetProgramResourceIndex.?(arg_2874, arg_2875, arg_2876);
}
pub inline fn glGetProgramResourceLocation(arg_2877: GLuint, arg_2878: GLenum, arg_2879: [*c]const GLchar) GLint {
    return glad_glGetProgramResourceLocation.?(arg_2877, arg_2878, arg_2879);
}
pub inline fn glGetProgramResourceLocationIndex(arg_2880: GLuint, arg_2881: GLenum, arg_2882: [*c]const GLchar) GLint {
    return glad_glGetProgramResourceLocationIndex.?(arg_2880, arg_2881, arg_2882);
}
pub inline fn glGetProgramResourceName(arg_2883: GLuint, arg_2884: GLenum, arg_2885: GLuint, arg_2886: GLsizei, arg_2887: [*c]GLsizei, arg_2888: [*c]GLchar) void {
    return glad_glGetProgramResourceName.?(arg_2883, arg_2884, arg_2885, arg_2886, arg_2887, arg_2888);
}
pub inline fn glGetProgramResourcefvNV(arg_2889: GLuint, arg_2890: GLenum, arg_2891: GLuint, arg_2892: GLsizei, arg_2893: [*c]const GLenum, arg_2894: GLsizei, arg_2895: [*c]GLsizei, arg_2896: [*c]GLfloat) void {
    return glad_glGetProgramResourcefvNV.?(arg_2889, arg_2890, arg_2891, arg_2892, arg_2893, arg_2894, arg_2895, arg_2896);
}
pub inline fn glGetProgramResourceiv(arg_2897: GLuint, arg_2898: GLenum, arg_2899: GLuint, arg_2900: GLsizei, arg_2901: [*c]const GLenum, arg_2902: GLsizei, arg_2903: [*c]GLsizei, arg_2904: [*c]GLint) void {
    return glad_glGetProgramResourceiv.?(arg_2897, arg_2898, arg_2899, arg_2900, arg_2901, arg_2902, arg_2903, arg_2904);
}
pub inline fn glGetProgramStageiv(arg_2905: GLuint, arg_2906: GLenum, arg_2907: GLenum, arg_2908: [*c]GLint) void {
    return glad_glGetProgramStageiv.?(arg_2905, arg_2906, arg_2907, arg_2908);
}
pub inline fn glGetProgramStringARB(arg_2909: GLenum, arg_2910: GLenum, arg_2911: ?*anyopaque) void {
    return glad_glGetProgramStringARB.?(arg_2909, arg_2910, arg_2911);
}
pub inline fn glGetProgramStringNV(arg_2912: GLuint, arg_2913: GLenum, arg_2914: [*c]GLubyte) void {
    return glad_glGetProgramStringNV.?(arg_2912, arg_2913, arg_2914);
}
pub inline fn glGetProgramSubroutineParameteruivNV(arg_2915: GLenum, arg_2916: GLuint, arg_2917: [*c]GLuint) void {
    return glad_glGetProgramSubroutineParameteruivNV.?(arg_2915, arg_2916, arg_2917);
}
pub inline fn glGetProgramiv(arg_2918: GLuint, arg_2919: GLenum, arg_2920: [*c]GLint) void {
    return glad_glGetProgramiv.?(arg_2918, arg_2919, arg_2920);
}
pub inline fn glGetProgramivARB(arg_2921: GLenum, arg_2922: GLenum, arg_2923: [*c]GLint) void {
    return glad_glGetProgramivARB.?(arg_2921, arg_2922, arg_2923);
}
pub inline fn glGetProgramivNV(arg_2924: GLuint, arg_2925: GLenum, arg_2926: [*c]GLint) void {
    return glad_glGetProgramivNV.?(arg_2924, arg_2925, arg_2926);
}
pub inline fn glGetQueryBufferObjecti64v(arg_2927: GLuint, arg_2928: GLuint, arg_2929: GLenum, arg_2930: GLintptr) void {
    return glad_glGetQueryBufferObjecti64v.?(arg_2927, arg_2928, arg_2929, arg_2930);
}
pub inline fn glGetQueryBufferObjectiv(arg_2931: GLuint, arg_2932: GLuint, arg_2933: GLenum, arg_2934: GLintptr) void {
    return glad_glGetQueryBufferObjectiv.?(arg_2931, arg_2932, arg_2933, arg_2934);
}
pub inline fn glGetQueryBufferObjectui64v(arg_2935: GLuint, arg_2936: GLuint, arg_2937: GLenum, arg_2938: GLintptr) void {
    return glad_glGetQueryBufferObjectui64v.?(arg_2935, arg_2936, arg_2937, arg_2938);
}
pub inline fn glGetQueryBufferObjectuiv(arg_2939: GLuint, arg_2940: GLuint, arg_2941: GLenum, arg_2942: GLintptr) void {
    return glad_glGetQueryBufferObjectuiv.?(arg_2939, arg_2940, arg_2941, arg_2942);
}
pub inline fn glGetQueryIndexediv(arg_2943: GLenum, arg_2944: GLuint, arg_2945: GLenum, arg_2946: [*c]GLint) void {
    return glad_glGetQueryIndexediv.?(arg_2943, arg_2944, arg_2945, arg_2946);
}
pub inline fn glGetQueryObjecti64v(arg_2947: GLuint, arg_2948: GLenum, arg_2949: [*c]GLint64) void {
    return glad_glGetQueryObjecti64v.?(arg_2947, arg_2948, arg_2949);
}
pub inline fn glGetQueryObjecti64vEXT(arg_2950: GLuint, arg_2951: GLenum, arg_2952: [*c]GLint64) void {
    return glad_glGetQueryObjecti64vEXT.?(arg_2950, arg_2951, arg_2952);
}
pub inline fn glGetQueryObjectiv(arg_2953: GLuint, arg_2954: GLenum, arg_2955: [*c]GLint) void {
    return glad_glGetQueryObjectiv.?(arg_2953, arg_2954, arg_2955);
}
pub inline fn glGetQueryObjectivARB(arg_2956: GLuint, arg_2957: GLenum, arg_2958: [*c]GLint) void {
    return glad_glGetQueryObjectivARB.?(arg_2956, arg_2957, arg_2958);
}
pub inline fn glGetQueryObjectui64v(arg_2959: GLuint, arg_2960: GLenum, arg_2961: [*c]GLuint64) void {
    return glad_glGetQueryObjectui64v.?(arg_2959, arg_2960, arg_2961);
}
pub inline fn glGetQueryObjectui64vEXT(arg_2962: GLuint, arg_2963: GLenum, arg_2964: [*c]GLuint64) void {
    return glad_glGetQueryObjectui64vEXT.?(arg_2962, arg_2963, arg_2964);
}
pub inline fn glGetQueryObjectuiv(arg_2965: GLuint, arg_2966: GLenum, arg_2967: [*c]GLuint) void {
    return glad_glGetQueryObjectuiv.?(arg_2965, arg_2966, arg_2967);
}
pub inline fn glGetQueryObjectuivARB(arg_2968: GLuint, arg_2969: GLenum, arg_2970: [*c]GLuint) void {
    return glad_glGetQueryObjectuivARB.?(arg_2968, arg_2969, arg_2970);
}
pub inline fn glGetQueryiv(arg_2971: GLenum, arg_2972: GLenum, arg_2973: [*c]GLint) void {
    return glad_glGetQueryiv.?(arg_2971, arg_2972, arg_2973);
}
pub inline fn glGetQueryivARB(arg_2974: GLenum, arg_2975: GLenum, arg_2976: [*c]GLint) void {
    return glad_glGetQueryivARB.?(arg_2974, arg_2975, arg_2976);
}
pub inline fn glGetRenderbufferParameteriv(arg_2977: GLenum, arg_2978: GLenum, arg_2979: [*c]GLint) void {
    return glad_glGetRenderbufferParameteriv.?(arg_2977, arg_2978, arg_2979);
}
pub inline fn glGetRenderbufferParameterivEXT(arg_2980: GLenum, arg_2981: GLenum, arg_2982: [*c]GLint) void {
    return glad_glGetRenderbufferParameterivEXT.?(arg_2980, arg_2981, arg_2982);
}
pub inline fn glGetSamplerParameterIiv(arg_2983: GLuint, arg_2984: GLenum, arg_2985: [*c]GLint) void {
    return glad_glGetSamplerParameterIiv.?(arg_2983, arg_2984, arg_2985);
}
pub inline fn glGetSamplerParameterIuiv(arg_2986: GLuint, arg_2987: GLenum, arg_2988: [*c]GLuint) void {
    return glad_glGetSamplerParameterIuiv.?(arg_2986, arg_2987, arg_2988);
}
pub inline fn glGetSamplerParameterfv(arg_2989: GLuint, arg_2990: GLenum, arg_2991: [*c]GLfloat) void {
    return glad_glGetSamplerParameterfv.?(arg_2989, arg_2990, arg_2991);
}
pub inline fn glGetSamplerParameteriv(arg_2992: GLuint, arg_2993: GLenum, arg_2994: [*c]GLint) void {
    return glad_glGetSamplerParameteriv.?(arg_2992, arg_2993, arg_2994);
}
pub inline fn glGetSemaphoreParameterivNV(arg_2995: GLuint, arg_2996: GLenum, arg_2997: [*c]GLint) void {
    return glad_glGetSemaphoreParameterivNV.?(arg_2995, arg_2996, arg_2997);
}
pub inline fn glGetSemaphoreParameterui64vEXT(arg_2998: GLuint, arg_2999: GLenum, arg_3000: [*c]GLuint64) void {
    return glad_glGetSemaphoreParameterui64vEXT.?(arg_2998, arg_2999, arg_3000);
}
pub inline fn glGetSeparableFilterEXT(arg_3001: GLenum, arg_3002: GLenum, arg_3003: GLenum, arg_3004: ?*anyopaque, arg_3005: ?*anyopaque, arg_3006: ?*anyopaque) void {
    return glad_glGetSeparableFilterEXT.?(arg_3001, arg_3002, arg_3003, arg_3004, arg_3005, arg_3006);
}
pub inline fn glGetShaderInfoLog(arg_3007: GLuint, arg_3008: GLsizei, arg_3009: [*c]GLsizei, arg_3010: [*c]GLchar) void {
    return glad_glGetShaderInfoLog.?(arg_3007, arg_3008, arg_3009, arg_3010);
}
pub inline fn glGetShaderPrecisionFormat(arg_3011: GLenum, arg_3012: GLenum, arg_3013: [*c]GLint, arg_3014: [*c]GLint) void {
    return glad_glGetShaderPrecisionFormat.?(arg_3011, arg_3012, arg_3013, arg_3014);
}
pub inline fn glGetShaderSource(arg_3015: GLuint, arg_3016: GLsizei, arg_3017: [*c]GLsizei, arg_3018: [*c]GLchar) void {
    return glad_glGetShaderSource.?(arg_3015, arg_3016, arg_3017, arg_3018);
}
pub inline fn glGetShaderSourceARB(arg_3019: GLhandleARB, arg_3020: GLsizei, arg_3021: [*c]GLsizei, arg_3022: [*c]GLcharARB) void {
    return glad_glGetShaderSourceARB.?(arg_3019, arg_3020, arg_3021, arg_3022);
}
pub inline fn glGetShaderiv(arg_3023: GLuint, arg_3024: GLenum, arg_3025: [*c]GLint) void {
    return glad_glGetShaderiv.?(arg_3023, arg_3024, arg_3025);
}
pub inline fn glGetShadingRateImagePaletteNV(arg_3026: GLuint, arg_3027: GLuint, arg_3028: [*c]GLenum) void {
    return glad_glGetShadingRateImagePaletteNV.?(arg_3026, arg_3027, arg_3028);
}
pub inline fn glGetShadingRateSampleLocationivNV(arg_3029: GLenum, arg_3030: GLuint, arg_3031: GLuint, arg_3032: [*c]GLint) void {
    return glad_glGetShadingRateSampleLocationivNV.?(arg_3029, arg_3030, arg_3031, arg_3032);
}
pub inline fn glGetSharpenTexFuncSGIS(arg_3033: GLenum, arg_3034: [*c]GLfloat) void {
    return glad_glGetSharpenTexFuncSGIS.?(arg_3033, arg_3034);
}
pub inline fn glGetStageIndexNV(arg_3035: GLenum) GLushort {
    return glad_glGetStageIndexNV.?(arg_3035);
}
pub inline fn glGetString(arg_3036: GLenum) [*c]const GLubyte {
    return glad_glGetString.?(arg_3036);
}
pub inline fn glGetStringi(arg_3037: GLenum, arg_3038: GLuint) [*c]const GLubyte {
    return glad_glGetStringi.?(arg_3037, arg_3038);
}
pub inline fn glGetSubroutineIndex(arg_3039: GLuint, arg_3040: GLenum, arg_3041: [*c]const GLchar) GLuint {
    return glad_glGetSubroutineIndex.?(arg_3039, arg_3040, arg_3041);
}
pub inline fn glGetSubroutineUniformLocation(arg_3042: GLuint, arg_3043: GLenum, arg_3044: [*c]const GLchar) GLint {
    return glad_glGetSubroutineUniformLocation.?(arg_3042, arg_3043, arg_3044);
}
pub inline fn glGetSynciv(arg_3045: GLsync, arg_3046: GLenum, arg_3047: GLsizei, arg_3048: [*c]GLsizei, arg_3049: [*c]GLint) void {
    return glad_glGetSynciv.?(arg_3045, arg_3046, arg_3047, arg_3048, arg_3049);
}
pub inline fn glGetTexBumpParameterfvATI(arg_3050: GLenum, arg_3051: [*c]GLfloat) void {
    return glad_glGetTexBumpParameterfvATI.?(arg_3050, arg_3051);
}
pub inline fn glGetTexBumpParameterivATI(arg_3052: GLenum, arg_3053: [*c]GLint) void {
    return glad_glGetTexBumpParameterivATI.?(arg_3052, arg_3053);
}
pub inline fn glGetTexEnvxvOES(arg_3054: GLenum, arg_3055: GLenum, arg_3056: [*c]GLfixed) void {
    return glad_glGetTexEnvxvOES.?(arg_3054, arg_3055, arg_3056);
}
pub inline fn glGetTexFilterFuncSGIS(arg_3057: GLenum, arg_3058: GLenum, arg_3059: [*c]GLfloat) void {
    return glad_glGetTexFilterFuncSGIS.?(arg_3057, arg_3058, arg_3059);
}
pub inline fn glGetTexGenxvOES(arg_3060: GLenum, arg_3061: GLenum, arg_3062: [*c]GLfixed) void {
    return glad_glGetTexGenxvOES.?(arg_3060, arg_3061, arg_3062);
}
pub inline fn glGetTexImage(arg_3063: GLenum, arg_3064: GLint, arg_3065: GLenum, arg_3066: GLenum, arg_3067: ?*anyopaque) void {
    return glad_glGetTexImage.?(arg_3063, arg_3064, arg_3065, arg_3066, arg_3067);
}
pub inline fn glGetTexLevelParameterfv(arg_3068: GLenum, arg_3069: GLint, arg_3070: GLenum, arg_3071: [*c]GLfloat) void {
    return glad_glGetTexLevelParameterfv.?(arg_3068, arg_3069, arg_3070, arg_3071);
}
pub inline fn glGetTexLevelParameteriv(arg_3072: GLenum, arg_3073: GLint, arg_3074: GLenum, arg_3075: [*c]GLint) void {
    return glad_glGetTexLevelParameteriv.?(arg_3072, arg_3073, arg_3074, arg_3075);
}
pub inline fn glGetTexLevelParameterxvOES(arg_3076: GLenum, arg_3077: GLint, arg_3078: GLenum, arg_3079: [*c]GLfixed) void {
    return glad_glGetTexLevelParameterxvOES.?(arg_3076, arg_3077, arg_3078, arg_3079);
}
pub inline fn glGetTexParameterIiv(arg_3080: GLenum, arg_3081: GLenum, arg_3082: [*c]GLint) void {
    return glad_glGetTexParameterIiv.?(arg_3080, arg_3081, arg_3082);
}
pub inline fn glGetTexParameterIivEXT(arg_3083: GLenum, arg_3084: GLenum, arg_3085: [*c]GLint) void {
    return glad_glGetTexParameterIivEXT.?(arg_3083, arg_3084, arg_3085);
}
pub inline fn glGetTexParameterIuiv(arg_3086: GLenum, arg_3087: GLenum, arg_3088: [*c]GLuint) void {
    return glad_glGetTexParameterIuiv.?(arg_3086, arg_3087, arg_3088);
}
pub inline fn glGetTexParameterIuivEXT(arg_3089: GLenum, arg_3090: GLenum, arg_3091: [*c]GLuint) void {
    return glad_glGetTexParameterIuivEXT.?(arg_3089, arg_3090, arg_3091);
}
pub inline fn glGetTexParameterPointervAPPLE(arg_3092: GLenum, arg_3093: GLenum, arg_3094: [*c]?*anyopaque) void {
    return glad_glGetTexParameterPointervAPPLE.?(arg_3092, arg_3093, arg_3094);
}
pub inline fn glGetTexParameterfv(arg_3095: GLenum, arg_3096: GLenum, arg_3097: [*c]GLfloat) void {
    return glad_glGetTexParameterfv.?(arg_3095, arg_3096, arg_3097);
}
pub inline fn glGetTexParameteriv(arg_3098: GLenum, arg_3099: GLenum, arg_3100: [*c]GLint) void {
    return glad_glGetTexParameteriv.?(arg_3098, arg_3099, arg_3100);
}
pub inline fn glGetTexParameterxvOES(arg_3101: GLenum, arg_3102: GLenum, arg_3103: [*c]GLfixed) void {
    return glad_glGetTexParameterxvOES.?(arg_3101, arg_3102, arg_3103);
}
pub inline fn glGetTextureHandleARB(arg_3104: GLuint) GLuint64 {
    return glad_glGetTextureHandleARB.?(arg_3104);
}
pub inline fn glGetTextureHandleNV(arg_3105: GLuint) GLuint64 {
    return glad_glGetTextureHandleNV.?(arg_3105);
}
pub inline fn glGetTextureImage(arg_3106: GLuint, arg_3107: GLint, arg_3108: GLenum, arg_3109: GLenum, arg_3110: GLsizei, arg_3111: ?*anyopaque) void {
    return glad_glGetTextureImage.?(arg_3106, arg_3107, arg_3108, arg_3109, arg_3110, arg_3111);
}
pub inline fn glGetTextureImageEXT(arg_3112: GLuint, arg_3113: GLenum, arg_3114: GLint, arg_3115: GLenum, arg_3116: GLenum, arg_3117: ?*anyopaque) void {
    return glad_glGetTextureImageEXT.?(arg_3112, arg_3113, arg_3114, arg_3115, arg_3116, arg_3117);
}
pub inline fn glGetTextureLevelParameterfv(arg_3118: GLuint, arg_3119: GLint, arg_3120: GLenum, arg_3121: [*c]GLfloat) void {
    return glad_glGetTextureLevelParameterfv.?(arg_3118, arg_3119, arg_3120, arg_3121);
}
pub inline fn glGetTextureLevelParameterfvEXT(arg_3122: GLuint, arg_3123: GLenum, arg_3124: GLint, arg_3125: GLenum, arg_3126: [*c]GLfloat) void {
    return glad_glGetTextureLevelParameterfvEXT.?(arg_3122, arg_3123, arg_3124, arg_3125, arg_3126);
}
pub inline fn glGetTextureLevelParameteriv(arg_3127: GLuint, arg_3128: GLint, arg_3129: GLenum, arg_3130: [*c]GLint) void {
    return glad_glGetTextureLevelParameteriv.?(arg_3127, arg_3128, arg_3129, arg_3130);
}
pub inline fn glGetTextureLevelParameterivEXT(arg_3131: GLuint, arg_3132: GLenum, arg_3133: GLint, arg_3134: GLenum, arg_3135: [*c]GLint) void {
    return glad_glGetTextureLevelParameterivEXT.?(arg_3131, arg_3132, arg_3133, arg_3134, arg_3135);
}
pub inline fn glGetTextureParameterIiv(arg_3136: GLuint, arg_3137: GLenum, arg_3138: [*c]GLint) void {
    return glad_glGetTextureParameterIiv.?(arg_3136, arg_3137, arg_3138);
}
pub inline fn glGetTextureParameterIivEXT(arg_3139: GLuint, arg_3140: GLenum, arg_3141: GLenum, arg_3142: [*c]GLint) void {
    return glad_glGetTextureParameterIivEXT.?(arg_3139, arg_3140, arg_3141, arg_3142);
}
pub inline fn glGetTextureParameterIuiv(arg_3143: GLuint, arg_3144: GLenum, arg_3145: [*c]GLuint) void {
    return glad_glGetTextureParameterIuiv.?(arg_3143, arg_3144, arg_3145);
}
pub inline fn glGetTextureParameterIuivEXT(arg_3146: GLuint, arg_3147: GLenum, arg_3148: GLenum, arg_3149: [*c]GLuint) void {
    return glad_glGetTextureParameterIuivEXT.?(arg_3146, arg_3147, arg_3148, arg_3149);
}
pub inline fn glGetTextureParameterfv(arg_3150: GLuint, arg_3151: GLenum, arg_3152: [*c]GLfloat) void {
    return glad_glGetTextureParameterfv.?(arg_3150, arg_3151, arg_3152);
}
pub inline fn glGetTextureParameterfvEXT(arg_3153: GLuint, arg_3154: GLenum, arg_3155: GLenum, arg_3156: [*c]GLfloat) void {
    return glad_glGetTextureParameterfvEXT.?(arg_3153, arg_3154, arg_3155, arg_3156);
}
pub inline fn glGetTextureParameteriv(arg_3157: GLuint, arg_3158: GLenum, arg_3159: [*c]GLint) void {
    return glad_glGetTextureParameteriv.?(arg_3157, arg_3158, arg_3159);
}
pub inline fn glGetTextureParameterivEXT(arg_3160: GLuint, arg_3161: GLenum, arg_3162: GLenum, arg_3163: [*c]GLint) void {
    return glad_glGetTextureParameterivEXT.?(arg_3160, arg_3161, arg_3162, arg_3163);
}
pub inline fn glGetTextureSamplerHandleARB(arg_3164: GLuint, arg_3165: GLuint) GLuint64 {
    return glad_glGetTextureSamplerHandleARB.?(arg_3164, arg_3165);
}
pub inline fn glGetTextureSamplerHandleNV(arg_3166: GLuint, arg_3167: GLuint) GLuint64 {
    return glad_glGetTextureSamplerHandleNV.?(arg_3166, arg_3167);
}
pub inline fn glGetTextureSubImage(arg_3168: GLuint, arg_3169: GLint, arg_3170: GLint, arg_3171: GLint, arg_3172: GLint, arg_3173: GLsizei, arg_3174: GLsizei, arg_3175: GLsizei, arg_3176: GLenum, arg_3177: GLenum, arg_3178: GLsizei, arg_3179: ?*anyopaque) void {
    return glad_glGetTextureSubImage.?(arg_3168, arg_3169, arg_3170, arg_3171, arg_3172, arg_3173, arg_3174, arg_3175, arg_3176, arg_3177, arg_3178, arg_3179);
}
pub inline fn glGetTrackMatrixivNV(arg_3180: GLenum, arg_3181: GLuint, arg_3182: GLenum, arg_3183: [*c]GLint) void {
    return glad_glGetTrackMatrixivNV.?(arg_3180, arg_3181, arg_3182, arg_3183);
}
pub inline fn glGetTransformFeedbackVarying(arg_3184: GLuint, arg_3185: GLuint, arg_3186: GLsizei, arg_3187: [*c]GLsizei, arg_3188: [*c]GLsizei, arg_3189: [*c]GLenum, arg_3190: [*c]GLchar) void {
    return glad_glGetTransformFeedbackVarying.?(arg_3184, arg_3185, arg_3186, arg_3187, arg_3188, arg_3189, arg_3190);
}
pub inline fn glGetTransformFeedbackVaryingEXT(arg_3191: GLuint, arg_3192: GLuint, arg_3193: GLsizei, arg_3194: [*c]GLsizei, arg_3195: [*c]GLsizei, arg_3196: [*c]GLenum, arg_3197: [*c]GLchar) void {
    return glad_glGetTransformFeedbackVaryingEXT.?(arg_3191, arg_3192, arg_3193, arg_3194, arg_3195, arg_3196, arg_3197);
}
pub inline fn glGetTransformFeedbackVaryingNV(arg_3198: GLuint, arg_3199: GLuint, arg_3200: [*c]GLint) void {
    return glad_glGetTransformFeedbackVaryingNV.?(arg_3198, arg_3199, arg_3200);
}
pub inline fn glGetTransformFeedbacki64_v(arg_3201: GLuint, arg_3202: GLenum, arg_3203: GLuint, arg_3204: [*c]GLint64) void {
    return glad_glGetTransformFeedbacki64_v.?(arg_3201, arg_3202, arg_3203, arg_3204);
}
pub inline fn glGetTransformFeedbacki_v(arg_3205: GLuint, arg_3206: GLenum, arg_3207: GLuint, arg_3208: [*c]GLint) void {
    return glad_glGetTransformFeedbacki_v.?(arg_3205, arg_3206, arg_3207, arg_3208);
}
pub inline fn glGetTransformFeedbackiv(arg_3209: GLuint, arg_3210: GLenum, arg_3211: [*c]GLint) void {
    return glad_glGetTransformFeedbackiv.?(arg_3209, arg_3210, arg_3211);
}
pub inline fn glGetUniformBlockIndex(arg_3212: GLuint, arg_3213: [*c]const GLchar) GLuint {
    return glad_glGetUniformBlockIndex.?(arg_3212, arg_3213);
}
pub inline fn glGetUniformBufferSizeEXT(arg_3214: GLuint, arg_3215: GLint) GLint {
    return glad_glGetUniformBufferSizeEXT.?(arg_3214, arg_3215);
}
pub inline fn glGetUniformIndices(arg_3216: GLuint, arg_3217: GLsizei, arg_3218: [*c]const [*c]const GLchar, arg_3219: [*c]GLuint) void {
    return glad_glGetUniformIndices.?(arg_3216, arg_3217, arg_3218, arg_3219);
}
pub inline fn glGetUniformLocation(arg_3220: GLuint, arg_3221: [*c]const GLchar) GLint {
    return glad_glGetUniformLocation.?(arg_3220, arg_3221);
}
pub inline fn glGetUniformLocationARB(arg_3222: GLhandleARB, arg_3223: [*c]const GLcharARB) GLint {
    return glad_glGetUniformLocationARB.?(arg_3222, arg_3223);
}
pub inline fn glGetUniformOffsetEXT(arg_3224: GLuint, arg_3225: GLint) GLintptr {
    return glad_glGetUniformOffsetEXT.?(arg_3224, arg_3225);
}
pub inline fn glGetUniformSubroutineuiv(arg_3226: GLenum, arg_3227: GLint, arg_3228: [*c]GLuint) void {
    return glad_glGetUniformSubroutineuiv.?(arg_3226, arg_3227, arg_3228);
}
pub inline fn glGetUniformdv(arg_3229: GLuint, arg_3230: GLint, arg_3231: [*c]GLdouble) void {
    return glad_glGetUniformdv.?(arg_3229, arg_3230, arg_3231);
}
pub inline fn glGetUniformfv(arg_3232: GLuint, arg_3233: GLint, arg_3234: [*c]GLfloat) void {
    return glad_glGetUniformfv.?(arg_3232, arg_3233, arg_3234);
}
pub inline fn glGetUniformfvARB(arg_3235: GLhandleARB, arg_3236: GLint, arg_3237: [*c]GLfloat) void {
    return glad_glGetUniformfvARB.?(arg_3235, arg_3236, arg_3237);
}
pub inline fn glGetUniformi64vARB(arg_3238: GLuint, arg_3239: GLint, arg_3240: [*c]GLint64) void {
    return glad_glGetUniformi64vARB.?(arg_3238, arg_3239, arg_3240);
}
pub inline fn glGetUniformi64vNV(arg_3241: GLuint, arg_3242: GLint, arg_3243: [*c]GLint64EXT) void {
    return glad_glGetUniformi64vNV.?(arg_3241, arg_3242, arg_3243);
}
pub inline fn glGetUniformiv(arg_3244: GLuint, arg_3245: GLint, arg_3246: [*c]GLint) void {
    return glad_glGetUniformiv.?(arg_3244, arg_3245, arg_3246);
}
pub inline fn glGetUniformivARB(arg_3247: GLhandleARB, arg_3248: GLint, arg_3249: [*c]GLint) void {
    return glad_glGetUniformivARB.?(arg_3247, arg_3248, arg_3249);
}
pub inline fn glGetUniformui64vARB(arg_3250: GLuint, arg_3251: GLint, arg_3252: [*c]GLuint64) void {
    return glad_glGetUniformui64vARB.?(arg_3250, arg_3251, arg_3252);
}
pub inline fn glGetUniformui64vNV(arg_3253: GLuint, arg_3254: GLint, arg_3255: [*c]GLuint64EXT) void {
    return glad_glGetUniformui64vNV.?(arg_3253, arg_3254, arg_3255);
}
pub inline fn glGetUniformuiv(arg_3256: GLuint, arg_3257: GLint, arg_3258: [*c]GLuint) void {
    return glad_glGetUniformuiv.?(arg_3256, arg_3257, arg_3258);
}
pub inline fn glGetUniformuivEXT(arg_3259: GLuint, arg_3260: GLint, arg_3261: [*c]GLuint) void {
    return glad_glGetUniformuivEXT.?(arg_3259, arg_3260, arg_3261);
}
pub inline fn glGetUnsignedBytei_vEXT(arg_3262: GLenum, arg_3263: GLuint, arg_3264: [*c]GLubyte) void {
    return glad_glGetUnsignedBytei_vEXT.?(arg_3262, arg_3263, arg_3264);
}
pub inline fn glGetUnsignedBytevEXT(arg_3265: GLenum, arg_3266: [*c]GLubyte) void {
    return glad_glGetUnsignedBytevEXT.?(arg_3265, arg_3266);
}
pub inline fn glGetVariantArrayObjectfvATI(arg_3267: GLuint, arg_3268: GLenum, arg_3269: [*c]GLfloat) void {
    return glad_glGetVariantArrayObjectfvATI.?(arg_3267, arg_3268, arg_3269);
}
pub inline fn glGetVariantArrayObjectivATI(arg_3270: GLuint, arg_3271: GLenum, arg_3272: [*c]GLint) void {
    return glad_glGetVariantArrayObjectivATI.?(arg_3270, arg_3271, arg_3272);
}
pub inline fn glGetVariantBooleanvEXT(arg_3273: GLuint, arg_3274: GLenum, arg_3275: [*c]GLboolean) void {
    return glad_glGetVariantBooleanvEXT.?(arg_3273, arg_3274, arg_3275);
}
pub inline fn glGetVariantFloatvEXT(arg_3276: GLuint, arg_3277: GLenum, arg_3278: [*c]GLfloat) void {
    return glad_glGetVariantFloatvEXT.?(arg_3276, arg_3277, arg_3278);
}
pub inline fn glGetVariantIntegervEXT(arg_3279: GLuint, arg_3280: GLenum, arg_3281: [*c]GLint) void {
    return glad_glGetVariantIntegervEXT.?(arg_3279, arg_3280, arg_3281);
}
pub inline fn glGetVariantPointervEXT(arg_3282: GLuint, arg_3283: GLenum, arg_3284: [*c]?*anyopaque) void {
    return glad_glGetVariantPointervEXT.?(arg_3282, arg_3283, arg_3284);
}
pub inline fn glGetVaryingLocationNV(arg_3285: GLuint, arg_3286: [*c]const GLchar) GLint {
    return glad_glGetVaryingLocationNV.?(arg_3285, arg_3286);
}
pub inline fn glGetVertexArrayIndexed64iv(arg_3287: GLuint, arg_3288: GLuint, arg_3289: GLenum, arg_3290: [*c]GLint64) void {
    return glad_glGetVertexArrayIndexed64iv.?(arg_3287, arg_3288, arg_3289, arg_3290);
}
pub inline fn glGetVertexArrayIndexediv(arg_3291: GLuint, arg_3292: GLuint, arg_3293: GLenum, arg_3294: [*c]GLint) void {
    return glad_glGetVertexArrayIndexediv.?(arg_3291, arg_3292, arg_3293, arg_3294);
}
pub inline fn glGetVertexArrayIntegeri_vEXT(arg_3295: GLuint, arg_3296: GLuint, arg_3297: GLenum, arg_3298: [*c]GLint) void {
    return glad_glGetVertexArrayIntegeri_vEXT.?(arg_3295, arg_3296, arg_3297, arg_3298);
}
pub inline fn glGetVertexArrayIntegervEXT(arg_3299: GLuint, arg_3300: GLenum, arg_3301: [*c]GLint) void {
    return glad_glGetVertexArrayIntegervEXT.?(arg_3299, arg_3300, arg_3301);
}
pub inline fn glGetVertexArrayPointeri_vEXT(arg_3302: GLuint, arg_3303: GLuint, arg_3304: GLenum, arg_3305: [*c]?*anyopaque) void {
    return glad_glGetVertexArrayPointeri_vEXT.?(arg_3302, arg_3303, arg_3304, arg_3305);
}
pub inline fn glGetVertexArrayPointervEXT(arg_3306: GLuint, arg_3307: GLenum, arg_3308: [*c]?*anyopaque) void {
    return glad_glGetVertexArrayPointervEXT.?(arg_3306, arg_3307, arg_3308);
}
pub inline fn glGetVertexArrayiv(arg_3309: GLuint, arg_3310: GLenum, arg_3311: [*c]GLint) void {
    return glad_glGetVertexArrayiv.?(arg_3309, arg_3310, arg_3311);
}
pub inline fn glGetVertexAttribArrayObjectfvATI(arg_3312: GLuint, arg_3313: GLenum, arg_3314: [*c]GLfloat) void {
    return glad_glGetVertexAttribArrayObjectfvATI.?(arg_3312, arg_3313, arg_3314);
}
pub inline fn glGetVertexAttribArrayObjectivATI(arg_3315: GLuint, arg_3316: GLenum, arg_3317: [*c]GLint) void {
    return glad_glGetVertexAttribArrayObjectivATI.?(arg_3315, arg_3316, arg_3317);
}
pub inline fn glGetVertexAttribIiv(arg_3318: GLuint, arg_3319: GLenum, arg_3320: [*c]GLint) void {
    return glad_glGetVertexAttribIiv.?(arg_3318, arg_3319, arg_3320);
}
pub inline fn glGetVertexAttribIivEXT(arg_3321: GLuint, arg_3322: GLenum, arg_3323: [*c]GLint) void {
    return glad_glGetVertexAttribIivEXT.?(arg_3321, arg_3322, arg_3323);
}
pub inline fn glGetVertexAttribIuiv(arg_3324: GLuint, arg_3325: GLenum, arg_3326: [*c]GLuint) void {
    return glad_glGetVertexAttribIuiv.?(arg_3324, arg_3325, arg_3326);
}
pub inline fn glGetVertexAttribIuivEXT(arg_3327: GLuint, arg_3328: GLenum, arg_3329: [*c]GLuint) void {
    return glad_glGetVertexAttribIuivEXT.?(arg_3327, arg_3328, arg_3329);
}
pub inline fn glGetVertexAttribLdv(arg_3330: GLuint, arg_3331: GLenum, arg_3332: [*c]GLdouble) void {
    return glad_glGetVertexAttribLdv.?(arg_3330, arg_3331, arg_3332);
}
pub inline fn glGetVertexAttribLdvEXT(arg_3333: GLuint, arg_3334: GLenum, arg_3335: [*c]GLdouble) void {
    return glad_glGetVertexAttribLdvEXT.?(arg_3333, arg_3334, arg_3335);
}
pub inline fn glGetVertexAttribLi64vNV(arg_3336: GLuint, arg_3337: GLenum, arg_3338: [*c]GLint64EXT) void {
    return glad_glGetVertexAttribLi64vNV.?(arg_3336, arg_3337, arg_3338);
}
pub inline fn glGetVertexAttribLui64vARB(arg_3339: GLuint, arg_3340: GLenum, arg_3341: [*c]GLuint64EXT) void {
    return glad_glGetVertexAttribLui64vARB.?(arg_3339, arg_3340, arg_3341);
}
pub inline fn glGetVertexAttribLui64vNV(arg_3342: GLuint, arg_3343: GLenum, arg_3344: [*c]GLuint64EXT) void {
    return glad_glGetVertexAttribLui64vNV.?(arg_3342, arg_3343, arg_3344);
}
pub inline fn glGetVertexAttribPointerv(arg_3345: GLuint, arg_3346: GLenum, arg_3347: [*c]?*anyopaque) void {
    return glad_glGetVertexAttribPointerv.?(arg_3345, arg_3346, arg_3347);
}
pub inline fn glGetVertexAttribPointervARB(arg_3348: GLuint, arg_3349: GLenum, arg_3350: [*c]?*anyopaque) void {
    return glad_glGetVertexAttribPointervARB.?(arg_3348, arg_3349, arg_3350);
}
pub inline fn glGetVertexAttribPointervNV(arg_3351: GLuint, arg_3352: GLenum, arg_3353: [*c]?*anyopaque) void {
    return glad_glGetVertexAttribPointervNV.?(arg_3351, arg_3352, arg_3353);
}
pub inline fn glGetVertexAttribdv(arg_3354: GLuint, arg_3355: GLenum, arg_3356: [*c]GLdouble) void {
    return glad_glGetVertexAttribdv.?(arg_3354, arg_3355, arg_3356);
}
pub inline fn glGetVertexAttribdvARB(arg_3357: GLuint, arg_3358: GLenum, arg_3359: [*c]GLdouble) void {
    return glad_glGetVertexAttribdvARB.?(arg_3357, arg_3358, arg_3359);
}
pub inline fn glGetVertexAttribdvNV(arg_3360: GLuint, arg_3361: GLenum, arg_3362: [*c]GLdouble) void {
    return glad_glGetVertexAttribdvNV.?(arg_3360, arg_3361, arg_3362);
}
pub inline fn glGetVertexAttribfv(arg_3363: GLuint, arg_3364: GLenum, arg_3365: [*c]GLfloat) void {
    return glad_glGetVertexAttribfv.?(arg_3363, arg_3364, arg_3365);
}
pub inline fn glGetVertexAttribfvARB(arg_3366: GLuint, arg_3367: GLenum, arg_3368: [*c]GLfloat) void {
    return glad_glGetVertexAttribfvARB.?(arg_3366, arg_3367, arg_3368);
}
pub inline fn glGetVertexAttribfvNV(arg_3369: GLuint, arg_3370: GLenum, arg_3371: [*c]GLfloat) void {
    return glad_glGetVertexAttribfvNV.?(arg_3369, arg_3370, arg_3371);
}
pub inline fn glGetVertexAttribiv(arg_3372: GLuint, arg_3373: GLenum, arg_3374: [*c]GLint) void {
    return glad_glGetVertexAttribiv.?(arg_3372, arg_3373, arg_3374);
}
pub inline fn glGetVertexAttribivARB(arg_3375: GLuint, arg_3376: GLenum, arg_3377: [*c]GLint) void {
    return glad_glGetVertexAttribivARB.?(arg_3375, arg_3376, arg_3377);
}
pub inline fn glGetVertexAttribivNV(arg_3378: GLuint, arg_3379: GLenum, arg_3380: [*c]GLint) void {
    return glad_glGetVertexAttribivNV.?(arg_3378, arg_3379, arg_3380);
}
pub inline fn glGetVideoCaptureStreamdvNV(arg_3381: GLuint, arg_3382: GLuint, arg_3383: GLenum, arg_3384: [*c]GLdouble) void {
    return glad_glGetVideoCaptureStreamdvNV.?(arg_3381, arg_3382, arg_3383, arg_3384);
}
pub inline fn glGetVideoCaptureStreamfvNV(arg_3385: GLuint, arg_3386: GLuint, arg_3387: GLenum, arg_3388: [*c]GLfloat) void {
    return glad_glGetVideoCaptureStreamfvNV.?(arg_3385, arg_3386, arg_3387, arg_3388);
}
pub inline fn glGetVideoCaptureStreamivNV(arg_3389: GLuint, arg_3390: GLuint, arg_3391: GLenum, arg_3392: [*c]GLint) void {
    return glad_glGetVideoCaptureStreamivNV.?(arg_3389, arg_3390, arg_3391, arg_3392);
}
pub inline fn glGetVideoCaptureivNV(arg_3393: GLuint, arg_3394: GLenum, arg_3395: [*c]GLint) void {
    return glad_glGetVideoCaptureivNV.?(arg_3393, arg_3394, arg_3395);
}
pub inline fn glGetVideoi64vNV(arg_3396: GLuint, arg_3397: GLenum, arg_3398: [*c]GLint64EXT) void {
    return glad_glGetVideoi64vNV.?(arg_3396, arg_3397, arg_3398);
}
pub inline fn glGetVideoivNV(arg_3399: GLuint, arg_3400: GLenum, arg_3401: [*c]GLint) void {
    return glad_glGetVideoivNV.?(arg_3399, arg_3400, arg_3401);
}
pub inline fn glGetVideoui64vNV(arg_3402: GLuint, arg_3403: GLenum, arg_3404: [*c]GLuint64EXT) void {
    return glad_glGetVideoui64vNV.?(arg_3402, arg_3403, arg_3404);
}
pub inline fn glGetVideouivNV(arg_3405: GLuint, arg_3406: GLenum, arg_3407: [*c]GLuint) void {
    return glad_glGetVideouivNV.?(arg_3405, arg_3406, arg_3407);
}
pub inline fn glGetVkProcAddrNV(arg_3408: [*c]const GLchar) GLVULKANPROCNV {
    return glad_glGetVkProcAddrNV.?(arg_3408);
}
pub inline fn glGetnCompressedTexImage(arg_3409: GLenum, arg_3410: GLint, arg_3411: GLsizei, arg_3412: ?*anyopaque) void {
    return glad_glGetnCompressedTexImage.?(arg_3409, arg_3410, arg_3411, arg_3412);
}
pub inline fn glGetnCompressedTexImageARB(arg_3413: GLenum, arg_3414: GLint, arg_3415: GLsizei, arg_3416: ?*anyopaque) void {
    return glad_glGetnCompressedTexImageARB.?(arg_3413, arg_3414, arg_3415, arg_3416);
}
pub inline fn glGetnTexImage(arg_3417: GLenum, arg_3418: GLint, arg_3419: GLenum, arg_3420: GLenum, arg_3421: GLsizei, arg_3422: ?*anyopaque) void {
    return glad_glGetnTexImage.?(arg_3417, arg_3418, arg_3419, arg_3420, arg_3421, arg_3422);
}
pub inline fn glGetnTexImageARB(arg_3423: GLenum, arg_3424: GLint, arg_3425: GLenum, arg_3426: GLenum, arg_3427: GLsizei, arg_3428: ?*anyopaque) void {
    return glad_glGetnTexImageARB.?(arg_3423, arg_3424, arg_3425, arg_3426, arg_3427, arg_3428);
}
pub inline fn glGetnUniformdv(arg_3429: GLuint, arg_3430: GLint, arg_3431: GLsizei, arg_3432: [*c]GLdouble) void {
    return glad_glGetnUniformdv.?(arg_3429, arg_3430, arg_3431, arg_3432);
}
pub inline fn glGetnUniformdvARB(arg_3433: GLuint, arg_3434: GLint, arg_3435: GLsizei, arg_3436: [*c]GLdouble) void {
    return glad_glGetnUniformdvARB.?(arg_3433, arg_3434, arg_3435, arg_3436);
}
pub inline fn glGetnUniformfv(arg_3437: GLuint, arg_3438: GLint, arg_3439: GLsizei, arg_3440: [*c]GLfloat) void {
    return glad_glGetnUniformfv.?(arg_3437, arg_3438, arg_3439, arg_3440);
}
pub inline fn glGetnUniformfvARB(arg_3441: GLuint, arg_3442: GLint, arg_3443: GLsizei, arg_3444: [*c]GLfloat) void {
    return glad_glGetnUniformfvARB.?(arg_3441, arg_3442, arg_3443, arg_3444);
}
pub inline fn glGetnUniformi64vARB(arg_3445: GLuint, arg_3446: GLint, arg_3447: GLsizei, arg_3448: [*c]GLint64) void {
    return glad_glGetnUniformi64vARB.?(arg_3445, arg_3446, arg_3447, arg_3448);
}
pub inline fn glGetnUniformiv(arg_3449: GLuint, arg_3450: GLint, arg_3451: GLsizei, arg_3452: [*c]GLint) void {
    return glad_glGetnUniformiv.?(arg_3449, arg_3450, arg_3451, arg_3452);
}
pub inline fn glGetnUniformivARB(arg_3453: GLuint, arg_3454: GLint, arg_3455: GLsizei, arg_3456: [*c]GLint) void {
    return glad_glGetnUniformivARB.?(arg_3453, arg_3454, arg_3455, arg_3456);
}
pub inline fn glGetnUniformui64vARB(arg_3457: GLuint, arg_3458: GLint, arg_3459: GLsizei, arg_3460: [*c]GLuint64) void {
    return glad_glGetnUniformui64vARB.?(arg_3457, arg_3458, arg_3459, arg_3460);
}
pub inline fn glGetnUniformuiv(arg_3461: GLuint, arg_3462: GLint, arg_3463: GLsizei, arg_3464: [*c]GLuint) void {
    return glad_glGetnUniformuiv.?(arg_3461, arg_3462, arg_3463, arg_3464);
}
pub inline fn glGetnUniformuivARB(arg_3465: GLuint, arg_3466: GLint, arg_3467: GLsizei, arg_3468: [*c]GLuint) void {
    return glad_glGetnUniformuivARB.?(arg_3465, arg_3466, arg_3467, arg_3468);
}
pub inline fn glGlobalAlphaFactorbSUN(arg_3469: GLbyte) void {
    return glad_glGlobalAlphaFactorbSUN.?(arg_3469);
}
pub inline fn glGlobalAlphaFactordSUN(arg_3470: GLdouble) void {
    return glad_glGlobalAlphaFactordSUN.?(arg_3470);
}
pub inline fn glGlobalAlphaFactorfSUN(arg_3471: GLfloat) void {
    return glad_glGlobalAlphaFactorfSUN.?(arg_3471);
}
pub inline fn glGlobalAlphaFactoriSUN(arg_3472: GLint) void {
    return glad_glGlobalAlphaFactoriSUN.?(arg_3472);
}
pub inline fn glGlobalAlphaFactorsSUN(arg_3473: GLshort) void {
    return glad_glGlobalAlphaFactorsSUN.?(arg_3473);
}
pub inline fn glGlobalAlphaFactorubSUN(arg_3474: GLubyte) void {
    return glad_glGlobalAlphaFactorubSUN.?(arg_3474);
}
pub inline fn glGlobalAlphaFactoruiSUN(arg_3475: GLuint) void {
    return glad_glGlobalAlphaFactoruiSUN.?(arg_3475);
}
pub inline fn glGlobalAlphaFactorusSUN(arg_3476: GLushort) void {
    return glad_glGlobalAlphaFactorusSUN.?(arg_3476);
}
pub inline fn glHint(arg_3477: GLenum, arg_3478: GLenum) void {
    return glad_glHint.?(arg_3477, arg_3478);
}
pub inline fn glHintPGI(arg_3479: GLenum, arg_3480: GLint) void {
    return glad_glHintPGI.?(arg_3479, arg_3480);
}
pub inline fn glHistogramEXT(arg_3481: GLenum, arg_3482: GLsizei, arg_3483: GLenum, arg_3484: GLboolean) void {
    return glad_glHistogramEXT.?(arg_3481, arg_3482, arg_3483, arg_3484);
}
pub inline fn glIglooInterfaceSGIX(arg_3485: GLenum, arg_3486: ?*const anyopaque) void {
    return glad_glIglooInterfaceSGIX.?(arg_3485, arg_3486);
}
pub inline fn glImageTransformParameterfHP(arg_3487: GLenum, arg_3488: GLenum, arg_3489: GLfloat) void {
    return glad_glImageTransformParameterfHP.?(arg_3487, arg_3488, arg_3489);
}
pub inline fn glImageTransformParameterfvHP(arg_3490: GLenum, arg_3491: GLenum, arg_3492: [*c]const GLfloat) void {
    return glad_glImageTransformParameterfvHP.?(arg_3490, arg_3491, arg_3492);
}
pub inline fn glImageTransformParameteriHP(arg_3493: GLenum, arg_3494: GLenum, arg_3495: GLint) void {
    return glad_glImageTransformParameteriHP.?(arg_3493, arg_3494, arg_3495);
}
pub inline fn glImageTransformParameterivHP(arg_3496: GLenum, arg_3497: GLenum, arg_3498: [*c]const GLint) void {
    return glad_glImageTransformParameterivHP.?(arg_3496, arg_3497, arg_3498);
}
pub inline fn glImportMemoryFdEXT(arg_3499: GLuint, arg_3500: GLuint64, arg_3501: GLenum, arg_3502: GLint) void {
    return glad_glImportMemoryFdEXT.?(arg_3499, arg_3500, arg_3501, arg_3502);
}
pub inline fn glImportMemoryWin32HandleEXT(arg_3503: GLuint, arg_3504: GLuint64, arg_3505: GLenum, arg_3506: ?*anyopaque) void {
    return glad_glImportMemoryWin32HandleEXT.?(arg_3503, arg_3504, arg_3505, arg_3506);
}
pub inline fn glImportMemoryWin32NameEXT(arg_3507: GLuint, arg_3508: GLuint64, arg_3509: GLenum, arg_3510: ?*const anyopaque) void {
    return glad_glImportMemoryWin32NameEXT.?(arg_3507, arg_3508, arg_3509, arg_3510);
}
pub inline fn glImportSemaphoreFdEXT(arg_3511: GLuint, arg_3512: GLenum, arg_3513: GLint) void {
    return glad_glImportSemaphoreFdEXT.?(arg_3511, arg_3512, arg_3513);
}
pub inline fn glImportSemaphoreWin32HandleEXT(arg_3514: GLuint, arg_3515: GLenum, arg_3516: ?*anyopaque) void {
    return glad_glImportSemaphoreWin32HandleEXT.?(arg_3514, arg_3515, arg_3516);
}
pub inline fn glImportSemaphoreWin32NameEXT(arg_3517: GLuint, arg_3518: GLenum, arg_3519: ?*const anyopaque) void {
    return glad_glImportSemaphoreWin32NameEXT.?(arg_3517, arg_3518, arg_3519);
}
pub inline fn glImportSyncEXT(arg_3520: GLenum, arg_3521: GLintptr, arg_3522: GLbitfield) GLsync {
    return glad_glImportSyncEXT.?(arg_3520, arg_3521, arg_3522);
}
pub inline fn glIndexFormatNV(arg_3523: GLenum, arg_3524: GLsizei) void {
    return glad_glIndexFormatNV.?(arg_3523, arg_3524);
}
pub inline fn glIndexFuncEXT(arg_3525: GLenum, arg_3526: GLclampf) void {
    return glad_glIndexFuncEXT.?(arg_3525, arg_3526);
}
pub inline fn glIndexMaterialEXT(arg_3527: GLenum, arg_3528: GLenum) void {
    return glad_glIndexMaterialEXT.?(arg_3527, arg_3528);
}
pub inline fn glIndexPointerEXT(arg_3529: GLenum, arg_3530: GLsizei, arg_3531: GLsizei, arg_3532: ?*const anyopaque) void {
    return glad_glIndexPointerEXT.?(arg_3529, arg_3530, arg_3531, arg_3532);
}
pub inline fn glIndexPointerListIBM(arg_3533: GLenum, arg_3534: GLint, arg_3535: [*c]?*const anyopaque, arg_3536: GLint) void {
    return glad_glIndexPointerListIBM.?(arg_3533, arg_3534, arg_3535, arg_3536);
}
pub inline fn glIndexxOES(arg_3537: GLfixed) void {
    return glad_glIndexxOES.?(arg_3537);
}
pub inline fn glIndexxvOES(arg_3538: [*c]const GLfixed) void {
    return glad_glIndexxvOES.?(arg_3538);
}
pub inline fn glInsertComponentEXT(arg_3539: GLuint, arg_3540: GLuint, arg_3541: GLuint) void {
    return glad_glInsertComponentEXT.?(arg_3539, arg_3540, arg_3541);
}
pub inline fn glInsertEventMarkerEXT(arg_3542: GLsizei, arg_3543: [*c]const GLchar) void {
    return glad_glInsertEventMarkerEXT.?(arg_3542, arg_3543);
}
pub inline fn glInstrumentsBufferSGIX(arg_3544: GLsizei, arg_3545: [*c]GLint) void {
    return glad_glInstrumentsBufferSGIX.?(arg_3544, arg_3545);
}
pub inline fn glInterpolatePathsNV(arg_3546: GLuint, arg_3547: GLuint, arg_3548: GLuint, arg_3549: GLfloat) void {
    return glad_glInterpolatePathsNV.?(arg_3546, arg_3547, arg_3548, arg_3549);
}
pub inline fn glInvalidateBufferData(arg_3550: GLuint) void {
    return glad_glInvalidateBufferData.?(arg_3550);
}
pub inline fn glInvalidateBufferSubData(arg_3551: GLuint, arg_3552: GLintptr, arg_3553: GLsizeiptr) void {
    return glad_glInvalidateBufferSubData.?(arg_3551, arg_3552, arg_3553);
}
pub inline fn glInvalidateFramebuffer(arg_3554: GLenum, arg_3555: GLsizei, arg_3556: [*c]const GLenum) void {
    return glad_glInvalidateFramebuffer.?(arg_3554, arg_3555, arg_3556);
}
pub inline fn glInvalidateNamedFramebufferData(arg_3557: GLuint, arg_3558: GLsizei, arg_3559: [*c]const GLenum) void {
    return glad_glInvalidateNamedFramebufferData.?(arg_3557, arg_3558, arg_3559);
}
pub inline fn glInvalidateNamedFramebufferSubData(arg_3560: GLuint, arg_3561: GLsizei, arg_3562: [*c]const GLenum, arg_3563: GLint, arg_3564: GLint, arg_3565: GLsizei, arg_3566: GLsizei) void {
    return glad_glInvalidateNamedFramebufferSubData.?(arg_3560, arg_3561, arg_3562, arg_3563, arg_3564, arg_3565, arg_3566);
}
pub inline fn glInvalidateSubFramebuffer(arg_3567: GLenum, arg_3568: GLsizei, arg_3569: [*c]const GLenum, arg_3570: GLint, arg_3571: GLint, arg_3572: GLsizei, arg_3573: GLsizei) void {
    return glad_glInvalidateSubFramebuffer.?(arg_3567, arg_3568, arg_3569, arg_3570, arg_3571, arg_3572, arg_3573);
}
pub inline fn glInvalidateTexImage(arg_3574: GLuint, arg_3575: GLint) void {
    return glad_glInvalidateTexImage.?(arg_3574, arg_3575);
}
pub inline fn glInvalidateTexSubImage(arg_3576: GLuint, arg_3577: GLint, arg_3578: GLint, arg_3579: GLint, arg_3580: GLint, arg_3581: GLsizei, arg_3582: GLsizei, arg_3583: GLsizei) void {
    return glad_glInvalidateTexSubImage.?(arg_3576, arg_3577, arg_3578, arg_3579, arg_3580, arg_3581, arg_3582, arg_3583);
}
pub inline fn glIsAsyncMarkerSGIX(arg_3584: GLuint) GLboolean {
    return glad_glIsAsyncMarkerSGIX.?(arg_3584);
}
pub inline fn glIsBuffer(arg_3585: GLuint) GLboolean {
    return glad_glIsBuffer.?(arg_3585);
}
pub inline fn glIsBufferARB(arg_3586: GLuint) GLboolean {
    return glad_glIsBufferARB.?(arg_3586);
}
pub inline fn glIsBufferResidentNV(arg_3587: GLenum) GLboolean {
    return glad_glIsBufferResidentNV.?(arg_3587);
}
pub inline fn glIsCommandListNV(arg_3588: GLuint) GLboolean {
    return glad_glIsCommandListNV.?(arg_3588);
}
pub inline fn glIsEnabled(arg_3589: GLenum) GLboolean {
    return glad_glIsEnabled.?(arg_3589);
}
pub inline fn glIsEnabledIndexedEXT(arg_3590: GLenum, arg_3591: GLuint) GLboolean {
    return glad_glIsEnabledIndexedEXT.?(arg_3590, arg_3591);
}
pub inline fn glIsEnabledi(arg_3592: GLenum, arg_3593: GLuint) GLboolean {
    return glad_glIsEnabledi.?(arg_3592, arg_3593);
}
pub inline fn glIsFenceAPPLE(arg_3594: GLuint) GLboolean {
    return glad_glIsFenceAPPLE.?(arg_3594);
}
pub inline fn glIsFenceNV(arg_3595: GLuint) GLboolean {
    return glad_glIsFenceNV.?(arg_3595);
}
pub inline fn glIsFramebuffer(arg_3596: GLuint) GLboolean {
    return glad_glIsFramebuffer.?(arg_3596);
}
pub inline fn glIsFramebufferEXT(arg_3597: GLuint) GLboolean {
    return glad_glIsFramebufferEXT.?(arg_3597);
}
pub inline fn glIsImageHandleResidentARB(arg_3598: GLuint64) GLboolean {
    return glad_glIsImageHandleResidentARB.?(arg_3598);
}
pub inline fn glIsImageHandleResidentNV(arg_3599: GLuint64) GLboolean {
    return glad_glIsImageHandleResidentNV.?(arg_3599);
}
pub inline fn glIsMemoryObjectEXT(arg_3600: GLuint) GLboolean {
    return glad_glIsMemoryObjectEXT.?(arg_3600);
}
pub inline fn glIsNameAMD(arg_3601: GLenum, arg_3602: GLuint) GLboolean {
    return glad_glIsNameAMD.?(arg_3601, arg_3602);
}
pub inline fn glIsNamedBufferResidentNV(arg_3603: GLuint) GLboolean {
    return glad_glIsNamedBufferResidentNV.?(arg_3603);
}
pub inline fn glIsNamedStringARB(arg_3604: GLint, arg_3605: [*c]const GLchar) GLboolean {
    return glad_glIsNamedStringARB.?(arg_3604, arg_3605);
}
pub inline fn glIsObjectBufferATI(arg_3606: GLuint) GLboolean {
    return glad_glIsObjectBufferATI.?(arg_3606);
}
pub inline fn glIsOcclusionQueryNV(arg_3607: GLuint) GLboolean {
    return glad_glIsOcclusionQueryNV.?(arg_3607);
}
pub inline fn glIsPathNV(arg_3608: GLuint) GLboolean {
    return glad_glIsPathNV.?(arg_3608);
}
pub inline fn glIsPointInFillPathNV(arg_3609: GLuint, arg_3610: GLuint, arg_3611: GLfloat, arg_3612: GLfloat) GLboolean {
    return glad_glIsPointInFillPathNV.?(arg_3609, arg_3610, arg_3611, arg_3612);
}
pub inline fn glIsPointInStrokePathNV(arg_3613: GLuint, arg_3614: GLfloat, arg_3615: GLfloat) GLboolean {
    return glad_glIsPointInStrokePathNV.?(arg_3613, arg_3614, arg_3615);
}
pub inline fn glIsProgram(arg_3616: GLuint) GLboolean {
    return glad_glIsProgram.?(arg_3616);
}
pub inline fn glIsProgramARB(arg_3617: GLuint) GLboolean {
    return glad_glIsProgramARB.?(arg_3617);
}
pub inline fn glIsProgramNV(arg_3618: GLuint) GLboolean {
    return glad_glIsProgramNV.?(arg_3618);
}
pub inline fn glIsProgramPipeline(arg_3619: GLuint) GLboolean {
    return glad_glIsProgramPipeline.?(arg_3619);
}
pub inline fn glIsQuery(arg_3620: GLuint) GLboolean {
    return glad_glIsQuery.?(arg_3620);
}
pub inline fn glIsQueryARB(arg_3621: GLuint) GLboolean {
    return glad_glIsQueryARB.?(arg_3621);
}
pub inline fn glIsRenderbuffer(arg_3622: GLuint) GLboolean {
    return glad_glIsRenderbuffer.?(arg_3622);
}
pub inline fn glIsRenderbufferEXT(arg_3623: GLuint) GLboolean {
    return glad_glIsRenderbufferEXT.?(arg_3623);
}
pub inline fn glIsSampler(arg_3624: GLuint) GLboolean {
    return glad_glIsSampler.?(arg_3624);
}
pub inline fn glIsSemaphoreEXT(arg_3625: GLuint) GLboolean {
    return glad_glIsSemaphoreEXT.?(arg_3625);
}
pub inline fn glIsShader(arg_3626: GLuint) GLboolean {
    return glad_glIsShader.?(arg_3626);
}
pub inline fn glIsStateNV(arg_3627: GLuint) GLboolean {
    return glad_glIsStateNV.?(arg_3627);
}
pub inline fn glIsSync(arg_3628: GLsync) GLboolean {
    return glad_glIsSync.?(arg_3628);
}
pub inline fn glIsTexture(arg_3629: GLuint) GLboolean {
    return glad_glIsTexture.?(arg_3629);
}
pub inline fn glIsTextureEXT(arg_3630: GLuint) GLboolean {
    return glad_glIsTextureEXT.?(arg_3630);
}
pub inline fn glIsTextureHandleResidentARB(arg_3631: GLuint64) GLboolean {
    return glad_glIsTextureHandleResidentARB.?(arg_3631);
}
pub inline fn glIsTextureHandleResidentNV(arg_3632: GLuint64) GLboolean {
    return glad_glIsTextureHandleResidentNV.?(arg_3632);
}
pub inline fn glIsTransformFeedback(arg_3633: GLuint) GLboolean {
    return glad_glIsTransformFeedback.?(arg_3633);
}
pub inline fn glIsTransformFeedbackNV(arg_3634: GLuint) GLboolean {
    return glad_glIsTransformFeedbackNV.?(arg_3634);
}
pub inline fn glIsVariantEnabledEXT(arg_3635: GLuint, arg_3636: GLenum) GLboolean {
    return glad_glIsVariantEnabledEXT.?(arg_3635, arg_3636);
}
pub inline fn glIsVertexArray(arg_3637: GLuint) GLboolean {
    return glad_glIsVertexArray.?(arg_3637);
}
pub inline fn glIsVertexArrayAPPLE(arg_3638: GLuint) GLboolean {
    return glad_glIsVertexArrayAPPLE.?(arg_3638);
}
pub inline fn glIsVertexAttribEnabledAPPLE(arg_3639: GLuint, arg_3640: GLenum) GLboolean {
    return glad_glIsVertexAttribEnabledAPPLE.?(arg_3639, arg_3640);
}
pub inline fn glLGPUCopyImageSubDataNVX(arg_3641: GLuint, arg_3642: GLbitfield, arg_3643: GLuint, arg_3644: GLenum, arg_3645: GLint, arg_3646: GLint, arg_3647: GLint, arg_3648: GLint, arg_3649: GLuint, arg_3650: GLenum, arg_3651: GLint, arg_3652: GLint, arg_3653: GLint, arg_3654: GLint, arg_3655: GLsizei, arg_3656: GLsizei, arg_3657: GLsizei) void {
    return glad_glLGPUCopyImageSubDataNVX.?(arg_3641, arg_3642, arg_3643, arg_3644, arg_3645, arg_3646, arg_3647, arg_3648, arg_3649, arg_3650, arg_3651, arg_3652, arg_3653, arg_3654, arg_3655, arg_3656, arg_3657);
}
pub inline fn glLGPUInterlockNVX() void {
    return glad_glLGPUInterlockNVX.?();
}
pub inline fn glLGPUNamedBufferSubDataNVX(arg_3658: GLbitfield, arg_3659: GLuint, arg_3660: GLintptr, arg_3661: GLsizeiptr, arg_3662: ?*const anyopaque) void {
    return glad_glLGPUNamedBufferSubDataNVX.?(arg_3658, arg_3659, arg_3660, arg_3661, arg_3662);
}
pub inline fn glLabelObjectEXT(arg_3663: GLenum, arg_3664: GLuint, arg_3665: GLsizei, arg_3666: [*c]const GLchar) void {
    return glad_glLabelObjectEXT.?(arg_3663, arg_3664, arg_3665, arg_3666);
}
pub inline fn glLightEnviSGIX(arg_3667: GLenum, arg_3668: GLint) void {
    return glad_glLightEnviSGIX.?(arg_3667, arg_3668);
}
pub inline fn glLightModelxOES(arg_3669: GLenum, arg_3670: GLfixed) void {
    return glad_glLightModelxOES.?(arg_3669, arg_3670);
}
pub inline fn glLightModelxvOES(arg_3671: GLenum, arg_3672: [*c]const GLfixed) void {
    return glad_glLightModelxvOES.?(arg_3671, arg_3672);
}
pub inline fn glLightxOES(arg_3673: GLenum, arg_3674: GLenum, arg_3675: GLfixed) void {
    return glad_glLightxOES.?(arg_3673, arg_3674, arg_3675);
}
pub inline fn glLightxvOES(arg_3676: GLenum, arg_3677: GLenum, arg_3678: [*c]const GLfixed) void {
    return glad_glLightxvOES.?(arg_3676, arg_3677, arg_3678);
}
pub inline fn glLineWidth(arg_3679: GLfloat) void {
    return glad_glLineWidth.?(arg_3679);
}
pub inline fn glLineWidthxOES(arg_3680: GLfixed) void {
    return glad_glLineWidthxOES.?(arg_3680);
}
pub inline fn glLinkProgram(arg_3681: GLuint) void {
    return glad_glLinkProgram.?(arg_3681);
}
pub inline fn glLinkProgramARB(arg_3682: GLhandleARB) void {
    return glad_glLinkProgramARB.?(arg_3682);
}
pub inline fn glListDrawCommandsStatesClientNV(arg_3683: GLuint, arg_3684: GLuint, arg_3685: [*c]?*const anyopaque, arg_3686: [*c]const GLsizei, arg_3687: [*c]const GLuint, arg_3688: [*c]const GLuint, arg_3689: GLuint) void {
    return glad_glListDrawCommandsStatesClientNV.?(arg_3683, arg_3684, arg_3685, arg_3686, arg_3687, arg_3688, arg_3689);
}
pub inline fn glListParameterfSGIX(arg_3690: GLuint, arg_3691: GLenum, arg_3692: GLfloat) void {
    return glad_glListParameterfSGIX.?(arg_3690, arg_3691, arg_3692);
}
pub inline fn glListParameterfvSGIX(arg_3693: GLuint, arg_3694: GLenum, arg_3695: [*c]const GLfloat) void {
    return glad_glListParameterfvSGIX.?(arg_3693, arg_3694, arg_3695);
}
pub inline fn glListParameteriSGIX(arg_3696: GLuint, arg_3697: GLenum, arg_3698: GLint) void {
    return glad_glListParameteriSGIX.?(arg_3696, arg_3697, arg_3698);
}
pub inline fn glListParameterivSGIX(arg_3699: GLuint, arg_3700: GLenum, arg_3701: [*c]const GLint) void {
    return glad_glListParameterivSGIX.?(arg_3699, arg_3700, arg_3701);
}
pub inline fn glLoadIdentityDeformationMapSGIX(arg_3702: GLbitfield) void {
    return glad_glLoadIdentityDeformationMapSGIX.?(arg_3702);
}
pub inline fn glLoadMatrixxOES(arg_3703: [*c]const GLfixed) void {
    return glad_glLoadMatrixxOES.?(arg_3703);
}
pub inline fn glLoadProgramNV(arg_3704: GLenum, arg_3705: GLuint, arg_3706: GLsizei, arg_3707: [*c]const GLubyte) void {
    return glad_glLoadProgramNV.?(arg_3704, arg_3705, arg_3706, arg_3707);
}
pub inline fn glLoadTransposeMatrixdARB(arg_3708: [*c]const GLdouble) void {
    return glad_glLoadTransposeMatrixdARB.?(arg_3708);
}
pub inline fn glLoadTransposeMatrixfARB(arg_3709: [*c]const GLfloat) void {
    return glad_glLoadTransposeMatrixfARB.?(arg_3709);
}
pub inline fn glLoadTransposeMatrixxOES(arg_3710: [*c]const GLfixed) void {
    return glad_glLoadTransposeMatrixxOES.?(arg_3710);
}
pub inline fn glLockArraysEXT(arg_3711: GLint, arg_3712: GLsizei) void {
    return glad_glLockArraysEXT.?(arg_3711, arg_3712);
}
pub inline fn glLogicOp(arg_3713: GLenum) void {
    return glad_glLogicOp.?(arg_3713);
}
pub inline fn glMakeBufferNonResidentNV(arg_3714: GLenum) void {
    return glad_glMakeBufferNonResidentNV.?(arg_3714);
}
pub inline fn glMakeBufferResidentNV(arg_3715: GLenum, arg_3716: GLenum) void {
    return glad_glMakeBufferResidentNV.?(arg_3715, arg_3716);
}
pub inline fn glMakeImageHandleNonResidentARB(arg_3717: GLuint64) void {
    return glad_glMakeImageHandleNonResidentARB.?(arg_3717);
}
pub inline fn glMakeImageHandleNonResidentNV(arg_3718: GLuint64) void {
    return glad_glMakeImageHandleNonResidentNV.?(arg_3718);
}
pub inline fn glMakeImageHandleResidentARB(arg_3719: GLuint64, arg_3720: GLenum) void {
    return glad_glMakeImageHandleResidentARB.?(arg_3719, arg_3720);
}
pub inline fn glMakeImageHandleResidentNV(arg_3721: GLuint64, arg_3722: GLenum) void {
    return glad_glMakeImageHandleResidentNV.?(arg_3721, arg_3722);
}
pub inline fn glMakeNamedBufferNonResidentNV(arg_3723: GLuint) void {
    return glad_glMakeNamedBufferNonResidentNV.?(arg_3723);
}
pub inline fn glMakeNamedBufferResidentNV(arg_3724: GLuint, arg_3725: GLenum) void {
    return glad_glMakeNamedBufferResidentNV.?(arg_3724, arg_3725);
}
pub inline fn glMakeTextureHandleNonResidentARB(arg_3726: GLuint64) void {
    return glad_glMakeTextureHandleNonResidentARB.?(arg_3726);
}
pub inline fn glMakeTextureHandleNonResidentNV(arg_3727: GLuint64) void {
    return glad_glMakeTextureHandleNonResidentNV.?(arg_3727);
}
pub inline fn glMakeTextureHandleResidentARB(arg_3728: GLuint64) void {
    return glad_glMakeTextureHandleResidentARB.?(arg_3728);
}
pub inline fn glMakeTextureHandleResidentNV(arg_3729: GLuint64) void {
    return glad_glMakeTextureHandleResidentNV.?(arg_3729);
}
pub inline fn glMap1xOES(arg_3730: GLenum, arg_3731: GLfixed, arg_3732: GLfixed, arg_3733: GLint, arg_3734: GLint, arg_3735: GLfixed) void {
    return glad_glMap1xOES.?(arg_3730, arg_3731, arg_3732, arg_3733, arg_3734, arg_3735);
}
pub inline fn glMap2xOES(arg_3736: GLenum, arg_3737: GLfixed, arg_3738: GLfixed, arg_3739: GLint, arg_3740: GLint, arg_3741: GLfixed, arg_3742: GLfixed, arg_3743: GLint, arg_3744: GLint, arg_3745: GLfixed) void {
    return glad_glMap2xOES.?(arg_3736, arg_3737, arg_3738, arg_3739, arg_3740, arg_3741, arg_3742, arg_3743, arg_3744, arg_3745);
}
pub inline fn glMapBuffer(arg_3746: GLenum, arg_3747: GLenum) ?*anyopaque {
    return glad_glMapBuffer.?(arg_3746, arg_3747);
}
pub inline fn glMapBufferARB(arg_3748: GLenum, arg_3749: GLenum) ?*anyopaque {
    return glad_glMapBufferARB.?(arg_3748, arg_3749);
}
pub inline fn glMapBufferRange(arg_3750: GLenum, arg_3751: GLintptr, arg_3752: GLsizeiptr, arg_3753: GLbitfield) ?*anyopaque {
    return glad_glMapBufferRange.?(arg_3750, arg_3751, arg_3752, arg_3753);
}
pub inline fn glMapControlPointsNV(arg_3754: GLenum, arg_3755: GLuint, arg_3756: GLenum, arg_3757: GLsizei, arg_3758: GLsizei, arg_3759: GLint, arg_3760: GLint, arg_3761: GLboolean, arg_3762: ?*const anyopaque) void {
    return glad_glMapControlPointsNV.?(arg_3754, arg_3755, arg_3756, arg_3757, arg_3758, arg_3759, arg_3760, arg_3761, arg_3762);
}
pub inline fn glMapGrid1xOES(arg_3763: GLint, arg_3764: GLfixed, arg_3765: GLfixed) void {
    return glad_glMapGrid1xOES.?(arg_3763, arg_3764, arg_3765);
}
pub inline fn glMapGrid2xOES(arg_3766: GLint, arg_3767: GLfixed, arg_3768: GLfixed, arg_3769: GLfixed, arg_3770: GLfixed) void {
    return glad_glMapGrid2xOES.?(arg_3766, arg_3767, arg_3768, arg_3769, arg_3770);
}
pub inline fn glMapNamedBuffer(arg_3771: GLuint, arg_3772: GLenum) ?*anyopaque {
    return glad_glMapNamedBuffer.?(arg_3771, arg_3772);
}
pub inline fn glMapNamedBufferEXT(arg_3773: GLuint, arg_3774: GLenum) ?*anyopaque {
    return glad_glMapNamedBufferEXT.?(arg_3773, arg_3774);
}
pub inline fn glMapNamedBufferRange(arg_3775: GLuint, arg_3776: GLintptr, arg_3777: GLsizeiptr, arg_3778: GLbitfield) ?*anyopaque {
    return glad_glMapNamedBufferRange.?(arg_3775, arg_3776, arg_3777, arg_3778);
}
pub inline fn glMapNamedBufferRangeEXT(arg_3779: GLuint, arg_3780: GLintptr, arg_3781: GLsizeiptr, arg_3782: GLbitfield) ?*anyopaque {
    return glad_glMapNamedBufferRangeEXT.?(arg_3779, arg_3780, arg_3781, arg_3782);
}
pub inline fn glMapObjectBufferATI(arg_3783: GLuint) ?*anyopaque {
    return glad_glMapObjectBufferATI.?(arg_3783);
}
pub inline fn glMapParameterfvNV(arg_3784: GLenum, arg_3785: GLenum, arg_3786: [*c]const GLfloat) void {
    return glad_glMapParameterfvNV.?(arg_3784, arg_3785, arg_3786);
}
pub inline fn glMapParameterivNV(arg_3787: GLenum, arg_3788: GLenum, arg_3789: [*c]const GLint) void {
    return glad_glMapParameterivNV.?(arg_3787, arg_3788, arg_3789);
}
pub inline fn glMapTexture2DINTEL(arg_3790: GLuint, arg_3791: GLint, arg_3792: GLbitfield, arg_3793: [*c]GLint, arg_3794: [*c]GLenum) ?*anyopaque {
    return glad_glMapTexture2DINTEL.?(arg_3790, arg_3791, arg_3792, arg_3793, arg_3794);
}
pub inline fn glMapVertexAttrib1dAPPLE(arg_3795: GLuint, arg_3796: GLuint, arg_3797: GLdouble, arg_3798: GLdouble, arg_3799: GLint, arg_3800: GLint, arg_3801: [*c]const GLdouble) void {
    return glad_glMapVertexAttrib1dAPPLE.?(arg_3795, arg_3796, arg_3797, arg_3798, arg_3799, arg_3800, arg_3801);
}
pub inline fn glMapVertexAttrib1fAPPLE(arg_3802: GLuint, arg_3803: GLuint, arg_3804: GLfloat, arg_3805: GLfloat, arg_3806: GLint, arg_3807: GLint, arg_3808: [*c]const GLfloat) void {
    return glad_glMapVertexAttrib1fAPPLE.?(arg_3802, arg_3803, arg_3804, arg_3805, arg_3806, arg_3807, arg_3808);
}
pub inline fn glMapVertexAttrib2dAPPLE(arg_3809: GLuint, arg_3810: GLuint, arg_3811: GLdouble, arg_3812: GLdouble, arg_3813: GLint, arg_3814: GLint, arg_3815: GLdouble, arg_3816: GLdouble, arg_3817: GLint, arg_3818: GLint, arg_3819: [*c]const GLdouble) void {
    return glad_glMapVertexAttrib2dAPPLE.?(arg_3809, arg_3810, arg_3811, arg_3812, arg_3813, arg_3814, arg_3815, arg_3816, arg_3817, arg_3818, arg_3819);
}
pub inline fn glMapVertexAttrib2fAPPLE(arg_3820: GLuint, arg_3821: GLuint, arg_3822: GLfloat, arg_3823: GLfloat, arg_3824: GLint, arg_3825: GLint, arg_3826: GLfloat, arg_3827: GLfloat, arg_3828: GLint, arg_3829: GLint, arg_3830: [*c]const GLfloat) void {
    return glad_glMapVertexAttrib2fAPPLE.?(arg_3820, arg_3821, arg_3822, arg_3823, arg_3824, arg_3825, arg_3826, arg_3827, arg_3828, arg_3829, arg_3830);
}
pub inline fn glMaterialxOES(arg_3831: GLenum, arg_3832: GLenum, arg_3833: GLfixed) void {
    return glad_glMaterialxOES.?(arg_3831, arg_3832, arg_3833);
}
pub inline fn glMaterialxvOES(arg_3834: GLenum, arg_3835: GLenum, arg_3836: [*c]const GLfixed) void {
    return glad_glMaterialxvOES.?(arg_3834, arg_3835, arg_3836);
}
pub inline fn glMatrixFrustumEXT(arg_3837: GLenum, arg_3838: GLdouble, arg_3839: GLdouble, arg_3840: GLdouble, arg_3841: GLdouble, arg_3842: GLdouble, arg_3843: GLdouble) void {
    return glad_glMatrixFrustumEXT.?(arg_3837, arg_3838, arg_3839, arg_3840, arg_3841, arg_3842, arg_3843);
}
pub inline fn glMatrixIndexPointerARB(arg_3844: GLint, arg_3845: GLenum, arg_3846: GLsizei, arg_3847: ?*const anyopaque) void {
    return glad_glMatrixIndexPointerARB.?(arg_3844, arg_3845, arg_3846, arg_3847);
}
pub inline fn glMatrixIndexubvARB(arg_3848: GLint, arg_3849: [*c]const GLubyte) void {
    return glad_glMatrixIndexubvARB.?(arg_3848, arg_3849);
}
pub inline fn glMatrixIndexuivARB(arg_3850: GLint, arg_3851: [*c]const GLuint) void {
    return glad_glMatrixIndexuivARB.?(arg_3850, arg_3851);
}
pub inline fn glMatrixIndexusvARB(arg_3852: GLint, arg_3853: [*c]const GLushort) void {
    return glad_glMatrixIndexusvARB.?(arg_3852, arg_3853);
}
pub inline fn glMatrixLoad3x2fNV(arg_3854: GLenum, arg_3855: [*c]const GLfloat) void {
    return glad_glMatrixLoad3x2fNV.?(arg_3854, arg_3855);
}
pub inline fn glMatrixLoad3x3fNV(arg_3856: GLenum, arg_3857: [*c]const GLfloat) void {
    return glad_glMatrixLoad3x3fNV.?(arg_3856, arg_3857);
}
pub inline fn glMatrixLoadIdentityEXT(arg_3858: GLenum) void {
    return glad_glMatrixLoadIdentityEXT.?(arg_3858);
}
pub inline fn glMatrixLoadTranspose3x3fNV(arg_3859: GLenum, arg_3860: [*c]const GLfloat) void {
    return glad_glMatrixLoadTranspose3x3fNV.?(arg_3859, arg_3860);
}
pub inline fn glMatrixLoadTransposedEXT(arg_3861: GLenum, arg_3862: [*c]const GLdouble) void {
    return glad_glMatrixLoadTransposedEXT.?(arg_3861, arg_3862);
}
pub inline fn glMatrixLoadTransposefEXT(arg_3863: GLenum, arg_3864: [*c]const GLfloat) void {
    return glad_glMatrixLoadTransposefEXT.?(arg_3863, arg_3864);
}
pub inline fn glMatrixLoaddEXT(arg_3865: GLenum, arg_3866: [*c]const GLdouble) void {
    return glad_glMatrixLoaddEXT.?(arg_3865, arg_3866);
}
pub inline fn glMatrixLoadfEXT(arg_3867: GLenum, arg_3868: [*c]const GLfloat) void {
    return glad_glMatrixLoadfEXT.?(arg_3867, arg_3868);
}
pub inline fn glMatrixMult3x2fNV(arg_3869: GLenum, arg_3870: [*c]const GLfloat) void {
    return glad_glMatrixMult3x2fNV.?(arg_3869, arg_3870);
}
pub inline fn glMatrixMult3x3fNV(arg_3871: GLenum, arg_3872: [*c]const GLfloat) void {
    return glad_glMatrixMult3x3fNV.?(arg_3871, arg_3872);
}
pub inline fn glMatrixMultTranspose3x3fNV(arg_3873: GLenum, arg_3874: [*c]const GLfloat) void {
    return glad_glMatrixMultTranspose3x3fNV.?(arg_3873, arg_3874);
}
pub inline fn glMatrixMultTransposedEXT(arg_3875: GLenum, arg_3876: [*c]const GLdouble) void {
    return glad_glMatrixMultTransposedEXT.?(arg_3875, arg_3876);
}
pub inline fn glMatrixMultTransposefEXT(arg_3877: GLenum, arg_3878: [*c]const GLfloat) void {
    return glad_glMatrixMultTransposefEXT.?(arg_3877, arg_3878);
}
pub inline fn glMatrixMultdEXT(arg_3879: GLenum, arg_3880: [*c]const GLdouble) void {
    return glad_glMatrixMultdEXT.?(arg_3879, arg_3880);
}
pub inline fn glMatrixMultfEXT(arg_3881: GLenum, arg_3882: [*c]const GLfloat) void {
    return glad_glMatrixMultfEXT.?(arg_3881, arg_3882);
}
pub inline fn glMatrixOrthoEXT(arg_3883: GLenum, arg_3884: GLdouble, arg_3885: GLdouble, arg_3886: GLdouble, arg_3887: GLdouble, arg_3888: GLdouble, arg_3889: GLdouble) void {
    return glad_glMatrixOrthoEXT.?(arg_3883, arg_3884, arg_3885, arg_3886, arg_3887, arg_3888, arg_3889);
}
pub inline fn glMatrixPopEXT(arg_3890: GLenum) void {
    return glad_glMatrixPopEXT.?(arg_3890);
}
pub inline fn glMatrixPushEXT(arg_3891: GLenum) void {
    return glad_glMatrixPushEXT.?(arg_3891);
}
pub inline fn glMatrixRotatedEXT(arg_3892: GLenum, arg_3893: GLdouble, arg_3894: GLdouble, arg_3895: GLdouble, arg_3896: GLdouble) void {
    return glad_glMatrixRotatedEXT.?(arg_3892, arg_3893, arg_3894, arg_3895, arg_3896);
}
pub inline fn glMatrixRotatefEXT(arg_3897: GLenum, arg_3898: GLfloat, arg_3899: GLfloat, arg_3900: GLfloat, arg_3901: GLfloat) void {
    return glad_glMatrixRotatefEXT.?(arg_3897, arg_3898, arg_3899, arg_3900, arg_3901);
}
pub inline fn glMatrixScaledEXT(arg_3902: GLenum, arg_3903: GLdouble, arg_3904: GLdouble, arg_3905: GLdouble) void {
    return glad_glMatrixScaledEXT.?(arg_3902, arg_3903, arg_3904, arg_3905);
}
pub inline fn glMatrixScalefEXT(arg_3906: GLenum, arg_3907: GLfloat, arg_3908: GLfloat, arg_3909: GLfloat) void {
    return glad_glMatrixScalefEXT.?(arg_3906, arg_3907, arg_3908, arg_3909);
}
pub inline fn glMatrixTranslatedEXT(arg_3910: GLenum, arg_3911: GLdouble, arg_3912: GLdouble, arg_3913: GLdouble) void {
    return glad_glMatrixTranslatedEXT.?(arg_3910, arg_3911, arg_3912, arg_3913);
}
pub inline fn glMatrixTranslatefEXT(arg_3914: GLenum, arg_3915: GLfloat, arg_3916: GLfloat, arg_3917: GLfloat) void {
    return glad_glMatrixTranslatefEXT.?(arg_3914, arg_3915, arg_3916, arg_3917);
}
pub inline fn glMaxShaderCompilerThreadsARB(arg_3918: GLuint) void {
    return glad_glMaxShaderCompilerThreadsARB.?(arg_3918);
}
pub inline fn glMaxShaderCompilerThreadsKHR(arg_3919: GLuint) void {
    return glad_glMaxShaderCompilerThreadsKHR.?(arg_3919);
}
pub inline fn glMemoryBarrier(arg_3920: GLbitfield) void {
    return glad_glMemoryBarrier.?(arg_3920);
}
pub inline fn glMemoryBarrierByRegion(arg_3921: GLbitfield) void {
    return glad_glMemoryBarrierByRegion.?(arg_3921);
}
pub inline fn glMemoryBarrierEXT(arg_3922: GLbitfield) void {
    return glad_glMemoryBarrierEXT.?(arg_3922);
}
pub inline fn glMemoryObjectParameterivEXT(arg_3923: GLuint, arg_3924: GLenum, arg_3925: [*c]const GLint) void {
    return glad_glMemoryObjectParameterivEXT.?(arg_3923, arg_3924, arg_3925);
}
pub inline fn glMinSampleShading(arg_3926: GLfloat) void {
    return glad_glMinSampleShading.?(arg_3926);
}
pub inline fn glMinSampleShadingARB(arg_3927: GLfloat) void {
    return glad_glMinSampleShadingARB.?(arg_3927);
}
pub inline fn glMinmaxEXT(arg_3928: GLenum, arg_3929: GLenum, arg_3930: GLboolean) void {
    return glad_glMinmaxEXT.?(arg_3928, arg_3929, arg_3930);
}
pub inline fn glMultMatrixxOES(arg_3931: [*c]const GLfixed) void {
    return glad_glMultMatrixxOES.?(arg_3931);
}
pub inline fn glMultTransposeMatrixdARB(arg_3932: [*c]const GLdouble) void {
    return glad_glMultTransposeMatrixdARB.?(arg_3932);
}
pub inline fn glMultTransposeMatrixfARB(arg_3933: [*c]const GLfloat) void {
    return glad_glMultTransposeMatrixfARB.?(arg_3933);
}
pub inline fn glMultTransposeMatrixxOES(arg_3934: [*c]const GLfixed) void {
    return glad_glMultTransposeMatrixxOES.?(arg_3934);
}
pub inline fn glMultiDrawArrays(arg_3935: GLenum, arg_3936: [*c]const GLint, arg_3937: [*c]const GLsizei, arg_3938: GLsizei) void {
    return glad_glMultiDrawArrays.?(arg_3935, arg_3936, arg_3937, arg_3938);
}
pub inline fn glMultiDrawArraysEXT(arg_3939: GLenum, arg_3940: [*c]const GLint, arg_3941: [*c]const GLsizei, arg_3942: GLsizei) void {
    return glad_glMultiDrawArraysEXT.?(arg_3939, arg_3940, arg_3941, arg_3942);
}
pub inline fn glMultiDrawArraysIndirect(arg_3943: GLenum, arg_3944: ?*const anyopaque, arg_3945: GLsizei, arg_3946: GLsizei) void {
    return glad_glMultiDrawArraysIndirect.?(arg_3943, arg_3944, arg_3945, arg_3946);
}
pub inline fn glMultiDrawArraysIndirectAMD(arg_3947: GLenum, arg_3948: ?*const anyopaque, arg_3949: GLsizei, arg_3950: GLsizei) void {
    return glad_glMultiDrawArraysIndirectAMD.?(arg_3947, arg_3948, arg_3949, arg_3950);
}
pub inline fn glMultiDrawArraysIndirectBindlessCountNV(arg_3951: GLenum, arg_3952: ?*const anyopaque, arg_3953: GLsizei, arg_3954: GLsizei, arg_3955: GLsizei, arg_3956: GLint) void {
    return glad_glMultiDrawArraysIndirectBindlessCountNV.?(arg_3951, arg_3952, arg_3953, arg_3954, arg_3955, arg_3956);
}
pub inline fn glMultiDrawArraysIndirectBindlessNV(arg_3957: GLenum, arg_3958: ?*const anyopaque, arg_3959: GLsizei, arg_3960: GLsizei, arg_3961: GLint) void {
    return glad_glMultiDrawArraysIndirectBindlessNV.?(arg_3957, arg_3958, arg_3959, arg_3960, arg_3961);
}
pub inline fn glMultiDrawArraysIndirectCount(arg_3962: GLenum, arg_3963: ?*const anyopaque, arg_3964: GLintptr, arg_3965: GLsizei, arg_3966: GLsizei) void {
    return glad_glMultiDrawArraysIndirectCount.?(arg_3962, arg_3963, arg_3964, arg_3965, arg_3966);
}
pub inline fn glMultiDrawArraysIndirectCountARB(arg_3967: GLenum, arg_3968: ?*const anyopaque, arg_3969: GLintptr, arg_3970: GLsizei, arg_3971: GLsizei) void {
    return glad_glMultiDrawArraysIndirectCountARB.?(arg_3967, arg_3968, arg_3969, arg_3970, arg_3971);
}
pub inline fn glMultiDrawElementArrayAPPLE(arg_3972: GLenum, arg_3973: [*c]const GLint, arg_3974: [*c]const GLsizei, arg_3975: GLsizei) void {
    return glad_glMultiDrawElementArrayAPPLE.?(arg_3972, arg_3973, arg_3974, arg_3975);
}
pub inline fn glMultiDrawElements(arg_3976: GLenum, arg_3977: [*c]const GLsizei, arg_3978: GLenum, arg_3979: [*c]const ?*const anyopaque, arg_3980: GLsizei) void {
    return glad_glMultiDrawElements.?(arg_3976, arg_3977, arg_3978, arg_3979, arg_3980);
}
pub inline fn glMultiDrawElementsBaseVertex(arg_3981: GLenum, arg_3982: [*c]const GLsizei, arg_3983: GLenum, arg_3984: [*c]const ?*const anyopaque, arg_3985: GLsizei, arg_3986: [*c]const GLint) void {
    return glad_glMultiDrawElementsBaseVertex.?(arg_3981, arg_3982, arg_3983, arg_3984, arg_3985, arg_3986);
}
pub inline fn glMultiDrawElementsEXT(arg_3987: GLenum, arg_3988: [*c]const GLsizei, arg_3989: GLenum, arg_3990: [*c]const ?*const anyopaque, arg_3991: GLsizei) void {
    return glad_glMultiDrawElementsEXT.?(arg_3987, arg_3988, arg_3989, arg_3990, arg_3991);
}
pub inline fn glMultiDrawElementsIndirect(arg_3992: GLenum, arg_3993: GLenum, arg_3994: ?*const anyopaque, arg_3995: GLsizei, arg_3996: GLsizei) void {
    return glad_glMultiDrawElementsIndirect.?(arg_3992, arg_3993, arg_3994, arg_3995, arg_3996);
}
pub inline fn glMultiDrawElementsIndirectAMD(arg_3997: GLenum, arg_3998: GLenum, arg_3999: ?*const anyopaque, arg_4000: GLsizei, arg_4001: GLsizei) void {
    return glad_glMultiDrawElementsIndirectAMD.?(arg_3997, arg_3998, arg_3999, arg_4000, arg_4001);
}
pub inline fn glMultiDrawElementsIndirectBindlessCountNV(arg_4002: GLenum, arg_4003: GLenum, arg_4004: ?*const anyopaque, arg_4005: GLsizei, arg_4006: GLsizei, arg_4007: GLsizei, arg_4008: GLint) void {
    return glad_glMultiDrawElementsIndirectBindlessCountNV.?(arg_4002, arg_4003, arg_4004, arg_4005, arg_4006, arg_4007, arg_4008);
}
pub inline fn glMultiDrawElementsIndirectBindlessNV(arg_4009: GLenum, arg_4010: GLenum, arg_4011: ?*const anyopaque, arg_4012: GLsizei, arg_4013: GLsizei, arg_4014: GLint) void {
    return glad_glMultiDrawElementsIndirectBindlessNV.?(arg_4009, arg_4010, arg_4011, arg_4012, arg_4013, arg_4014);
}
pub inline fn glMultiDrawElementsIndirectCount(arg_4015: GLenum, arg_4016: GLenum, arg_4017: ?*const anyopaque, arg_4018: GLintptr, arg_4019: GLsizei, arg_4020: GLsizei) void {
    return glad_glMultiDrawElementsIndirectCount.?(arg_4015, arg_4016, arg_4017, arg_4018, arg_4019, arg_4020);
}
pub inline fn glMultiDrawElementsIndirectCountARB(arg_4021: GLenum, arg_4022: GLenum, arg_4023: ?*const anyopaque, arg_4024: GLintptr, arg_4025: GLsizei, arg_4026: GLsizei) void {
    return glad_glMultiDrawElementsIndirectCountARB.?(arg_4021, arg_4022, arg_4023, arg_4024, arg_4025, arg_4026);
}
pub inline fn glMultiDrawMeshTasksIndirectCountNV(arg_4027: GLintptr, arg_4028: GLintptr, arg_4029: GLsizei, arg_4030: GLsizei) void {
    return glad_glMultiDrawMeshTasksIndirectCountNV.?(arg_4027, arg_4028, arg_4029, arg_4030);
}
pub inline fn glMultiDrawMeshTasksIndirectNV(arg_4031: GLintptr, arg_4032: GLsizei, arg_4033: GLsizei) void {
    return glad_glMultiDrawMeshTasksIndirectNV.?(arg_4031, arg_4032, arg_4033);
}
pub inline fn glMultiDrawRangeElementArrayAPPLE(arg_4034: GLenum, arg_4035: GLuint, arg_4036: GLuint, arg_4037: [*c]const GLint, arg_4038: [*c]const GLsizei, arg_4039: GLsizei) void {
    return glad_glMultiDrawRangeElementArrayAPPLE.?(arg_4034, arg_4035, arg_4036, arg_4037, arg_4038, arg_4039);
}
pub inline fn glMultiModeDrawArraysIBM(arg_4040: [*c]const GLenum, arg_4041: [*c]const GLint, arg_4042: [*c]const GLsizei, arg_4043: GLsizei, arg_4044: GLint) void {
    return glad_glMultiModeDrawArraysIBM.?(arg_4040, arg_4041, arg_4042, arg_4043, arg_4044);
}
pub inline fn glMultiModeDrawElementsIBM(arg_4045: [*c]const GLenum, arg_4046: [*c]const GLsizei, arg_4047: GLenum, arg_4048: [*c]const ?*const anyopaque, arg_4049: GLsizei, arg_4050: GLint) void {
    return glad_glMultiModeDrawElementsIBM.?(arg_4045, arg_4046, arg_4047, arg_4048, arg_4049, arg_4050);
}
pub inline fn glMultiTexBufferEXT(arg_4051: GLenum, arg_4052: GLenum, arg_4053: GLenum, arg_4054: GLuint) void {
    return glad_glMultiTexBufferEXT.?(arg_4051, arg_4052, arg_4053, arg_4054);
}
pub inline fn glMultiTexCoord1bOES(arg_4055: GLenum, arg_4056: GLbyte) void {
    return glad_glMultiTexCoord1bOES.?(arg_4055, arg_4056);
}
pub inline fn glMultiTexCoord1bvOES(arg_4057: GLenum, arg_4058: [*c]const GLbyte) void {
    return glad_glMultiTexCoord1bvOES.?(arg_4057, arg_4058);
}
pub inline fn glMultiTexCoord1dARB(arg_4059: GLenum, arg_4060: GLdouble) void {
    return glad_glMultiTexCoord1dARB.?(arg_4059, arg_4060);
}
pub inline fn glMultiTexCoord1dvARB(arg_4061: GLenum, arg_4062: [*c]const GLdouble) void {
    return glad_glMultiTexCoord1dvARB.?(arg_4061, arg_4062);
}
pub inline fn glMultiTexCoord1fARB(arg_4063: GLenum, arg_4064: GLfloat) void {
    return glad_glMultiTexCoord1fARB.?(arg_4063, arg_4064);
}
pub inline fn glMultiTexCoord1fvARB(arg_4065: GLenum, arg_4066: [*c]const GLfloat) void {
    return glad_glMultiTexCoord1fvARB.?(arg_4065, arg_4066);
}
pub inline fn glMultiTexCoord1hNV(arg_4067: GLenum, arg_4068: GLhalfNV) void {
    return glad_glMultiTexCoord1hNV.?(arg_4067, arg_4068);
}
pub inline fn glMultiTexCoord1hvNV(arg_4069: GLenum, arg_4070: [*c]const GLhalfNV) void {
    return glad_glMultiTexCoord1hvNV.?(arg_4069, arg_4070);
}
pub inline fn glMultiTexCoord1iARB(arg_4071: GLenum, arg_4072: GLint) void {
    return glad_glMultiTexCoord1iARB.?(arg_4071, arg_4072);
}
pub inline fn glMultiTexCoord1ivARB(arg_4073: GLenum, arg_4074: [*c]const GLint) void {
    return glad_glMultiTexCoord1ivARB.?(arg_4073, arg_4074);
}
pub inline fn glMultiTexCoord1sARB(arg_4075: GLenum, arg_4076: GLshort) void {
    return glad_glMultiTexCoord1sARB.?(arg_4075, arg_4076);
}
pub inline fn glMultiTexCoord1svARB(arg_4077: GLenum, arg_4078: [*c]const GLshort) void {
    return glad_glMultiTexCoord1svARB.?(arg_4077, arg_4078);
}
pub inline fn glMultiTexCoord1xOES(arg_4079: GLenum, arg_4080: GLfixed) void {
    return glad_glMultiTexCoord1xOES.?(arg_4079, arg_4080);
}
pub inline fn glMultiTexCoord1xvOES(arg_4081: GLenum, arg_4082: [*c]const GLfixed) void {
    return glad_glMultiTexCoord1xvOES.?(arg_4081, arg_4082);
}
pub inline fn glMultiTexCoord2bOES(arg_4083: GLenum, arg_4084: GLbyte, arg_4085: GLbyte) void {
    return glad_glMultiTexCoord2bOES.?(arg_4083, arg_4084, arg_4085);
}
pub inline fn glMultiTexCoord2bvOES(arg_4086: GLenum, arg_4087: [*c]const GLbyte) void {
    return glad_glMultiTexCoord2bvOES.?(arg_4086, arg_4087);
}
pub inline fn glMultiTexCoord2dARB(arg_4088: GLenum, arg_4089: GLdouble, arg_4090: GLdouble) void {
    return glad_glMultiTexCoord2dARB.?(arg_4088, arg_4089, arg_4090);
}
pub inline fn glMultiTexCoord2dvARB(arg_4091: GLenum, arg_4092: [*c]const GLdouble) void {
    return glad_glMultiTexCoord2dvARB.?(arg_4091, arg_4092);
}
pub inline fn glMultiTexCoord2fARB(arg_4093: GLenum, arg_4094: GLfloat, arg_4095: GLfloat) void {
    return glad_glMultiTexCoord2fARB.?(arg_4093, arg_4094, arg_4095);
}
pub inline fn glMultiTexCoord2fvARB(arg_4096: GLenum, arg_4097: [*c]const GLfloat) void {
    return glad_glMultiTexCoord2fvARB.?(arg_4096, arg_4097);
}
pub inline fn glMultiTexCoord2hNV(arg_4098: GLenum, arg_4099: GLhalfNV, arg_4100: GLhalfNV) void {
    return glad_glMultiTexCoord2hNV.?(arg_4098, arg_4099, arg_4100);
}
pub inline fn glMultiTexCoord2hvNV(arg_4101: GLenum, arg_4102: [*c]const GLhalfNV) void {
    return glad_glMultiTexCoord2hvNV.?(arg_4101, arg_4102);
}
pub inline fn glMultiTexCoord2iARB(arg_4103: GLenum, arg_4104: GLint, arg_4105: GLint) void {
    return glad_glMultiTexCoord2iARB.?(arg_4103, arg_4104, arg_4105);
}
pub inline fn glMultiTexCoord2ivARB(arg_4106: GLenum, arg_4107: [*c]const GLint) void {
    return glad_glMultiTexCoord2ivARB.?(arg_4106, arg_4107);
}
pub inline fn glMultiTexCoord2sARB(arg_4108: GLenum, arg_4109: GLshort, arg_4110: GLshort) void {
    return glad_glMultiTexCoord2sARB.?(arg_4108, arg_4109, arg_4110);
}
pub inline fn glMultiTexCoord2svARB(arg_4111: GLenum, arg_4112: [*c]const GLshort) void {
    return glad_glMultiTexCoord2svARB.?(arg_4111, arg_4112);
}
pub inline fn glMultiTexCoord2xOES(arg_4113: GLenum, arg_4114: GLfixed, arg_4115: GLfixed) void {
    return glad_glMultiTexCoord2xOES.?(arg_4113, arg_4114, arg_4115);
}
pub inline fn glMultiTexCoord2xvOES(arg_4116: GLenum, arg_4117: [*c]const GLfixed) void {
    return glad_glMultiTexCoord2xvOES.?(arg_4116, arg_4117);
}
pub inline fn glMultiTexCoord3bOES(arg_4118: GLenum, arg_4119: GLbyte, arg_4120: GLbyte, arg_4121: GLbyte) void {
    return glad_glMultiTexCoord3bOES.?(arg_4118, arg_4119, arg_4120, arg_4121);
}
pub inline fn glMultiTexCoord3bvOES(arg_4122: GLenum, arg_4123: [*c]const GLbyte) void {
    return glad_glMultiTexCoord3bvOES.?(arg_4122, arg_4123);
}
pub inline fn glMultiTexCoord3dARB(arg_4124: GLenum, arg_4125: GLdouble, arg_4126: GLdouble, arg_4127: GLdouble) void {
    return glad_glMultiTexCoord3dARB.?(arg_4124, arg_4125, arg_4126, arg_4127);
}
pub inline fn glMultiTexCoord3dvARB(arg_4128: GLenum, arg_4129: [*c]const GLdouble) void {
    return glad_glMultiTexCoord3dvARB.?(arg_4128, arg_4129);
}
pub inline fn glMultiTexCoord3fARB(arg_4130: GLenum, arg_4131: GLfloat, arg_4132: GLfloat, arg_4133: GLfloat) void {
    return glad_glMultiTexCoord3fARB.?(arg_4130, arg_4131, arg_4132, arg_4133);
}
pub inline fn glMultiTexCoord3fvARB(arg_4134: GLenum, arg_4135: [*c]const GLfloat) void {
    return glad_glMultiTexCoord3fvARB.?(arg_4134, arg_4135);
}
pub inline fn glMultiTexCoord3hNV(arg_4136: GLenum, arg_4137: GLhalfNV, arg_4138: GLhalfNV, arg_4139: GLhalfNV) void {
    return glad_glMultiTexCoord3hNV.?(arg_4136, arg_4137, arg_4138, arg_4139);
}
pub inline fn glMultiTexCoord3hvNV(arg_4140: GLenum, arg_4141: [*c]const GLhalfNV) void {
    return glad_glMultiTexCoord3hvNV.?(arg_4140, arg_4141);
}
pub inline fn glMultiTexCoord3iARB(arg_4142: GLenum, arg_4143: GLint, arg_4144: GLint, arg_4145: GLint) void {
    return glad_glMultiTexCoord3iARB.?(arg_4142, arg_4143, arg_4144, arg_4145);
}
pub inline fn glMultiTexCoord3ivARB(arg_4146: GLenum, arg_4147: [*c]const GLint) void {
    return glad_glMultiTexCoord3ivARB.?(arg_4146, arg_4147);
}
pub inline fn glMultiTexCoord3sARB(arg_4148: GLenum, arg_4149: GLshort, arg_4150: GLshort, arg_4151: GLshort) void {
    return glad_glMultiTexCoord3sARB.?(arg_4148, arg_4149, arg_4150, arg_4151);
}
pub inline fn glMultiTexCoord3svARB(arg_4152: GLenum, arg_4153: [*c]const GLshort) void {
    return glad_glMultiTexCoord3svARB.?(arg_4152, arg_4153);
}
pub inline fn glMultiTexCoord3xOES(arg_4154: GLenum, arg_4155: GLfixed, arg_4156: GLfixed, arg_4157: GLfixed) void {
    return glad_glMultiTexCoord3xOES.?(arg_4154, arg_4155, arg_4156, arg_4157);
}
pub inline fn glMultiTexCoord3xvOES(arg_4158: GLenum, arg_4159: [*c]const GLfixed) void {
    return glad_glMultiTexCoord3xvOES.?(arg_4158, arg_4159);
}
pub inline fn glMultiTexCoord4bOES(arg_4160: GLenum, arg_4161: GLbyte, arg_4162: GLbyte, arg_4163: GLbyte, arg_4164: GLbyte) void {
    return glad_glMultiTexCoord4bOES.?(arg_4160, arg_4161, arg_4162, arg_4163, arg_4164);
}
pub inline fn glMultiTexCoord4bvOES(arg_4165: GLenum, arg_4166: [*c]const GLbyte) void {
    return glad_glMultiTexCoord4bvOES.?(arg_4165, arg_4166);
}
pub inline fn glMultiTexCoord4dARB(arg_4167: GLenum, arg_4168: GLdouble, arg_4169: GLdouble, arg_4170: GLdouble, arg_4171: GLdouble) void {
    return glad_glMultiTexCoord4dARB.?(arg_4167, arg_4168, arg_4169, arg_4170, arg_4171);
}
pub inline fn glMultiTexCoord4dvARB(arg_4172: GLenum, arg_4173: [*c]const GLdouble) void {
    return glad_glMultiTexCoord4dvARB.?(arg_4172, arg_4173);
}
pub inline fn glMultiTexCoord4fARB(arg_4174: GLenum, arg_4175: GLfloat, arg_4176: GLfloat, arg_4177: GLfloat, arg_4178: GLfloat) void {
    return glad_glMultiTexCoord4fARB.?(arg_4174, arg_4175, arg_4176, arg_4177, arg_4178);
}
pub inline fn glMultiTexCoord4fvARB(arg_4179: GLenum, arg_4180: [*c]const GLfloat) void {
    return glad_glMultiTexCoord4fvARB.?(arg_4179, arg_4180);
}
pub inline fn glMultiTexCoord4hNV(arg_4181: GLenum, arg_4182: GLhalfNV, arg_4183: GLhalfNV, arg_4184: GLhalfNV, arg_4185: GLhalfNV) void {
    return glad_glMultiTexCoord4hNV.?(arg_4181, arg_4182, arg_4183, arg_4184, arg_4185);
}
pub inline fn glMultiTexCoord4hvNV(arg_4186: GLenum, arg_4187: [*c]const GLhalfNV) void {
    return glad_glMultiTexCoord4hvNV.?(arg_4186, arg_4187);
}
pub inline fn glMultiTexCoord4iARB(arg_4188: GLenum, arg_4189: GLint, arg_4190: GLint, arg_4191: GLint, arg_4192: GLint) void {
    return glad_glMultiTexCoord4iARB.?(arg_4188, arg_4189, arg_4190, arg_4191, arg_4192);
}
pub inline fn glMultiTexCoord4ivARB(arg_4193: GLenum, arg_4194: [*c]const GLint) void {
    return glad_glMultiTexCoord4ivARB.?(arg_4193, arg_4194);
}
pub inline fn glMultiTexCoord4sARB(arg_4195: GLenum, arg_4196: GLshort, arg_4197: GLshort, arg_4198: GLshort, arg_4199: GLshort) void {
    return glad_glMultiTexCoord4sARB.?(arg_4195, arg_4196, arg_4197, arg_4198, arg_4199);
}
pub inline fn glMultiTexCoord4svARB(arg_4200: GLenum, arg_4201: [*c]const GLshort) void {
    return glad_glMultiTexCoord4svARB.?(arg_4200, arg_4201);
}
pub inline fn glMultiTexCoord4xOES(arg_4202: GLenum, arg_4203: GLfixed, arg_4204: GLfixed, arg_4205: GLfixed, arg_4206: GLfixed) void {
    return glad_glMultiTexCoord4xOES.?(arg_4202, arg_4203, arg_4204, arg_4205, arg_4206);
}
pub inline fn glMultiTexCoord4xvOES(arg_4207: GLenum, arg_4208: [*c]const GLfixed) void {
    return glad_glMultiTexCoord4xvOES.?(arg_4207, arg_4208);
}
pub inline fn glMultiTexCoordPointerEXT(arg_4209: GLenum, arg_4210: GLint, arg_4211: GLenum, arg_4212: GLsizei, arg_4213: ?*const anyopaque) void {
    return glad_glMultiTexCoordPointerEXT.?(arg_4209, arg_4210, arg_4211, arg_4212, arg_4213);
}
pub inline fn glMultiTexEnvfEXT(arg_4214: GLenum, arg_4215: GLenum, arg_4216: GLenum, arg_4217: GLfloat) void {
    return glad_glMultiTexEnvfEXT.?(arg_4214, arg_4215, arg_4216, arg_4217);
}
pub inline fn glMultiTexEnvfvEXT(arg_4218: GLenum, arg_4219: GLenum, arg_4220: GLenum, arg_4221: [*c]const GLfloat) void {
    return glad_glMultiTexEnvfvEXT.?(arg_4218, arg_4219, arg_4220, arg_4221);
}
pub inline fn glMultiTexEnviEXT(arg_4222: GLenum, arg_4223: GLenum, arg_4224: GLenum, arg_4225: GLint) void {
    return glad_glMultiTexEnviEXT.?(arg_4222, arg_4223, arg_4224, arg_4225);
}
pub inline fn glMultiTexEnvivEXT(arg_4226: GLenum, arg_4227: GLenum, arg_4228: GLenum, arg_4229: [*c]const GLint) void {
    return glad_glMultiTexEnvivEXT.?(arg_4226, arg_4227, arg_4228, arg_4229);
}
pub inline fn glMultiTexGendEXT(arg_4230: GLenum, arg_4231: GLenum, arg_4232: GLenum, arg_4233: GLdouble) void {
    return glad_glMultiTexGendEXT.?(arg_4230, arg_4231, arg_4232, arg_4233);
}
pub inline fn glMultiTexGendvEXT(arg_4234: GLenum, arg_4235: GLenum, arg_4236: GLenum, arg_4237: [*c]const GLdouble) void {
    return glad_glMultiTexGendvEXT.?(arg_4234, arg_4235, arg_4236, arg_4237);
}
pub inline fn glMultiTexGenfEXT(arg_4238: GLenum, arg_4239: GLenum, arg_4240: GLenum, arg_4241: GLfloat) void {
    return glad_glMultiTexGenfEXT.?(arg_4238, arg_4239, arg_4240, arg_4241);
}
pub inline fn glMultiTexGenfvEXT(arg_4242: GLenum, arg_4243: GLenum, arg_4244: GLenum, arg_4245: [*c]const GLfloat) void {
    return glad_glMultiTexGenfvEXT.?(arg_4242, arg_4243, arg_4244, arg_4245);
}
pub inline fn glMultiTexGeniEXT(arg_4246: GLenum, arg_4247: GLenum, arg_4248: GLenum, arg_4249: GLint) void {
    return glad_glMultiTexGeniEXT.?(arg_4246, arg_4247, arg_4248, arg_4249);
}
pub inline fn glMultiTexGenivEXT(arg_4250: GLenum, arg_4251: GLenum, arg_4252: GLenum, arg_4253: [*c]const GLint) void {
    return glad_glMultiTexGenivEXT.?(arg_4250, arg_4251, arg_4252, arg_4253);
}
pub inline fn glMultiTexImage1DEXT(arg_4254: GLenum, arg_4255: GLenum, arg_4256: GLint, arg_4257: GLint, arg_4258: GLsizei, arg_4259: GLint, arg_4260: GLenum, arg_4261: GLenum, arg_4262: ?*const anyopaque) void {
    return glad_glMultiTexImage1DEXT.?(arg_4254, arg_4255, arg_4256, arg_4257, arg_4258, arg_4259, arg_4260, arg_4261, arg_4262);
}
pub inline fn glMultiTexImage2DEXT(arg_4263: GLenum, arg_4264: GLenum, arg_4265: GLint, arg_4266: GLint, arg_4267: GLsizei, arg_4268: GLsizei, arg_4269: GLint, arg_4270: GLenum, arg_4271: GLenum, arg_4272: ?*const anyopaque) void {
    return glad_glMultiTexImage2DEXT.?(arg_4263, arg_4264, arg_4265, arg_4266, arg_4267, arg_4268, arg_4269, arg_4270, arg_4271, arg_4272);
}
pub inline fn glMultiTexImage3DEXT(arg_4273: GLenum, arg_4274: GLenum, arg_4275: GLint, arg_4276: GLint, arg_4277: GLsizei, arg_4278: GLsizei, arg_4279: GLsizei, arg_4280: GLint, arg_4281: GLenum, arg_4282: GLenum, arg_4283: ?*const anyopaque) void {
    return glad_glMultiTexImage3DEXT.?(arg_4273, arg_4274, arg_4275, arg_4276, arg_4277, arg_4278, arg_4279, arg_4280, arg_4281, arg_4282, arg_4283);
}
pub inline fn glMultiTexParameterIivEXT(arg_4284: GLenum, arg_4285: GLenum, arg_4286: GLenum, arg_4287: [*c]const GLint) void {
    return glad_glMultiTexParameterIivEXT.?(arg_4284, arg_4285, arg_4286, arg_4287);
}
pub inline fn glMultiTexParameterIuivEXT(arg_4288: GLenum, arg_4289: GLenum, arg_4290: GLenum, arg_4291: [*c]const GLuint) void {
    return glad_glMultiTexParameterIuivEXT.?(arg_4288, arg_4289, arg_4290, arg_4291);
}
pub inline fn glMultiTexParameterfEXT(arg_4292: GLenum, arg_4293: GLenum, arg_4294: GLenum, arg_4295: GLfloat) void {
    return glad_glMultiTexParameterfEXT.?(arg_4292, arg_4293, arg_4294, arg_4295);
}
pub inline fn glMultiTexParameterfvEXT(arg_4296: GLenum, arg_4297: GLenum, arg_4298: GLenum, arg_4299: [*c]const GLfloat) void {
    return glad_glMultiTexParameterfvEXT.?(arg_4296, arg_4297, arg_4298, arg_4299);
}
pub inline fn glMultiTexParameteriEXT(arg_4300: GLenum, arg_4301: GLenum, arg_4302: GLenum, arg_4303: GLint) void {
    return glad_glMultiTexParameteriEXT.?(arg_4300, arg_4301, arg_4302, arg_4303);
}
pub inline fn glMultiTexParameterivEXT(arg_4304: GLenum, arg_4305: GLenum, arg_4306: GLenum, arg_4307: [*c]const GLint) void {
    return glad_glMultiTexParameterivEXT.?(arg_4304, arg_4305, arg_4306, arg_4307);
}
pub inline fn glMultiTexRenderbufferEXT(arg_4308: GLenum, arg_4309: GLenum, arg_4310: GLuint) void {
    return glad_glMultiTexRenderbufferEXT.?(arg_4308, arg_4309, arg_4310);
}
pub inline fn glMultiTexSubImage1DEXT(arg_4311: GLenum, arg_4312: GLenum, arg_4313: GLint, arg_4314: GLint, arg_4315: GLsizei, arg_4316: GLenum, arg_4317: GLenum, arg_4318: ?*const anyopaque) void {
    return glad_glMultiTexSubImage1DEXT.?(arg_4311, arg_4312, arg_4313, arg_4314, arg_4315, arg_4316, arg_4317, arg_4318);
}
pub inline fn glMultiTexSubImage2DEXT(arg_4319: GLenum, arg_4320: GLenum, arg_4321: GLint, arg_4322: GLint, arg_4323: GLint, arg_4324: GLsizei, arg_4325: GLsizei, arg_4326: GLenum, arg_4327: GLenum, arg_4328: ?*const anyopaque) void {
    return glad_glMultiTexSubImage2DEXT.?(arg_4319, arg_4320, arg_4321, arg_4322, arg_4323, arg_4324, arg_4325, arg_4326, arg_4327, arg_4328);
}
pub inline fn glMultiTexSubImage3DEXT(arg_4329: GLenum, arg_4330: GLenum, arg_4331: GLint, arg_4332: GLint, arg_4333: GLint, arg_4334: GLint, arg_4335: GLsizei, arg_4336: GLsizei, arg_4337: GLsizei, arg_4338: GLenum, arg_4339: GLenum, arg_4340: ?*const anyopaque) void {
    return glad_glMultiTexSubImage3DEXT.?(arg_4329, arg_4330, arg_4331, arg_4332, arg_4333, arg_4334, arg_4335, arg_4336, arg_4337, arg_4338, arg_4339, arg_4340);
}
pub inline fn glMulticastBarrierNV() void {
    return glad_glMulticastBarrierNV.?();
}
pub inline fn glMulticastBlitFramebufferNV(arg_4341: GLuint, arg_4342: GLuint, arg_4343: GLint, arg_4344: GLint, arg_4345: GLint, arg_4346: GLint, arg_4347: GLint, arg_4348: GLint, arg_4349: GLint, arg_4350: GLint, arg_4351: GLbitfield, arg_4352: GLenum) void {
    return glad_glMulticastBlitFramebufferNV.?(arg_4341, arg_4342, arg_4343, arg_4344, arg_4345, arg_4346, arg_4347, arg_4348, arg_4349, arg_4350, arg_4351, arg_4352);
}
pub inline fn glMulticastBufferSubDataNV(arg_4353: GLbitfield, arg_4354: GLuint, arg_4355: GLintptr, arg_4356: GLsizeiptr, arg_4357: ?*const anyopaque) void {
    return glad_glMulticastBufferSubDataNV.?(arg_4353, arg_4354, arg_4355, arg_4356, arg_4357);
}
pub inline fn glMulticastCopyBufferSubDataNV(arg_4358: GLuint, arg_4359: GLbitfield, arg_4360: GLuint, arg_4361: GLuint, arg_4362: GLintptr, arg_4363: GLintptr, arg_4364: GLsizeiptr) void {
    return glad_glMulticastCopyBufferSubDataNV.?(arg_4358, arg_4359, arg_4360, arg_4361, arg_4362, arg_4363, arg_4364);
}
pub inline fn glMulticastCopyImageSubDataNV(arg_4365: GLuint, arg_4366: GLbitfield, arg_4367: GLuint, arg_4368: GLenum, arg_4369: GLint, arg_4370: GLint, arg_4371: GLint, arg_4372: GLint, arg_4373: GLuint, arg_4374: GLenum, arg_4375: GLint, arg_4376: GLint, arg_4377: GLint, arg_4378: GLint, arg_4379: GLsizei, arg_4380: GLsizei, arg_4381: GLsizei) void {
    return glad_glMulticastCopyImageSubDataNV.?(arg_4365, arg_4366, arg_4367, arg_4368, arg_4369, arg_4370, arg_4371, arg_4372, arg_4373, arg_4374, arg_4375, arg_4376, arg_4377, arg_4378, arg_4379, arg_4380, arg_4381);
}
pub inline fn glMulticastFramebufferSampleLocationsfvNV(arg_4382: GLuint, arg_4383: GLuint, arg_4384: GLuint, arg_4385: GLsizei, arg_4386: [*c]const GLfloat) void {
    return glad_glMulticastFramebufferSampleLocationsfvNV.?(arg_4382, arg_4383, arg_4384, arg_4385, arg_4386);
}
pub inline fn glMulticastGetQueryObjecti64vNV(arg_4387: GLuint, arg_4388: GLuint, arg_4389: GLenum, arg_4390: [*c]GLint64) void {
    return glad_glMulticastGetQueryObjecti64vNV.?(arg_4387, arg_4388, arg_4389, arg_4390);
}
pub inline fn glMulticastGetQueryObjectivNV(arg_4391: GLuint, arg_4392: GLuint, arg_4393: GLenum, arg_4394: [*c]GLint) void {
    return glad_glMulticastGetQueryObjectivNV.?(arg_4391, arg_4392, arg_4393, arg_4394);
}
pub inline fn glMulticastGetQueryObjectui64vNV(arg_4395: GLuint, arg_4396: GLuint, arg_4397: GLenum, arg_4398: [*c]GLuint64) void {
    return glad_glMulticastGetQueryObjectui64vNV.?(arg_4395, arg_4396, arg_4397, arg_4398);
}
pub inline fn glMulticastGetQueryObjectuivNV(arg_4399: GLuint, arg_4400: GLuint, arg_4401: GLenum, arg_4402: [*c]GLuint) void {
    return glad_glMulticastGetQueryObjectuivNV.?(arg_4399, arg_4400, arg_4401, arg_4402);
}
pub inline fn glMulticastScissorArrayvNVX(arg_4403: GLuint, arg_4404: GLuint, arg_4405: GLsizei, arg_4406: [*c]const GLint) void {
    return glad_glMulticastScissorArrayvNVX.?(arg_4403, arg_4404, arg_4405, arg_4406);
}
pub inline fn glMulticastViewportArrayvNVX(arg_4407: GLuint, arg_4408: GLuint, arg_4409: GLsizei, arg_4410: [*c]const GLfloat) void {
    return glad_glMulticastViewportArrayvNVX.?(arg_4407, arg_4408, arg_4409, arg_4410);
}
pub inline fn glMulticastViewportPositionWScaleNVX(arg_4411: GLuint, arg_4412: GLuint, arg_4413: GLfloat, arg_4414: GLfloat) void {
    return glad_glMulticastViewportPositionWScaleNVX.?(arg_4411, arg_4412, arg_4413, arg_4414);
}
pub inline fn glMulticastWaitSyncNV(arg_4415: GLuint, arg_4416: GLbitfield) void {
    return glad_glMulticastWaitSyncNV.?(arg_4415, arg_4416);
}
pub inline fn glNamedBufferAttachMemoryNV(arg_4417: GLuint, arg_4418: GLuint, arg_4419: GLuint64) void {
    return glad_glNamedBufferAttachMemoryNV.?(arg_4417, arg_4418, arg_4419);
}
pub inline fn glNamedBufferData(arg_4420: GLuint, arg_4421: GLsizeiptr, arg_4422: ?*const anyopaque, arg_4423: GLenum) void {
    return glad_glNamedBufferData.?(arg_4420, arg_4421, arg_4422, arg_4423);
}
pub inline fn glNamedBufferDataEXT(arg_4424: GLuint, arg_4425: GLsizeiptr, arg_4426: ?*const anyopaque, arg_4427: GLenum) void {
    return glad_glNamedBufferDataEXT.?(arg_4424, arg_4425, arg_4426, arg_4427);
}
pub inline fn glNamedBufferPageCommitmentARB(arg_4428: GLuint, arg_4429: GLintptr, arg_4430: GLsizeiptr, arg_4431: GLboolean) void {
    return glad_glNamedBufferPageCommitmentARB.?(arg_4428, arg_4429, arg_4430, arg_4431);
}
pub inline fn glNamedBufferPageCommitmentEXT(arg_4432: GLuint, arg_4433: GLintptr, arg_4434: GLsizeiptr, arg_4435: GLboolean) void {
    return glad_glNamedBufferPageCommitmentEXT.?(arg_4432, arg_4433, arg_4434, arg_4435);
}
pub inline fn glNamedBufferPageCommitmentMemNV(arg_4436: GLuint, arg_4437: GLintptr, arg_4438: GLsizeiptr, arg_4439: GLuint, arg_4440: GLuint64, arg_4441: GLboolean) void {
    return glad_glNamedBufferPageCommitmentMemNV.?(arg_4436, arg_4437, arg_4438, arg_4439, arg_4440, arg_4441);
}
pub inline fn glNamedBufferStorage(arg_4442: GLuint, arg_4443: GLsizeiptr, arg_4444: ?*const anyopaque, arg_4445: GLbitfield) void {
    return glad_glNamedBufferStorage.?(arg_4442, arg_4443, arg_4444, arg_4445);
}
pub inline fn glNamedBufferStorageEXT(arg_4446: GLuint, arg_4447: GLsizeiptr, arg_4448: ?*const anyopaque, arg_4449: GLbitfield) void {
    return glad_glNamedBufferStorageEXT.?(arg_4446, arg_4447, arg_4448, arg_4449);
}
pub inline fn glNamedBufferStorageExternalEXT(arg_4450: GLuint, arg_4451: GLintptr, arg_4452: GLsizeiptr, arg_4453: GLeglClientBufferEXT, arg_4454: GLbitfield) void {
    return glad_glNamedBufferStorageExternalEXT.?(arg_4450, arg_4451, arg_4452, arg_4453, arg_4454);
}
pub inline fn glNamedBufferStorageMemEXT(arg_4455: GLuint, arg_4456: GLsizeiptr, arg_4457: GLuint, arg_4458: GLuint64) void {
    return glad_glNamedBufferStorageMemEXT.?(arg_4455, arg_4456, arg_4457, arg_4458);
}
pub inline fn glNamedBufferSubData(arg_4459: GLuint, arg_4460: GLintptr, arg_4461: GLsizeiptr, arg_4462: ?*const anyopaque) void {
    return glad_glNamedBufferSubData.?(arg_4459, arg_4460, arg_4461, arg_4462);
}
pub inline fn glNamedBufferSubDataEXT(arg_4463: GLuint, arg_4464: GLintptr, arg_4465: GLsizeiptr, arg_4466: ?*const anyopaque) void {
    return glad_glNamedBufferSubDataEXT.?(arg_4463, arg_4464, arg_4465, arg_4466);
}
pub inline fn glNamedCopyBufferSubDataEXT(arg_4467: GLuint, arg_4468: GLuint, arg_4469: GLintptr, arg_4470: GLintptr, arg_4471: GLsizeiptr) void {
    return glad_glNamedCopyBufferSubDataEXT.?(arg_4467, arg_4468, arg_4469, arg_4470, arg_4471);
}
pub inline fn glNamedFramebufferDrawBuffer(arg_4472: GLuint, arg_4473: GLenum) void {
    return glad_glNamedFramebufferDrawBuffer.?(arg_4472, arg_4473);
}
pub inline fn glNamedFramebufferDrawBuffers(arg_4474: GLuint, arg_4475: GLsizei, arg_4476: [*c]const GLenum) void {
    return glad_glNamedFramebufferDrawBuffers.?(arg_4474, arg_4475, arg_4476);
}
pub inline fn glNamedFramebufferParameteri(arg_4477: GLuint, arg_4478: GLenum, arg_4479: GLint) void {
    return glad_glNamedFramebufferParameteri.?(arg_4477, arg_4478, arg_4479);
}
pub inline fn glNamedFramebufferParameteriEXT(arg_4480: GLuint, arg_4481: GLenum, arg_4482: GLint) void {
    return glad_glNamedFramebufferParameteriEXT.?(arg_4480, arg_4481, arg_4482);
}
pub inline fn glNamedFramebufferReadBuffer(arg_4483: GLuint, arg_4484: GLenum) void {
    return glad_glNamedFramebufferReadBuffer.?(arg_4483, arg_4484);
}
pub inline fn glNamedFramebufferRenderbuffer(arg_4485: GLuint, arg_4486: GLenum, arg_4487: GLenum, arg_4488: GLuint) void {
    return glad_glNamedFramebufferRenderbuffer.?(arg_4485, arg_4486, arg_4487, arg_4488);
}
pub inline fn glNamedFramebufferRenderbufferEXT(arg_4489: GLuint, arg_4490: GLenum, arg_4491: GLenum, arg_4492: GLuint) void {
    return glad_glNamedFramebufferRenderbufferEXT.?(arg_4489, arg_4490, arg_4491, arg_4492);
}
pub inline fn glNamedFramebufferSampleLocationsfvARB(arg_4493: GLuint, arg_4494: GLuint, arg_4495: GLsizei, arg_4496: [*c]const GLfloat) void {
    return glad_glNamedFramebufferSampleLocationsfvARB.?(arg_4493, arg_4494, arg_4495, arg_4496);
}
pub inline fn glNamedFramebufferSampleLocationsfvNV(arg_4497: GLuint, arg_4498: GLuint, arg_4499: GLsizei, arg_4500: [*c]const GLfloat) void {
    return glad_glNamedFramebufferSampleLocationsfvNV.?(arg_4497, arg_4498, arg_4499, arg_4500);
}
pub inline fn glNamedFramebufferSamplePositionsfvAMD(arg_4501: GLuint, arg_4502: GLuint, arg_4503: GLuint, arg_4504: [*c]const GLfloat) void {
    return glad_glNamedFramebufferSamplePositionsfvAMD.?(arg_4501, arg_4502, arg_4503, arg_4504);
}
pub inline fn glNamedFramebufferTexture(arg_4505: GLuint, arg_4506: GLenum, arg_4507: GLuint, arg_4508: GLint) void {
    return glad_glNamedFramebufferTexture.?(arg_4505, arg_4506, arg_4507, arg_4508);
}
pub inline fn glNamedFramebufferTexture1DEXT(arg_4509: GLuint, arg_4510: GLenum, arg_4511: GLenum, arg_4512: GLuint, arg_4513: GLint) void {
    return glad_glNamedFramebufferTexture1DEXT.?(arg_4509, arg_4510, arg_4511, arg_4512, arg_4513);
}
pub inline fn glNamedFramebufferTexture2DEXT(arg_4514: GLuint, arg_4515: GLenum, arg_4516: GLenum, arg_4517: GLuint, arg_4518: GLint) void {
    return glad_glNamedFramebufferTexture2DEXT.?(arg_4514, arg_4515, arg_4516, arg_4517, arg_4518);
}
pub inline fn glNamedFramebufferTexture3DEXT(arg_4519: GLuint, arg_4520: GLenum, arg_4521: GLenum, arg_4522: GLuint, arg_4523: GLint, arg_4524: GLint) void {
    return glad_glNamedFramebufferTexture3DEXT.?(arg_4519, arg_4520, arg_4521, arg_4522, arg_4523, arg_4524);
}
pub inline fn glNamedFramebufferTextureEXT(arg_4525: GLuint, arg_4526: GLenum, arg_4527: GLuint, arg_4528: GLint) void {
    return glad_glNamedFramebufferTextureEXT.?(arg_4525, arg_4526, arg_4527, arg_4528);
}
pub inline fn glNamedFramebufferTextureFaceEXT(arg_4529: GLuint, arg_4530: GLenum, arg_4531: GLuint, arg_4532: GLint, arg_4533: GLenum) void {
    return glad_glNamedFramebufferTextureFaceEXT.?(arg_4529, arg_4530, arg_4531, arg_4532, arg_4533);
}
pub inline fn glNamedFramebufferTextureLayer(arg_4534: GLuint, arg_4535: GLenum, arg_4536: GLuint, arg_4537: GLint, arg_4538: GLint) void {
    return glad_glNamedFramebufferTextureLayer.?(arg_4534, arg_4535, arg_4536, arg_4537, arg_4538);
}
pub inline fn glNamedFramebufferTextureLayerEXT(arg_4539: GLuint, arg_4540: GLenum, arg_4541: GLuint, arg_4542: GLint, arg_4543: GLint) void {
    return glad_glNamedFramebufferTextureLayerEXT.?(arg_4539, arg_4540, arg_4541, arg_4542, arg_4543);
}
pub inline fn glNamedProgramLocalParameter4dEXT(arg_4544: GLuint, arg_4545: GLenum, arg_4546: GLuint, arg_4547: GLdouble, arg_4548: GLdouble, arg_4549: GLdouble, arg_4550: GLdouble) void {
    return glad_glNamedProgramLocalParameter4dEXT.?(arg_4544, arg_4545, arg_4546, arg_4547, arg_4548, arg_4549, arg_4550);
}
pub inline fn glNamedProgramLocalParameter4dvEXT(arg_4551: GLuint, arg_4552: GLenum, arg_4553: GLuint, arg_4554: [*c]const GLdouble) void {
    return glad_glNamedProgramLocalParameter4dvEXT.?(arg_4551, arg_4552, arg_4553, arg_4554);
}
pub inline fn glNamedProgramLocalParameter4fEXT(arg_4555: GLuint, arg_4556: GLenum, arg_4557: GLuint, arg_4558: GLfloat, arg_4559: GLfloat, arg_4560: GLfloat, arg_4561: GLfloat) void {
    return glad_glNamedProgramLocalParameter4fEXT.?(arg_4555, arg_4556, arg_4557, arg_4558, arg_4559, arg_4560, arg_4561);
}
pub inline fn glNamedProgramLocalParameter4fvEXT(arg_4562: GLuint, arg_4563: GLenum, arg_4564: GLuint, arg_4565: [*c]const GLfloat) void {
    return glad_glNamedProgramLocalParameter4fvEXT.?(arg_4562, arg_4563, arg_4564, arg_4565);
}
pub inline fn glNamedProgramLocalParameterI4iEXT(arg_4566: GLuint, arg_4567: GLenum, arg_4568: GLuint, arg_4569: GLint, arg_4570: GLint, arg_4571: GLint, arg_4572: GLint) void {
    return glad_glNamedProgramLocalParameterI4iEXT.?(arg_4566, arg_4567, arg_4568, arg_4569, arg_4570, arg_4571, arg_4572);
}
pub inline fn glNamedProgramLocalParameterI4ivEXT(arg_4573: GLuint, arg_4574: GLenum, arg_4575: GLuint, arg_4576: [*c]const GLint) void {
    return glad_glNamedProgramLocalParameterI4ivEXT.?(arg_4573, arg_4574, arg_4575, arg_4576);
}
pub inline fn glNamedProgramLocalParameterI4uiEXT(arg_4577: GLuint, arg_4578: GLenum, arg_4579: GLuint, arg_4580: GLuint, arg_4581: GLuint, arg_4582: GLuint, arg_4583: GLuint) void {
    return glad_glNamedProgramLocalParameterI4uiEXT.?(arg_4577, arg_4578, arg_4579, arg_4580, arg_4581, arg_4582, arg_4583);
}
pub inline fn glNamedProgramLocalParameterI4uivEXT(arg_4584: GLuint, arg_4585: GLenum, arg_4586: GLuint, arg_4587: [*c]const GLuint) void {
    return glad_glNamedProgramLocalParameterI4uivEXT.?(arg_4584, arg_4585, arg_4586, arg_4587);
}
pub inline fn glNamedProgramLocalParameters4fvEXT(arg_4588: GLuint, arg_4589: GLenum, arg_4590: GLuint, arg_4591: GLsizei, arg_4592: [*c]const GLfloat) void {
    return glad_glNamedProgramLocalParameters4fvEXT.?(arg_4588, arg_4589, arg_4590, arg_4591, arg_4592);
}
pub inline fn glNamedProgramLocalParametersI4ivEXT(arg_4593: GLuint, arg_4594: GLenum, arg_4595: GLuint, arg_4596: GLsizei, arg_4597: [*c]const GLint) void {
    return glad_glNamedProgramLocalParametersI4ivEXT.?(arg_4593, arg_4594, arg_4595, arg_4596, arg_4597);
}
pub inline fn glNamedProgramLocalParametersI4uivEXT(arg_4598: GLuint, arg_4599: GLenum, arg_4600: GLuint, arg_4601: GLsizei, arg_4602: [*c]const GLuint) void {
    return glad_glNamedProgramLocalParametersI4uivEXT.?(arg_4598, arg_4599, arg_4600, arg_4601, arg_4602);
}
pub inline fn glNamedProgramStringEXT(arg_4603: GLuint, arg_4604: GLenum, arg_4605: GLenum, arg_4606: GLsizei, arg_4607: ?*const anyopaque) void {
    return glad_glNamedProgramStringEXT.?(arg_4603, arg_4604, arg_4605, arg_4606, arg_4607);
}
pub inline fn glNamedRenderbufferStorage(arg_4608: GLuint, arg_4609: GLenum, arg_4610: GLsizei, arg_4611: GLsizei) void {
    return glad_glNamedRenderbufferStorage.?(arg_4608, arg_4609, arg_4610, arg_4611);
}
pub inline fn glNamedRenderbufferStorageEXT(arg_4612: GLuint, arg_4613: GLenum, arg_4614: GLsizei, arg_4615: GLsizei) void {
    return glad_glNamedRenderbufferStorageEXT.?(arg_4612, arg_4613, arg_4614, arg_4615);
}
pub inline fn glNamedRenderbufferStorageMultisample(arg_4616: GLuint, arg_4617: GLsizei, arg_4618: GLenum, arg_4619: GLsizei, arg_4620: GLsizei) void {
    return glad_glNamedRenderbufferStorageMultisample.?(arg_4616, arg_4617, arg_4618, arg_4619, arg_4620);
}
pub inline fn glNamedRenderbufferStorageMultisampleAdvancedAMD(arg_4621: GLuint, arg_4622: GLsizei, arg_4623: GLsizei, arg_4624: GLenum, arg_4625: GLsizei, arg_4626: GLsizei) void {
    return glad_glNamedRenderbufferStorageMultisampleAdvancedAMD.?(arg_4621, arg_4622, arg_4623, arg_4624, arg_4625, arg_4626);
}
pub inline fn glNamedRenderbufferStorageMultisampleCoverageEXT(arg_4627: GLuint, arg_4628: GLsizei, arg_4629: GLsizei, arg_4630: GLenum, arg_4631: GLsizei, arg_4632: GLsizei) void {
    return glad_glNamedRenderbufferStorageMultisampleCoverageEXT.?(arg_4627, arg_4628, arg_4629, arg_4630, arg_4631, arg_4632);
}
pub inline fn glNamedRenderbufferStorageMultisampleEXT(arg_4633: GLuint, arg_4634: GLsizei, arg_4635: GLenum, arg_4636: GLsizei, arg_4637: GLsizei) void {
    return glad_glNamedRenderbufferStorageMultisampleEXT.?(arg_4633, arg_4634, arg_4635, arg_4636, arg_4637);
}
pub inline fn glNamedStringARB(arg_4638: GLenum, arg_4639: GLint, arg_4640: [*c]const GLchar, arg_4641: GLint, arg_4642: [*c]const GLchar) void {
    return glad_glNamedStringARB.?(arg_4638, arg_4639, arg_4640, arg_4641, arg_4642);
}
pub inline fn glNewObjectBufferATI(arg_4643: GLsizei, arg_4644: ?*const anyopaque, arg_4645: GLenum) GLuint {
    return glad_glNewObjectBufferATI.?(arg_4643, arg_4644, arg_4645);
}
pub inline fn glNormal3fVertex3fSUN(arg_4646: GLfloat, arg_4647: GLfloat, arg_4648: GLfloat, arg_4649: GLfloat, arg_4650: GLfloat, arg_4651: GLfloat) void {
    return glad_glNormal3fVertex3fSUN.?(arg_4646, arg_4647, arg_4648, arg_4649, arg_4650, arg_4651);
}
pub inline fn glNormal3fVertex3fvSUN(arg_4652: [*c]const GLfloat, arg_4653: [*c]const GLfloat) void {
    return glad_glNormal3fVertex3fvSUN.?(arg_4652, arg_4653);
}
pub inline fn glNormal3hNV(arg_4654: GLhalfNV, arg_4655: GLhalfNV, arg_4656: GLhalfNV) void {
    return glad_glNormal3hNV.?(arg_4654, arg_4655, arg_4656);
}
pub inline fn glNormal3hvNV(arg_4657: [*c]const GLhalfNV) void {
    return glad_glNormal3hvNV.?(arg_4657);
}
pub inline fn glNormal3xOES(arg_4658: GLfixed, arg_4659: GLfixed, arg_4660: GLfixed) void {
    return glad_glNormal3xOES.?(arg_4658, arg_4659, arg_4660);
}
pub inline fn glNormal3xvOES(arg_4661: [*c]const GLfixed) void {
    return glad_glNormal3xvOES.?(arg_4661);
}
pub inline fn glNormalFormatNV(arg_4662: GLenum, arg_4663: GLsizei) void {
    return glad_glNormalFormatNV.?(arg_4662, arg_4663);
}
pub inline fn glNormalPointerEXT(arg_4664: GLenum, arg_4665: GLsizei, arg_4666: GLsizei, arg_4667: ?*const anyopaque) void {
    return glad_glNormalPointerEXT.?(arg_4664, arg_4665, arg_4666, arg_4667);
}
pub inline fn glNormalPointerListIBM(arg_4668: GLenum, arg_4669: GLint, arg_4670: [*c]?*const anyopaque, arg_4671: GLint) void {
    return glad_glNormalPointerListIBM.?(arg_4668, arg_4669, arg_4670, arg_4671);
}
pub inline fn glNormalPointervINTEL(arg_4672: GLenum, arg_4673: [*c]?*const anyopaque) void {
    return glad_glNormalPointervINTEL.?(arg_4672, arg_4673);
}
pub inline fn glNormalStream3bATI(arg_4674: GLenum, arg_4675: GLbyte, arg_4676: GLbyte, arg_4677: GLbyte) void {
    return glad_glNormalStream3bATI.?(arg_4674, arg_4675, arg_4676, arg_4677);
}
pub inline fn glNormalStream3bvATI(arg_4678: GLenum, arg_4679: [*c]const GLbyte) void {
    return glad_glNormalStream3bvATI.?(arg_4678, arg_4679);
}
pub inline fn glNormalStream3dATI(arg_4680: GLenum, arg_4681: GLdouble, arg_4682: GLdouble, arg_4683: GLdouble) void {
    return glad_glNormalStream3dATI.?(arg_4680, arg_4681, arg_4682, arg_4683);
}
pub inline fn glNormalStream3dvATI(arg_4684: GLenum, arg_4685: [*c]const GLdouble) void {
    return glad_glNormalStream3dvATI.?(arg_4684, arg_4685);
}
pub inline fn glNormalStream3fATI(arg_4686: GLenum, arg_4687: GLfloat, arg_4688: GLfloat, arg_4689: GLfloat) void {
    return glad_glNormalStream3fATI.?(arg_4686, arg_4687, arg_4688, arg_4689);
}
pub inline fn glNormalStream3fvATI(arg_4690: GLenum, arg_4691: [*c]const GLfloat) void {
    return glad_glNormalStream3fvATI.?(arg_4690, arg_4691);
}
pub inline fn glNormalStream3iATI(arg_4692: GLenum, arg_4693: GLint, arg_4694: GLint, arg_4695: GLint) void {
    return glad_glNormalStream3iATI.?(arg_4692, arg_4693, arg_4694, arg_4695);
}
pub inline fn glNormalStream3ivATI(arg_4696: GLenum, arg_4697: [*c]const GLint) void {
    return glad_glNormalStream3ivATI.?(arg_4696, arg_4697);
}
pub inline fn glNormalStream3sATI(arg_4698: GLenum, arg_4699: GLshort, arg_4700: GLshort, arg_4701: GLshort) void {
    return glad_glNormalStream3sATI.?(arg_4698, arg_4699, arg_4700, arg_4701);
}
pub inline fn glNormalStream3svATI(arg_4702: GLenum, arg_4703: [*c]const GLshort) void {
    return glad_glNormalStream3svATI.?(arg_4702, arg_4703);
}
pub inline fn glObjectLabel(arg_4704: GLenum, arg_4705: GLuint, arg_4706: GLsizei, arg_4707: [*c]const GLchar) void {
    return glad_glObjectLabel.?(arg_4704, arg_4705, arg_4706, arg_4707);
}
pub inline fn glObjectPtrLabel(arg_4708: ?*const anyopaque, arg_4709: GLsizei, arg_4710: [*c]const GLchar) void {
    return glad_glObjectPtrLabel.?(arg_4708, arg_4709, arg_4710);
}
pub inline fn glObjectPurgeableAPPLE(arg_4711: GLenum, arg_4712: GLuint, arg_4713: GLenum) GLenum {
    return glad_glObjectPurgeableAPPLE.?(arg_4711, arg_4712, arg_4713);
}
pub inline fn glObjectUnpurgeableAPPLE(arg_4714: GLenum, arg_4715: GLuint, arg_4716: GLenum) GLenum {
    return glad_glObjectUnpurgeableAPPLE.?(arg_4714, arg_4715, arg_4716);
}
pub inline fn glOrthofOES(arg_4717: GLfloat, arg_4718: GLfloat, arg_4719: GLfloat, arg_4720: GLfloat, arg_4721: GLfloat, arg_4722: GLfloat) void {
    return glad_glOrthofOES.?(arg_4717, arg_4718, arg_4719, arg_4720, arg_4721, arg_4722);
}
pub inline fn glOrthoxOES(arg_4723: GLfixed, arg_4724: GLfixed, arg_4725: GLfixed, arg_4726: GLfixed, arg_4727: GLfixed, arg_4728: GLfixed) void {
    return glad_glOrthoxOES.?(arg_4723, arg_4724, arg_4725, arg_4726, arg_4727, arg_4728);
}
pub inline fn glPNTrianglesfATI(arg_4729: GLenum, arg_4730: GLfloat) void {
    return glad_glPNTrianglesfATI.?(arg_4729, arg_4730);
}
pub inline fn glPNTrianglesiATI(arg_4731: GLenum, arg_4732: GLint) void {
    return glad_glPNTrianglesiATI.?(arg_4731, arg_4732);
}
pub inline fn glPassTexCoordATI(arg_4733: GLuint, arg_4734: GLuint, arg_4735: GLenum) void {
    return glad_glPassTexCoordATI.?(arg_4733, arg_4734, arg_4735);
}
pub inline fn glPassThroughxOES(arg_4736: GLfixed) void {
    return glad_glPassThroughxOES.?(arg_4736);
}
pub inline fn glPatchParameterfv(arg_4737: GLenum, arg_4738: [*c]const GLfloat) void {
    return glad_glPatchParameterfv.?(arg_4737, arg_4738);
}
pub inline fn glPatchParameteri(arg_4739: GLenum, arg_4740: GLint) void {
    return glad_glPatchParameteri.?(arg_4739, arg_4740);
}
pub inline fn glPathCommandsNV(arg_4741: GLuint, arg_4742: GLsizei, arg_4743: [*c]const GLubyte, arg_4744: GLsizei, arg_4745: GLenum, arg_4746: ?*const anyopaque) void {
    return glad_glPathCommandsNV.?(arg_4741, arg_4742, arg_4743, arg_4744, arg_4745, arg_4746);
}
pub inline fn glPathCoordsNV(arg_4747: GLuint, arg_4748: GLsizei, arg_4749: GLenum, arg_4750: ?*const anyopaque) void {
    return glad_glPathCoordsNV.?(arg_4747, arg_4748, arg_4749, arg_4750);
}
pub inline fn glPathCoverDepthFuncNV(arg_4751: GLenum) void {
    return glad_glPathCoverDepthFuncNV.?(arg_4751);
}
pub inline fn glPathDashArrayNV(arg_4752: GLuint, arg_4753: GLsizei, arg_4754: [*c]const GLfloat) void {
    return glad_glPathDashArrayNV.?(arg_4752, arg_4753, arg_4754);
}
pub inline fn glPathGlyphIndexArrayNV(arg_4755: GLuint, arg_4756: GLenum, arg_4757: ?*const anyopaque, arg_4758: GLbitfield, arg_4759: GLuint, arg_4760: GLsizei, arg_4761: GLuint, arg_4762: GLfloat) GLenum {
    return glad_glPathGlyphIndexArrayNV.?(arg_4755, arg_4756, arg_4757, arg_4758, arg_4759, arg_4760, arg_4761, arg_4762);
}
pub inline fn glPathGlyphIndexRangeNV(arg_4763: GLenum, arg_4764: ?*const anyopaque, arg_4765: GLbitfield, arg_4766: GLuint, arg_4767: GLfloat, arg_4768: [*c]GLuint) GLenum {
    return glad_glPathGlyphIndexRangeNV.?(arg_4763, arg_4764, arg_4765, arg_4766, arg_4767, arg_4768);
}
pub inline fn glPathGlyphRangeNV(arg_4769: GLuint, arg_4770: GLenum, arg_4771: ?*const anyopaque, arg_4772: GLbitfield, arg_4773: GLuint, arg_4774: GLsizei, arg_4775: GLenum, arg_4776: GLuint, arg_4777: GLfloat) void {
    return glad_glPathGlyphRangeNV.?(arg_4769, arg_4770, arg_4771, arg_4772, arg_4773, arg_4774, arg_4775, arg_4776, arg_4777);
}
pub inline fn glPathGlyphsNV(arg_4778: GLuint, arg_4779: GLenum, arg_4780: ?*const anyopaque, arg_4781: GLbitfield, arg_4782: GLsizei, arg_4783: GLenum, arg_4784: ?*const anyopaque, arg_4785: GLenum, arg_4786: GLuint, arg_4787: GLfloat) void {
    return glad_glPathGlyphsNV.?(arg_4778, arg_4779, arg_4780, arg_4781, arg_4782, arg_4783, arg_4784, arg_4785, arg_4786, arg_4787);
}
pub inline fn glPathMemoryGlyphIndexArrayNV(arg_4788: GLuint, arg_4789: GLenum, arg_4790: GLsizeiptr, arg_4791: ?*const anyopaque, arg_4792: GLsizei, arg_4793: GLuint, arg_4794: GLsizei, arg_4795: GLuint, arg_4796: GLfloat) GLenum {
    return glad_glPathMemoryGlyphIndexArrayNV.?(arg_4788, arg_4789, arg_4790, arg_4791, arg_4792, arg_4793, arg_4794, arg_4795, arg_4796);
}
pub inline fn glPathParameterfNV(arg_4797: GLuint, arg_4798: GLenum, arg_4799: GLfloat) void {
    return glad_glPathParameterfNV.?(arg_4797, arg_4798, arg_4799);
}
pub inline fn glPathParameterfvNV(arg_4800: GLuint, arg_4801: GLenum, arg_4802: [*c]const GLfloat) void {
    return glad_glPathParameterfvNV.?(arg_4800, arg_4801, arg_4802);
}
pub inline fn glPathParameteriNV(arg_4803: GLuint, arg_4804: GLenum, arg_4805: GLint) void {
    return glad_glPathParameteriNV.?(arg_4803, arg_4804, arg_4805);
}
pub inline fn glPathParameterivNV(arg_4806: GLuint, arg_4807: GLenum, arg_4808: [*c]const GLint) void {
    return glad_glPathParameterivNV.?(arg_4806, arg_4807, arg_4808);
}
pub inline fn glPathStencilDepthOffsetNV(arg_4809: GLfloat, arg_4810: GLfloat) void {
    return glad_glPathStencilDepthOffsetNV.?(arg_4809, arg_4810);
}
pub inline fn glPathStencilFuncNV(arg_4811: GLenum, arg_4812: GLint, arg_4813: GLuint) void {
    return glad_glPathStencilFuncNV.?(arg_4811, arg_4812, arg_4813);
}
pub inline fn glPathStringNV(arg_4814: GLuint, arg_4815: GLenum, arg_4816: GLsizei, arg_4817: ?*const anyopaque) void {
    return glad_glPathStringNV.?(arg_4814, arg_4815, arg_4816, arg_4817);
}
pub inline fn glPathSubCommandsNV(arg_4818: GLuint, arg_4819: GLsizei, arg_4820: GLsizei, arg_4821: GLsizei, arg_4822: [*c]const GLubyte, arg_4823: GLsizei, arg_4824: GLenum, arg_4825: ?*const anyopaque) void {
    return glad_glPathSubCommandsNV.?(arg_4818, arg_4819, arg_4820, arg_4821, arg_4822, arg_4823, arg_4824, arg_4825);
}
pub inline fn glPathSubCoordsNV(arg_4826: GLuint, arg_4827: GLsizei, arg_4828: GLsizei, arg_4829: GLenum, arg_4830: ?*const anyopaque) void {
    return glad_glPathSubCoordsNV.?(arg_4826, arg_4827, arg_4828, arg_4829, arg_4830);
}
pub inline fn glPauseTransformFeedback() void {
    return glad_glPauseTransformFeedback.?();
}
pub inline fn glPauseTransformFeedbackNV() void {
    return glad_glPauseTransformFeedbackNV.?();
}
pub inline fn glPixelDataRangeNV(arg_4831: GLenum, arg_4832: GLsizei, arg_4833: ?*const anyopaque) void {
    return glad_glPixelDataRangeNV.?(arg_4831, arg_4832, arg_4833);
}
pub inline fn glPixelMapx(arg_4834: GLenum, arg_4835: GLint, arg_4836: [*c]const GLfixed) void {
    return glad_glPixelMapx.?(arg_4834, arg_4835, arg_4836);
}
pub inline fn glPixelStoref(arg_4837: GLenum, arg_4838: GLfloat) void {
    return glad_glPixelStoref.?(arg_4837, arg_4838);
}
pub inline fn glPixelStorei(arg_4839: GLenum, arg_4840: GLint) void {
    return glad_glPixelStorei.?(arg_4839, arg_4840);
}
pub inline fn glPixelStorex(arg_4841: GLenum, arg_4842: GLfixed) void {
    return glad_glPixelStorex.?(arg_4841, arg_4842);
}
pub inline fn glPixelTexGenParameterfSGIS(arg_4843: GLenum, arg_4844: GLfloat) void {
    return glad_glPixelTexGenParameterfSGIS.?(arg_4843, arg_4844);
}
pub inline fn glPixelTexGenParameterfvSGIS(arg_4845: GLenum, arg_4846: [*c]const GLfloat) void {
    return glad_glPixelTexGenParameterfvSGIS.?(arg_4845, arg_4846);
}
pub inline fn glPixelTexGenParameteriSGIS(arg_4847: GLenum, arg_4848: GLint) void {
    return glad_glPixelTexGenParameteriSGIS.?(arg_4847, arg_4848);
}
pub inline fn glPixelTexGenParameterivSGIS(arg_4849: GLenum, arg_4850: [*c]const GLint) void {
    return glad_glPixelTexGenParameterivSGIS.?(arg_4849, arg_4850);
}
pub inline fn glPixelTexGenSGIX(arg_4851: GLenum) void {
    return glad_glPixelTexGenSGIX.?(arg_4851);
}
pub inline fn glPixelTransferxOES(arg_4852: GLenum, arg_4853: GLfixed) void {
    return glad_glPixelTransferxOES.?(arg_4852, arg_4853);
}
pub inline fn glPixelTransformParameterfEXT(arg_4854: GLenum, arg_4855: GLenum, arg_4856: GLfloat) void {
    return glad_glPixelTransformParameterfEXT.?(arg_4854, arg_4855, arg_4856);
}
pub inline fn glPixelTransformParameterfvEXT(arg_4857: GLenum, arg_4858: GLenum, arg_4859: [*c]const GLfloat) void {
    return glad_glPixelTransformParameterfvEXT.?(arg_4857, arg_4858, arg_4859);
}
pub inline fn glPixelTransformParameteriEXT(arg_4860: GLenum, arg_4861: GLenum, arg_4862: GLint) void {
    return glad_glPixelTransformParameteriEXT.?(arg_4860, arg_4861, arg_4862);
}
pub inline fn glPixelTransformParameterivEXT(arg_4863: GLenum, arg_4864: GLenum, arg_4865: [*c]const GLint) void {
    return glad_glPixelTransformParameterivEXT.?(arg_4863, arg_4864, arg_4865);
}
pub inline fn glPixelZoomxOES(arg_4866: GLfixed, arg_4867: GLfixed) void {
    return glad_glPixelZoomxOES.?(arg_4866, arg_4867);
}
pub inline fn glPointAlongPathNV(arg_4868: GLuint, arg_4869: GLsizei, arg_4870: GLsizei, arg_4871: GLfloat, arg_4872: [*c]GLfloat, arg_4873: [*c]GLfloat, arg_4874: [*c]GLfloat, arg_4875: [*c]GLfloat) GLboolean {
    return glad_glPointAlongPathNV.?(arg_4868, arg_4869, arg_4870, arg_4871, arg_4872, arg_4873, arg_4874, arg_4875);
}
pub inline fn glPointParameterf(arg_4876: GLenum, arg_4877: GLfloat) void {
    return glad_glPointParameterf.?(arg_4876, arg_4877);
}
pub inline fn glPointParameterfARB(arg_4878: GLenum, arg_4879: GLfloat) void {
    return glad_glPointParameterfARB.?(arg_4878, arg_4879);
}
pub inline fn glPointParameterfEXT(arg_4880: GLenum, arg_4881: GLfloat) void {
    return glad_glPointParameterfEXT.?(arg_4880, arg_4881);
}
pub inline fn glPointParameterfSGIS(arg_4882: GLenum, arg_4883: GLfloat) void {
    return glad_glPointParameterfSGIS.?(arg_4882, arg_4883);
}
pub inline fn glPointParameterfv(arg_4884: GLenum, arg_4885: [*c]const GLfloat) void {
    return glad_glPointParameterfv.?(arg_4884, arg_4885);
}
pub inline fn glPointParameterfvARB(arg_4886: GLenum, arg_4887: [*c]const GLfloat) void {
    return glad_glPointParameterfvARB.?(arg_4886, arg_4887);
}
pub inline fn glPointParameterfvEXT(arg_4888: GLenum, arg_4889: [*c]const GLfloat) void {
    return glad_glPointParameterfvEXT.?(arg_4888, arg_4889);
}
pub inline fn glPointParameterfvSGIS(arg_4890: GLenum, arg_4891: [*c]const GLfloat) void {
    return glad_glPointParameterfvSGIS.?(arg_4890, arg_4891);
}
pub inline fn glPointParameteri(arg_4892: GLenum, arg_4893: GLint) void {
    return glad_glPointParameteri.?(arg_4892, arg_4893);
}
pub inline fn glPointParameteriNV(arg_4894: GLenum, arg_4895: GLint) void {
    return glad_glPointParameteriNV.?(arg_4894, arg_4895);
}
pub inline fn glPointParameteriv(arg_4896: GLenum, arg_4897: [*c]const GLint) void {
    return glad_glPointParameteriv.?(arg_4896, arg_4897);
}
pub inline fn glPointParameterivNV(arg_4898: GLenum, arg_4899: [*c]const GLint) void {
    return glad_glPointParameterivNV.?(arg_4898, arg_4899);
}
pub inline fn glPointParameterxvOES(arg_4900: GLenum, arg_4901: [*c]const GLfixed) void {
    return glad_glPointParameterxvOES.?(arg_4900, arg_4901);
}
pub inline fn glPointSize(arg_4902: GLfloat) void {
    return glad_glPointSize.?(arg_4902);
}
pub inline fn glPointSizexOES(arg_4903: GLfixed) void {
    return glad_glPointSizexOES.?(arg_4903);
}
pub inline fn glPollAsyncSGIX(arg_4904: [*c]GLuint) GLint {
    return glad_glPollAsyncSGIX.?(arg_4904);
}
pub inline fn glPollInstrumentsSGIX(arg_4905: [*c]GLint) GLint {
    return glad_glPollInstrumentsSGIX.?(arg_4905);
}
pub inline fn glPolygonMode(arg_4906: GLenum, arg_4907: GLenum) void {
    return glad_glPolygonMode.?(arg_4906, arg_4907);
}
pub inline fn glPolygonOffset(arg_4908: GLfloat, arg_4909: GLfloat) void {
    return glad_glPolygonOffset.?(arg_4908, arg_4909);
}
pub inline fn glPolygonOffsetClamp(arg_4910: GLfloat, arg_4911: GLfloat, arg_4912: GLfloat) void {
    return glad_glPolygonOffsetClamp.?(arg_4910, arg_4911, arg_4912);
}
pub inline fn glPolygonOffsetClampEXT(arg_4913: GLfloat, arg_4914: GLfloat, arg_4915: GLfloat) void {
    return glad_glPolygonOffsetClampEXT.?(arg_4913, arg_4914, arg_4915);
}
pub inline fn glPolygonOffsetEXT(arg_4916: GLfloat, arg_4917: GLfloat) void {
    return glad_glPolygonOffsetEXT.?(arg_4916, arg_4917);
}
pub inline fn glPolygonOffsetxOES(arg_4918: GLfixed, arg_4919: GLfixed) void {
    return glad_glPolygonOffsetxOES.?(arg_4918, arg_4919);
}
pub inline fn glPopDebugGroup() void {
    return glad_glPopDebugGroup.?();
}
pub inline fn glPopGroupMarkerEXT() void {
    return glad_glPopGroupMarkerEXT.?();
}
pub inline fn glPresentFrameDualFillNV(arg_4920: GLuint, arg_4921: GLuint64EXT, arg_4922: GLuint, arg_4923: GLuint, arg_4924: GLenum, arg_4925: GLenum, arg_4926: GLuint, arg_4927: GLenum, arg_4928: GLuint, arg_4929: GLenum, arg_4930: GLuint, arg_4931: GLenum, arg_4932: GLuint) void {
    return glad_glPresentFrameDualFillNV.?(arg_4920, arg_4921, arg_4922, arg_4923, arg_4924, arg_4925, arg_4926, arg_4927, arg_4928, arg_4929, arg_4930, arg_4931, arg_4932);
}
pub inline fn glPresentFrameKeyedNV(arg_4933: GLuint, arg_4934: GLuint64EXT, arg_4935: GLuint, arg_4936: GLuint, arg_4937: GLenum, arg_4938: GLenum, arg_4939: GLuint, arg_4940: GLuint, arg_4941: GLenum, arg_4942: GLuint, arg_4943: GLuint) void {
    return glad_glPresentFrameKeyedNV.?(arg_4933, arg_4934, arg_4935, arg_4936, arg_4937, arg_4938, arg_4939, arg_4940, arg_4941, arg_4942, arg_4943);
}
pub inline fn glPrimitiveBoundingBoxARB(arg_4944: GLfloat, arg_4945: GLfloat, arg_4946: GLfloat, arg_4947: GLfloat, arg_4948: GLfloat, arg_4949: GLfloat, arg_4950: GLfloat, arg_4951: GLfloat) void {
    return glad_glPrimitiveBoundingBoxARB.?(arg_4944, arg_4945, arg_4946, arg_4947, arg_4948, arg_4949, arg_4950, arg_4951);
}
pub inline fn glPrimitiveRestartIndex(arg_4952: GLuint) void {
    return glad_glPrimitiveRestartIndex.?(arg_4952);
}
pub inline fn glPrimitiveRestartIndexNV(arg_4953: GLuint) void {
    return glad_glPrimitiveRestartIndexNV.?(arg_4953);
}
pub inline fn glPrimitiveRestartNV() void {
    return glad_glPrimitiveRestartNV.?();
}
pub inline fn glPrioritizeTexturesEXT(arg_4954: GLsizei, arg_4955: [*c]const GLuint, arg_4956: [*c]const GLclampf) void {
    return glad_glPrioritizeTexturesEXT.?(arg_4954, arg_4955, arg_4956);
}
pub inline fn glPrioritizeTexturesxOES(arg_4957: GLsizei, arg_4958: [*c]const GLuint, arg_4959: [*c]const GLfixed) void {
    return glad_glPrioritizeTexturesxOES.?(arg_4957, arg_4958, arg_4959);
}
pub inline fn glProgramBinary(arg_4960: GLuint, arg_4961: GLenum, arg_4962: ?*const anyopaque, arg_4963: GLsizei) void {
    return glad_glProgramBinary.?(arg_4960, arg_4961, arg_4962, arg_4963);
}
pub inline fn glProgramBufferParametersIivNV(arg_4964: GLenum, arg_4965: GLuint, arg_4966: GLuint, arg_4967: GLsizei, arg_4968: [*c]const GLint) void {
    return glad_glProgramBufferParametersIivNV.?(arg_4964, arg_4965, arg_4966, arg_4967, arg_4968);
}
pub inline fn glProgramBufferParametersIuivNV(arg_4969: GLenum, arg_4970: GLuint, arg_4971: GLuint, arg_4972: GLsizei, arg_4973: [*c]const GLuint) void {
    return glad_glProgramBufferParametersIuivNV.?(arg_4969, arg_4970, arg_4971, arg_4972, arg_4973);
}
pub inline fn glProgramBufferParametersfvNV(arg_4974: GLenum, arg_4975: GLuint, arg_4976: GLuint, arg_4977: GLsizei, arg_4978: [*c]const GLfloat) void {
    return glad_glProgramBufferParametersfvNV.?(arg_4974, arg_4975, arg_4976, arg_4977, arg_4978);
}
pub inline fn glProgramEnvParameter4dARB(arg_4979: GLenum, arg_4980: GLuint, arg_4981: GLdouble, arg_4982: GLdouble, arg_4983: GLdouble, arg_4984: GLdouble) void {
    return glad_glProgramEnvParameter4dARB.?(arg_4979, arg_4980, arg_4981, arg_4982, arg_4983, arg_4984);
}
pub inline fn glProgramEnvParameter4dvARB(arg_4985: GLenum, arg_4986: GLuint, arg_4987: [*c]const GLdouble) void {
    return glad_glProgramEnvParameter4dvARB.?(arg_4985, arg_4986, arg_4987);
}
pub inline fn glProgramEnvParameter4fARB(arg_4988: GLenum, arg_4989: GLuint, arg_4990: GLfloat, arg_4991: GLfloat, arg_4992: GLfloat, arg_4993: GLfloat) void {
    return glad_glProgramEnvParameter4fARB.?(arg_4988, arg_4989, arg_4990, arg_4991, arg_4992, arg_4993);
}
pub inline fn glProgramEnvParameter4fvARB(arg_4994: GLenum, arg_4995: GLuint, arg_4996: [*c]const GLfloat) void {
    return glad_glProgramEnvParameter4fvARB.?(arg_4994, arg_4995, arg_4996);
}
pub inline fn glProgramEnvParameterI4iNV(arg_4997: GLenum, arg_4998: GLuint, arg_4999: GLint, arg_5000: GLint, arg_5001: GLint, arg_5002: GLint) void {
    return glad_glProgramEnvParameterI4iNV.?(arg_4997, arg_4998, arg_4999, arg_5000, arg_5001, arg_5002);
}
pub inline fn glProgramEnvParameterI4ivNV(arg_5003: GLenum, arg_5004: GLuint, arg_5005: [*c]const GLint) void {
    return glad_glProgramEnvParameterI4ivNV.?(arg_5003, arg_5004, arg_5005);
}
pub inline fn glProgramEnvParameterI4uiNV(arg_5006: GLenum, arg_5007: GLuint, arg_5008: GLuint, arg_5009: GLuint, arg_5010: GLuint, arg_5011: GLuint) void {
    return glad_glProgramEnvParameterI4uiNV.?(arg_5006, arg_5007, arg_5008, arg_5009, arg_5010, arg_5011);
}
pub inline fn glProgramEnvParameterI4uivNV(arg_5012: GLenum, arg_5013: GLuint, arg_5014: [*c]const GLuint) void {
    return glad_glProgramEnvParameterI4uivNV.?(arg_5012, arg_5013, arg_5014);
}
pub inline fn glProgramEnvParameters4fvEXT(arg_5015: GLenum, arg_5016: GLuint, arg_5017: GLsizei, arg_5018: [*c]const GLfloat) void {
    return glad_glProgramEnvParameters4fvEXT.?(arg_5015, arg_5016, arg_5017, arg_5018);
}
pub inline fn glProgramEnvParametersI4ivNV(arg_5019: GLenum, arg_5020: GLuint, arg_5021: GLsizei, arg_5022: [*c]const GLint) void {
    return glad_glProgramEnvParametersI4ivNV.?(arg_5019, arg_5020, arg_5021, arg_5022);
}
pub inline fn glProgramEnvParametersI4uivNV(arg_5023: GLenum, arg_5024: GLuint, arg_5025: GLsizei, arg_5026: [*c]const GLuint) void {
    return glad_glProgramEnvParametersI4uivNV.?(arg_5023, arg_5024, arg_5025, arg_5026);
}
pub inline fn glProgramLocalParameter4dARB(arg_5027: GLenum, arg_5028: GLuint, arg_5029: GLdouble, arg_5030: GLdouble, arg_5031: GLdouble, arg_5032: GLdouble) void {
    return glad_glProgramLocalParameter4dARB.?(arg_5027, arg_5028, arg_5029, arg_5030, arg_5031, arg_5032);
}
pub inline fn glProgramLocalParameter4dvARB(arg_5033: GLenum, arg_5034: GLuint, arg_5035: [*c]const GLdouble) void {
    return glad_glProgramLocalParameter4dvARB.?(arg_5033, arg_5034, arg_5035);
}
pub inline fn glProgramLocalParameter4fARB(arg_5036: GLenum, arg_5037: GLuint, arg_5038: GLfloat, arg_5039: GLfloat, arg_5040: GLfloat, arg_5041: GLfloat) void {
    return glad_glProgramLocalParameter4fARB.?(arg_5036, arg_5037, arg_5038, arg_5039, arg_5040, arg_5041);
}
pub inline fn glProgramLocalParameter4fvARB(arg_5042: GLenum, arg_5043: GLuint, arg_5044: [*c]const GLfloat) void {
    return glad_glProgramLocalParameter4fvARB.?(arg_5042, arg_5043, arg_5044);
}
pub inline fn glProgramLocalParameterI4iNV(arg_5045: GLenum, arg_5046: GLuint, arg_5047: GLint, arg_5048: GLint, arg_5049: GLint, arg_5050: GLint) void {
    return glad_glProgramLocalParameterI4iNV.?(arg_5045, arg_5046, arg_5047, arg_5048, arg_5049, arg_5050);
}
pub inline fn glProgramLocalParameterI4ivNV(arg_5051: GLenum, arg_5052: GLuint, arg_5053: [*c]const GLint) void {
    return glad_glProgramLocalParameterI4ivNV.?(arg_5051, arg_5052, arg_5053);
}
pub inline fn glProgramLocalParameterI4uiNV(arg_5054: GLenum, arg_5055: GLuint, arg_5056: GLuint, arg_5057: GLuint, arg_5058: GLuint, arg_5059: GLuint) void {
    return glad_glProgramLocalParameterI4uiNV.?(arg_5054, arg_5055, arg_5056, arg_5057, arg_5058, arg_5059);
}
pub inline fn glProgramLocalParameterI4uivNV(arg_5060: GLenum, arg_5061: GLuint, arg_5062: [*c]const GLuint) void {
    return glad_glProgramLocalParameterI4uivNV.?(arg_5060, arg_5061, arg_5062);
}
pub inline fn glProgramLocalParameters4fvEXT(arg_5063: GLenum, arg_5064: GLuint, arg_5065: GLsizei, arg_5066: [*c]const GLfloat) void {
    return glad_glProgramLocalParameters4fvEXT.?(arg_5063, arg_5064, arg_5065, arg_5066);
}
pub inline fn glProgramLocalParametersI4ivNV(arg_5067: GLenum, arg_5068: GLuint, arg_5069: GLsizei, arg_5070: [*c]const GLint) void {
    return glad_glProgramLocalParametersI4ivNV.?(arg_5067, arg_5068, arg_5069, arg_5070);
}
pub inline fn glProgramLocalParametersI4uivNV(arg_5071: GLenum, arg_5072: GLuint, arg_5073: GLsizei, arg_5074: [*c]const GLuint) void {
    return glad_glProgramLocalParametersI4uivNV.?(arg_5071, arg_5072, arg_5073, arg_5074);
}
pub inline fn glProgramNamedParameter4dNV(arg_5075: GLuint, arg_5076: GLsizei, arg_5077: [*c]const GLubyte, arg_5078: GLdouble, arg_5079: GLdouble, arg_5080: GLdouble, arg_5081: GLdouble) void {
    return glad_glProgramNamedParameter4dNV.?(arg_5075, arg_5076, arg_5077, arg_5078, arg_5079, arg_5080, arg_5081);
}
pub inline fn glProgramNamedParameter4dvNV(arg_5082: GLuint, arg_5083: GLsizei, arg_5084: [*c]const GLubyte, arg_5085: [*c]const GLdouble) void {
    return glad_glProgramNamedParameter4dvNV.?(arg_5082, arg_5083, arg_5084, arg_5085);
}
pub inline fn glProgramNamedParameter4fNV(arg_5086: GLuint, arg_5087: GLsizei, arg_5088: [*c]const GLubyte, arg_5089: GLfloat, arg_5090: GLfloat, arg_5091: GLfloat, arg_5092: GLfloat) void {
    return glad_glProgramNamedParameter4fNV.?(arg_5086, arg_5087, arg_5088, arg_5089, arg_5090, arg_5091, arg_5092);
}
pub inline fn glProgramNamedParameter4fvNV(arg_5093: GLuint, arg_5094: GLsizei, arg_5095: [*c]const GLubyte, arg_5096: [*c]const GLfloat) void {
    return glad_glProgramNamedParameter4fvNV.?(arg_5093, arg_5094, arg_5095, arg_5096);
}
pub inline fn glProgramParameter4dNV(arg_5097: GLenum, arg_5098: GLuint, arg_5099: GLdouble, arg_5100: GLdouble, arg_5101: GLdouble, arg_5102: GLdouble) void {
    return glad_glProgramParameter4dNV.?(arg_5097, arg_5098, arg_5099, arg_5100, arg_5101, arg_5102);
}
pub inline fn glProgramParameter4dvNV(arg_5103: GLenum, arg_5104: GLuint, arg_5105: [*c]const GLdouble) void {
    return glad_glProgramParameter4dvNV.?(arg_5103, arg_5104, arg_5105);
}
pub inline fn glProgramParameter4fNV(arg_5106: GLenum, arg_5107: GLuint, arg_5108: GLfloat, arg_5109: GLfloat, arg_5110: GLfloat, arg_5111: GLfloat) void {
    return glad_glProgramParameter4fNV.?(arg_5106, arg_5107, arg_5108, arg_5109, arg_5110, arg_5111);
}
pub inline fn glProgramParameter4fvNV(arg_5112: GLenum, arg_5113: GLuint, arg_5114: [*c]const GLfloat) void {
    return glad_glProgramParameter4fvNV.?(arg_5112, arg_5113, arg_5114);
}
pub inline fn glProgramParameteri(arg_5115: GLuint, arg_5116: GLenum, arg_5117: GLint) void {
    return glad_glProgramParameteri.?(arg_5115, arg_5116, arg_5117);
}
pub inline fn glProgramParameteriARB(arg_5118: GLuint, arg_5119: GLenum, arg_5120: GLint) void {
    return glad_glProgramParameteriARB.?(arg_5118, arg_5119, arg_5120);
}
pub inline fn glProgramParameteriEXT(arg_5121: GLuint, arg_5122: GLenum, arg_5123: GLint) void {
    return glad_glProgramParameteriEXT.?(arg_5121, arg_5122, arg_5123);
}
pub inline fn glProgramParameters4dvNV(arg_5124: GLenum, arg_5125: GLuint, arg_5126: GLsizei, arg_5127: [*c]const GLdouble) void {
    return glad_glProgramParameters4dvNV.?(arg_5124, arg_5125, arg_5126, arg_5127);
}
pub inline fn glProgramParameters4fvNV(arg_5128: GLenum, arg_5129: GLuint, arg_5130: GLsizei, arg_5131: [*c]const GLfloat) void {
    return glad_glProgramParameters4fvNV.?(arg_5128, arg_5129, arg_5130, arg_5131);
}
pub inline fn glProgramPathFragmentInputGenNV(arg_5132: GLuint, arg_5133: GLint, arg_5134: GLenum, arg_5135: GLint, arg_5136: [*c]const GLfloat) void {
    return glad_glProgramPathFragmentInputGenNV.?(arg_5132, arg_5133, arg_5134, arg_5135, arg_5136);
}
pub inline fn glProgramStringARB(arg_5137: GLenum, arg_5138: GLenum, arg_5139: GLsizei, arg_5140: ?*const anyopaque) void {
    return glad_glProgramStringARB.?(arg_5137, arg_5138, arg_5139, arg_5140);
}
pub inline fn glProgramSubroutineParametersuivNV(arg_5141: GLenum, arg_5142: GLsizei, arg_5143: [*c]const GLuint) void {
    return glad_glProgramSubroutineParametersuivNV.?(arg_5141, arg_5142, arg_5143);
}
pub inline fn glProgramUniform1d(arg_5144: GLuint, arg_5145: GLint, arg_5146: GLdouble) void {
    return glad_glProgramUniform1d.?(arg_5144, arg_5145, arg_5146);
}
pub inline fn glProgramUniform1dEXT(arg_5147: GLuint, arg_5148: GLint, arg_5149: GLdouble) void {
    return glad_glProgramUniform1dEXT.?(arg_5147, arg_5148, arg_5149);
}
pub inline fn glProgramUniform1dv(arg_5150: GLuint, arg_5151: GLint, arg_5152: GLsizei, arg_5153: [*c]const GLdouble) void {
    return glad_glProgramUniform1dv.?(arg_5150, arg_5151, arg_5152, arg_5153);
}
pub inline fn glProgramUniform1dvEXT(arg_5154: GLuint, arg_5155: GLint, arg_5156: GLsizei, arg_5157: [*c]const GLdouble) void {
    return glad_glProgramUniform1dvEXT.?(arg_5154, arg_5155, arg_5156, arg_5157);
}
pub inline fn glProgramUniform1f(arg_5158: GLuint, arg_5159: GLint, arg_5160: GLfloat) void {
    return glad_glProgramUniform1f.?(arg_5158, arg_5159, arg_5160);
}
pub inline fn glProgramUniform1fEXT(arg_5161: GLuint, arg_5162: GLint, arg_5163: GLfloat) void {
    return glad_glProgramUniform1fEXT.?(arg_5161, arg_5162, arg_5163);
}
pub inline fn glProgramUniform1fv(arg_5164: GLuint, arg_5165: GLint, arg_5166: GLsizei, arg_5167: [*c]const GLfloat) void {
    return glad_glProgramUniform1fv.?(arg_5164, arg_5165, arg_5166, arg_5167);
}
pub inline fn glProgramUniform1fvEXT(arg_5168: GLuint, arg_5169: GLint, arg_5170: GLsizei, arg_5171: [*c]const GLfloat) void {
    return glad_glProgramUniform1fvEXT.?(arg_5168, arg_5169, arg_5170, arg_5171);
}
pub inline fn glProgramUniform1i(arg_5172: GLuint, arg_5173: GLint, arg_5174: GLint) void {
    return glad_glProgramUniform1i.?(arg_5172, arg_5173, arg_5174);
}
pub inline fn glProgramUniform1i64ARB(arg_5175: GLuint, arg_5176: GLint, arg_5177: GLint64) void {
    return glad_glProgramUniform1i64ARB.?(arg_5175, arg_5176, arg_5177);
}
pub inline fn glProgramUniform1i64NV(arg_5178: GLuint, arg_5179: GLint, arg_5180: GLint64EXT) void {
    return glad_glProgramUniform1i64NV.?(arg_5178, arg_5179, arg_5180);
}
pub inline fn glProgramUniform1i64vARB(arg_5181: GLuint, arg_5182: GLint, arg_5183: GLsizei, arg_5184: [*c]const GLint64) void {
    return glad_glProgramUniform1i64vARB.?(arg_5181, arg_5182, arg_5183, arg_5184);
}
pub inline fn glProgramUniform1i64vNV(arg_5185: GLuint, arg_5186: GLint, arg_5187: GLsizei, arg_5188: [*c]const GLint64EXT) void {
    return glad_glProgramUniform1i64vNV.?(arg_5185, arg_5186, arg_5187, arg_5188);
}
pub inline fn glProgramUniform1iEXT(arg_5189: GLuint, arg_5190: GLint, arg_5191: GLint) void {
    return glad_glProgramUniform1iEXT.?(arg_5189, arg_5190, arg_5191);
}
pub inline fn glProgramUniform1iv(arg_5192: GLuint, arg_5193: GLint, arg_5194: GLsizei, arg_5195: [*c]const GLint) void {
    return glad_glProgramUniform1iv.?(arg_5192, arg_5193, arg_5194, arg_5195);
}
pub inline fn glProgramUniform1ivEXT(arg_5196: GLuint, arg_5197: GLint, arg_5198: GLsizei, arg_5199: [*c]const GLint) void {
    return glad_glProgramUniform1ivEXT.?(arg_5196, arg_5197, arg_5198, arg_5199);
}
pub inline fn glProgramUniform1ui(arg_5200: GLuint, arg_5201: GLint, arg_5202: GLuint) void {
    return glad_glProgramUniform1ui.?(arg_5200, arg_5201, arg_5202);
}
pub inline fn glProgramUniform1ui64ARB(arg_5203: GLuint, arg_5204: GLint, arg_5205: GLuint64) void {
    return glad_glProgramUniform1ui64ARB.?(arg_5203, arg_5204, arg_5205);
}
pub inline fn glProgramUniform1ui64NV(arg_5206: GLuint, arg_5207: GLint, arg_5208: GLuint64EXT) void {
    return glad_glProgramUniform1ui64NV.?(arg_5206, arg_5207, arg_5208);
}
pub inline fn glProgramUniform1ui64vARB(arg_5209: GLuint, arg_5210: GLint, arg_5211: GLsizei, arg_5212: [*c]const GLuint64) void {
    return glad_glProgramUniform1ui64vARB.?(arg_5209, arg_5210, arg_5211, arg_5212);
}
pub inline fn glProgramUniform1ui64vNV(arg_5213: GLuint, arg_5214: GLint, arg_5215: GLsizei, arg_5216: [*c]const GLuint64EXT) void {
    return glad_glProgramUniform1ui64vNV.?(arg_5213, arg_5214, arg_5215, arg_5216);
}
pub inline fn glProgramUniform1uiEXT(arg_5217: GLuint, arg_5218: GLint, arg_5219: GLuint) void {
    return glad_glProgramUniform1uiEXT.?(arg_5217, arg_5218, arg_5219);
}
pub inline fn glProgramUniform1uiv(arg_5220: GLuint, arg_5221: GLint, arg_5222: GLsizei, arg_5223: [*c]const GLuint) void {
    return glad_glProgramUniform1uiv.?(arg_5220, arg_5221, arg_5222, arg_5223);
}
pub inline fn glProgramUniform1uivEXT(arg_5224: GLuint, arg_5225: GLint, arg_5226: GLsizei, arg_5227: [*c]const GLuint) void {
    return glad_glProgramUniform1uivEXT.?(arg_5224, arg_5225, arg_5226, arg_5227);
}
pub inline fn glProgramUniform2d(arg_5228: GLuint, arg_5229: GLint, arg_5230: GLdouble, arg_5231: GLdouble) void {
    return glad_glProgramUniform2d.?(arg_5228, arg_5229, arg_5230, arg_5231);
}
pub inline fn glProgramUniform2dEXT(arg_5232: GLuint, arg_5233: GLint, arg_5234: GLdouble, arg_5235: GLdouble) void {
    return glad_glProgramUniform2dEXT.?(arg_5232, arg_5233, arg_5234, arg_5235);
}
pub inline fn glProgramUniform2dv(arg_5236: GLuint, arg_5237: GLint, arg_5238: GLsizei, arg_5239: [*c]const GLdouble) void {
    return glad_glProgramUniform2dv.?(arg_5236, arg_5237, arg_5238, arg_5239);
}
pub inline fn glProgramUniform2dvEXT(arg_5240: GLuint, arg_5241: GLint, arg_5242: GLsizei, arg_5243: [*c]const GLdouble) void {
    return glad_glProgramUniform2dvEXT.?(arg_5240, arg_5241, arg_5242, arg_5243);
}
pub inline fn glProgramUniform2f(arg_5244: GLuint, arg_5245: GLint, arg_5246: GLfloat, arg_5247: GLfloat) void {
    return glad_glProgramUniform2f.?(arg_5244, arg_5245, arg_5246, arg_5247);
}
pub inline fn glProgramUniform2fEXT(arg_5248: GLuint, arg_5249: GLint, arg_5250: GLfloat, arg_5251: GLfloat) void {
    return glad_glProgramUniform2fEXT.?(arg_5248, arg_5249, arg_5250, arg_5251);
}
pub inline fn glProgramUniform2fv(arg_5252: GLuint, arg_5253: GLint, arg_5254: GLsizei, arg_5255: [*c]const GLfloat) void {
    return glad_glProgramUniform2fv.?(arg_5252, arg_5253, arg_5254, arg_5255);
}
pub inline fn glProgramUniform2fvEXT(arg_5256: GLuint, arg_5257: GLint, arg_5258: GLsizei, arg_5259: [*c]const GLfloat) void {
    return glad_glProgramUniform2fvEXT.?(arg_5256, arg_5257, arg_5258, arg_5259);
}
pub inline fn glProgramUniform2i(arg_5260: GLuint, arg_5261: GLint, arg_5262: GLint, arg_5263: GLint) void {
    return glad_glProgramUniform2i.?(arg_5260, arg_5261, arg_5262, arg_5263);
}
pub inline fn glProgramUniform2i64ARB(arg_5264: GLuint, arg_5265: GLint, arg_5266: GLint64, arg_5267: GLint64) void {
    return glad_glProgramUniform2i64ARB.?(arg_5264, arg_5265, arg_5266, arg_5267);
}
pub inline fn glProgramUniform2i64NV(arg_5268: GLuint, arg_5269: GLint, arg_5270: GLint64EXT, arg_5271: GLint64EXT) void {
    return glad_glProgramUniform2i64NV.?(arg_5268, arg_5269, arg_5270, arg_5271);
}
pub inline fn glProgramUniform2i64vARB(arg_5272: GLuint, arg_5273: GLint, arg_5274: GLsizei, arg_5275: [*c]const GLint64) void {
    return glad_glProgramUniform2i64vARB.?(arg_5272, arg_5273, arg_5274, arg_5275);
}
pub inline fn glProgramUniform2i64vNV(arg_5276: GLuint, arg_5277: GLint, arg_5278: GLsizei, arg_5279: [*c]const GLint64EXT) void {
    return glad_glProgramUniform2i64vNV.?(arg_5276, arg_5277, arg_5278, arg_5279);
}
pub inline fn glProgramUniform2iEXT(arg_5280: GLuint, arg_5281: GLint, arg_5282: GLint, arg_5283: GLint) void {
    return glad_glProgramUniform2iEXT.?(arg_5280, arg_5281, arg_5282, arg_5283);
}
pub inline fn glProgramUniform2iv(arg_5284: GLuint, arg_5285: GLint, arg_5286: GLsizei, arg_5287: [*c]const GLint) void {
    return glad_glProgramUniform2iv.?(arg_5284, arg_5285, arg_5286, arg_5287);
}
pub inline fn glProgramUniform2ivEXT(arg_5288: GLuint, arg_5289: GLint, arg_5290: GLsizei, arg_5291: [*c]const GLint) void {
    return glad_glProgramUniform2ivEXT.?(arg_5288, arg_5289, arg_5290, arg_5291);
}
pub inline fn glProgramUniform2ui(arg_5292: GLuint, arg_5293: GLint, arg_5294: GLuint, arg_5295: GLuint) void {
    return glad_glProgramUniform2ui.?(arg_5292, arg_5293, arg_5294, arg_5295);
}
pub inline fn glProgramUniform2ui64ARB(arg_5296: GLuint, arg_5297: GLint, arg_5298: GLuint64, arg_5299: GLuint64) void {
    return glad_glProgramUniform2ui64ARB.?(arg_5296, arg_5297, arg_5298, arg_5299);
}
pub inline fn glProgramUniform2ui64NV(arg_5300: GLuint, arg_5301: GLint, arg_5302: GLuint64EXT, arg_5303: GLuint64EXT) void {
    return glad_glProgramUniform2ui64NV.?(arg_5300, arg_5301, arg_5302, arg_5303);
}
pub inline fn glProgramUniform2ui64vARB(arg_5304: GLuint, arg_5305: GLint, arg_5306: GLsizei, arg_5307: [*c]const GLuint64) void {
    return glad_glProgramUniform2ui64vARB.?(arg_5304, arg_5305, arg_5306, arg_5307);
}
pub inline fn glProgramUniform2ui64vNV(arg_5308: GLuint, arg_5309: GLint, arg_5310: GLsizei, arg_5311: [*c]const GLuint64EXT) void {
    return glad_glProgramUniform2ui64vNV.?(arg_5308, arg_5309, arg_5310, arg_5311);
}
pub inline fn glProgramUniform2uiEXT(arg_5312: GLuint, arg_5313: GLint, arg_5314: GLuint, arg_5315: GLuint) void {
    return glad_glProgramUniform2uiEXT.?(arg_5312, arg_5313, arg_5314, arg_5315);
}
pub inline fn glProgramUniform2uiv(arg_5316: GLuint, arg_5317: GLint, arg_5318: GLsizei, arg_5319: [*c]const GLuint) void {
    return glad_glProgramUniform2uiv.?(arg_5316, arg_5317, arg_5318, arg_5319);
}
pub inline fn glProgramUniform2uivEXT(arg_5320: GLuint, arg_5321: GLint, arg_5322: GLsizei, arg_5323: [*c]const GLuint) void {
    return glad_glProgramUniform2uivEXT.?(arg_5320, arg_5321, arg_5322, arg_5323);
}
pub inline fn glProgramUniform3d(arg_5324: GLuint, arg_5325: GLint, arg_5326: GLdouble, arg_5327: GLdouble, arg_5328: GLdouble) void {
    return glad_glProgramUniform3d.?(arg_5324, arg_5325, arg_5326, arg_5327, arg_5328);
}
pub inline fn glProgramUniform3dEXT(arg_5329: GLuint, arg_5330: GLint, arg_5331: GLdouble, arg_5332: GLdouble, arg_5333: GLdouble) void {
    return glad_glProgramUniform3dEXT.?(arg_5329, arg_5330, arg_5331, arg_5332, arg_5333);
}
pub inline fn glProgramUniform3dv(arg_5334: GLuint, arg_5335: GLint, arg_5336: GLsizei, arg_5337: [*c]const GLdouble) void {
    return glad_glProgramUniform3dv.?(arg_5334, arg_5335, arg_5336, arg_5337);
}
pub inline fn glProgramUniform3dvEXT(arg_5338: GLuint, arg_5339: GLint, arg_5340: GLsizei, arg_5341: [*c]const GLdouble) void {
    return glad_glProgramUniform3dvEXT.?(arg_5338, arg_5339, arg_5340, arg_5341);
}
pub inline fn glProgramUniform3f(arg_5342: GLuint, arg_5343: GLint, arg_5344: GLfloat, arg_5345: GLfloat, arg_5346: GLfloat) void {
    return glad_glProgramUniform3f.?(arg_5342, arg_5343, arg_5344, arg_5345, arg_5346);
}
pub inline fn glProgramUniform3fEXT(arg_5347: GLuint, arg_5348: GLint, arg_5349: GLfloat, arg_5350: GLfloat, arg_5351: GLfloat) void {
    return glad_glProgramUniform3fEXT.?(arg_5347, arg_5348, arg_5349, arg_5350, arg_5351);
}
pub inline fn glProgramUniform3fv(arg_5352: GLuint, arg_5353: GLint, arg_5354: GLsizei, arg_5355: [*c]const GLfloat) void {
    return glad_glProgramUniform3fv.?(arg_5352, arg_5353, arg_5354, arg_5355);
}
pub inline fn glProgramUniform3fvEXT(arg_5356: GLuint, arg_5357: GLint, arg_5358: GLsizei, arg_5359: [*c]const GLfloat) void {
    return glad_glProgramUniform3fvEXT.?(arg_5356, arg_5357, arg_5358, arg_5359);
}
pub inline fn glProgramUniform3i(arg_5360: GLuint, arg_5361: GLint, arg_5362: GLint, arg_5363: GLint, arg_5364: GLint) void {
    return glad_glProgramUniform3i.?(arg_5360, arg_5361, arg_5362, arg_5363, arg_5364);
}
pub inline fn glProgramUniform3i64ARB(arg_5365: GLuint, arg_5366: GLint, arg_5367: GLint64, arg_5368: GLint64, arg_5369: GLint64) void {
    return glad_glProgramUniform3i64ARB.?(arg_5365, arg_5366, arg_5367, arg_5368, arg_5369);
}
pub inline fn glProgramUniform3i64NV(arg_5370: GLuint, arg_5371: GLint, arg_5372: GLint64EXT, arg_5373: GLint64EXT, arg_5374: GLint64EXT) void {
    return glad_glProgramUniform3i64NV.?(arg_5370, arg_5371, arg_5372, arg_5373, arg_5374);
}
pub inline fn glProgramUniform3i64vARB(arg_5375: GLuint, arg_5376: GLint, arg_5377: GLsizei, arg_5378: [*c]const GLint64) void {
    return glad_glProgramUniform3i64vARB.?(arg_5375, arg_5376, arg_5377, arg_5378);
}
pub inline fn glProgramUniform3i64vNV(arg_5379: GLuint, arg_5380: GLint, arg_5381: GLsizei, arg_5382: [*c]const GLint64EXT) void {
    return glad_glProgramUniform3i64vNV.?(arg_5379, arg_5380, arg_5381, arg_5382);
}
pub inline fn glProgramUniform3iEXT(arg_5383: GLuint, arg_5384: GLint, arg_5385: GLint, arg_5386: GLint, arg_5387: GLint) void {
    return glad_glProgramUniform3iEXT.?(arg_5383, arg_5384, arg_5385, arg_5386, arg_5387);
}
pub inline fn glProgramUniform3iv(arg_5388: GLuint, arg_5389: GLint, arg_5390: GLsizei, arg_5391: [*c]const GLint) void {
    return glad_glProgramUniform3iv.?(arg_5388, arg_5389, arg_5390, arg_5391);
}
pub inline fn glProgramUniform3ivEXT(arg_5392: GLuint, arg_5393: GLint, arg_5394: GLsizei, arg_5395: [*c]const GLint) void {
    return glad_glProgramUniform3ivEXT.?(arg_5392, arg_5393, arg_5394, arg_5395);
}
pub inline fn glProgramUniform3ui(arg_5396: GLuint, arg_5397: GLint, arg_5398: GLuint, arg_5399: GLuint, arg_5400: GLuint) void {
    return glad_glProgramUniform3ui.?(arg_5396, arg_5397, arg_5398, arg_5399, arg_5400);
}
pub inline fn glProgramUniform3ui64ARB(arg_5401: GLuint, arg_5402: GLint, arg_5403: GLuint64, arg_5404: GLuint64, arg_5405: GLuint64) void {
    return glad_glProgramUniform3ui64ARB.?(arg_5401, arg_5402, arg_5403, arg_5404, arg_5405);
}
pub inline fn glProgramUniform3ui64NV(arg_5406: GLuint, arg_5407: GLint, arg_5408: GLuint64EXT, arg_5409: GLuint64EXT, arg_5410: GLuint64EXT) void {
    return glad_glProgramUniform3ui64NV.?(arg_5406, arg_5407, arg_5408, arg_5409, arg_5410);
}
pub inline fn glProgramUniform3ui64vARB(arg_5411: GLuint, arg_5412: GLint, arg_5413: GLsizei, arg_5414: [*c]const GLuint64) void {
    return glad_glProgramUniform3ui64vARB.?(arg_5411, arg_5412, arg_5413, arg_5414);
}
pub inline fn glProgramUniform3ui64vNV(arg_5415: GLuint, arg_5416: GLint, arg_5417: GLsizei, arg_5418: [*c]const GLuint64EXT) void {
    return glad_glProgramUniform3ui64vNV.?(arg_5415, arg_5416, arg_5417, arg_5418);
}
pub inline fn glProgramUniform3uiEXT(arg_5419: GLuint, arg_5420: GLint, arg_5421: GLuint, arg_5422: GLuint, arg_5423: GLuint) void {
    return glad_glProgramUniform3uiEXT.?(arg_5419, arg_5420, arg_5421, arg_5422, arg_5423);
}
pub inline fn glProgramUniform3uiv(arg_5424: GLuint, arg_5425: GLint, arg_5426: GLsizei, arg_5427: [*c]const GLuint) void {
    return glad_glProgramUniform3uiv.?(arg_5424, arg_5425, arg_5426, arg_5427);
}
pub inline fn glProgramUniform3uivEXT(arg_5428: GLuint, arg_5429: GLint, arg_5430: GLsizei, arg_5431: [*c]const GLuint) void {
    return glad_glProgramUniform3uivEXT.?(arg_5428, arg_5429, arg_5430, arg_5431);
}
pub inline fn glProgramUniform4d(arg_5432: GLuint, arg_5433: GLint, arg_5434: GLdouble, arg_5435: GLdouble, arg_5436: GLdouble, arg_5437: GLdouble) void {
    return glad_glProgramUniform4d.?(arg_5432, arg_5433, arg_5434, arg_5435, arg_5436, arg_5437);
}
pub inline fn glProgramUniform4dEXT(arg_5438: GLuint, arg_5439: GLint, arg_5440: GLdouble, arg_5441: GLdouble, arg_5442: GLdouble, arg_5443: GLdouble) void {
    return glad_glProgramUniform4dEXT.?(arg_5438, arg_5439, arg_5440, arg_5441, arg_5442, arg_5443);
}
pub inline fn glProgramUniform4dv(arg_5444: GLuint, arg_5445: GLint, arg_5446: GLsizei, arg_5447: [*c]const GLdouble) void {
    return glad_glProgramUniform4dv.?(arg_5444, arg_5445, arg_5446, arg_5447);
}
pub inline fn glProgramUniform4dvEXT(arg_5448: GLuint, arg_5449: GLint, arg_5450: GLsizei, arg_5451: [*c]const GLdouble) void {
    return glad_glProgramUniform4dvEXT.?(arg_5448, arg_5449, arg_5450, arg_5451);
}
pub inline fn glProgramUniform4f(arg_5452: GLuint, arg_5453: GLint, arg_5454: GLfloat, arg_5455: GLfloat, arg_5456: GLfloat, arg_5457: GLfloat) void {
    return glad_glProgramUniform4f.?(arg_5452, arg_5453, arg_5454, arg_5455, arg_5456, arg_5457);
}
pub inline fn glProgramUniform4fEXT(arg_5458: GLuint, arg_5459: GLint, arg_5460: GLfloat, arg_5461: GLfloat, arg_5462: GLfloat, arg_5463: GLfloat) void {
    return glad_glProgramUniform4fEXT.?(arg_5458, arg_5459, arg_5460, arg_5461, arg_5462, arg_5463);
}
pub inline fn glProgramUniform4fv(arg_5464: GLuint, arg_5465: GLint, arg_5466: GLsizei, arg_5467: [*c]const GLfloat) void {
    return glad_glProgramUniform4fv.?(arg_5464, arg_5465, arg_5466, arg_5467);
}
pub inline fn glProgramUniform4fvEXT(arg_5468: GLuint, arg_5469: GLint, arg_5470: GLsizei, arg_5471: [*c]const GLfloat) void {
    return glad_glProgramUniform4fvEXT.?(arg_5468, arg_5469, arg_5470, arg_5471);
}
pub inline fn glProgramUniform4i(arg_5472: GLuint, arg_5473: GLint, arg_5474: GLint, arg_5475: GLint, arg_5476: GLint, arg_5477: GLint) void {
    return glad_glProgramUniform4i.?(arg_5472, arg_5473, arg_5474, arg_5475, arg_5476, arg_5477);
}
pub inline fn glProgramUniform4i64ARB(arg_5478: GLuint, arg_5479: GLint, arg_5480: GLint64, arg_5481: GLint64, arg_5482: GLint64, arg_5483: GLint64) void {
    return glad_glProgramUniform4i64ARB.?(arg_5478, arg_5479, arg_5480, arg_5481, arg_5482, arg_5483);
}
pub inline fn glProgramUniform4i64NV(arg_5484: GLuint, arg_5485: GLint, arg_5486: GLint64EXT, arg_5487: GLint64EXT, arg_5488: GLint64EXT, arg_5489: GLint64EXT) void {
    return glad_glProgramUniform4i64NV.?(arg_5484, arg_5485, arg_5486, arg_5487, arg_5488, arg_5489);
}
pub inline fn glProgramUniform4i64vARB(arg_5490: GLuint, arg_5491: GLint, arg_5492: GLsizei, arg_5493: [*c]const GLint64) void {
    return glad_glProgramUniform4i64vARB.?(arg_5490, arg_5491, arg_5492, arg_5493);
}
pub inline fn glProgramUniform4i64vNV(arg_5494: GLuint, arg_5495: GLint, arg_5496: GLsizei, arg_5497: [*c]const GLint64EXT) void {
    return glad_glProgramUniform4i64vNV.?(arg_5494, arg_5495, arg_5496, arg_5497);
}
pub inline fn glProgramUniform4iEXT(arg_5498: GLuint, arg_5499: GLint, arg_5500: GLint, arg_5501: GLint, arg_5502: GLint, arg_5503: GLint) void {
    return glad_glProgramUniform4iEXT.?(arg_5498, arg_5499, arg_5500, arg_5501, arg_5502, arg_5503);
}
pub inline fn glProgramUniform4iv(arg_5504: GLuint, arg_5505: GLint, arg_5506: GLsizei, arg_5507: [*c]const GLint) void {
    return glad_glProgramUniform4iv.?(arg_5504, arg_5505, arg_5506, arg_5507);
}
pub inline fn glProgramUniform4ivEXT(arg_5508: GLuint, arg_5509: GLint, arg_5510: GLsizei, arg_5511: [*c]const GLint) void {
    return glad_glProgramUniform4ivEXT.?(arg_5508, arg_5509, arg_5510, arg_5511);
}
pub inline fn glProgramUniform4ui(arg_5512: GLuint, arg_5513: GLint, arg_5514: GLuint, arg_5515: GLuint, arg_5516: GLuint, arg_5517: GLuint) void {
    return glad_glProgramUniform4ui.?(arg_5512, arg_5513, arg_5514, arg_5515, arg_5516, arg_5517);
}
pub inline fn glProgramUniform4ui64ARB(arg_5518: GLuint, arg_5519: GLint, arg_5520: GLuint64, arg_5521: GLuint64, arg_5522: GLuint64, arg_5523: GLuint64) void {
    return glad_glProgramUniform4ui64ARB.?(arg_5518, arg_5519, arg_5520, arg_5521, arg_5522, arg_5523);
}
pub inline fn glProgramUniform4ui64NV(arg_5524: GLuint, arg_5525: GLint, arg_5526: GLuint64EXT, arg_5527: GLuint64EXT, arg_5528: GLuint64EXT, arg_5529: GLuint64EXT) void {
    return glad_glProgramUniform4ui64NV.?(arg_5524, arg_5525, arg_5526, arg_5527, arg_5528, arg_5529);
}
pub inline fn glProgramUniform4ui64vARB(arg_5530: GLuint, arg_5531: GLint, arg_5532: GLsizei, arg_5533: [*c]const GLuint64) void {
    return glad_glProgramUniform4ui64vARB.?(arg_5530, arg_5531, arg_5532, arg_5533);
}
pub inline fn glProgramUniform4ui64vNV(arg_5534: GLuint, arg_5535: GLint, arg_5536: GLsizei, arg_5537: [*c]const GLuint64EXT) void {
    return glad_glProgramUniform4ui64vNV.?(arg_5534, arg_5535, arg_5536, arg_5537);
}
pub inline fn glProgramUniform4uiEXT(arg_5538: GLuint, arg_5539: GLint, arg_5540: GLuint, arg_5541: GLuint, arg_5542: GLuint, arg_5543: GLuint) void {
    return glad_glProgramUniform4uiEXT.?(arg_5538, arg_5539, arg_5540, arg_5541, arg_5542, arg_5543);
}
pub inline fn glProgramUniform4uiv(arg_5544: GLuint, arg_5545: GLint, arg_5546: GLsizei, arg_5547: [*c]const GLuint) void {
    return glad_glProgramUniform4uiv.?(arg_5544, arg_5545, arg_5546, arg_5547);
}
pub inline fn glProgramUniform4uivEXT(arg_5548: GLuint, arg_5549: GLint, arg_5550: GLsizei, arg_5551: [*c]const GLuint) void {
    return glad_glProgramUniform4uivEXT.?(arg_5548, arg_5549, arg_5550, arg_5551);
}
pub inline fn glProgramUniformHandleui64ARB(arg_5552: GLuint, arg_5553: GLint, arg_5554: GLuint64) void {
    return glad_glProgramUniformHandleui64ARB.?(arg_5552, arg_5553, arg_5554);
}
pub inline fn glProgramUniformHandleui64NV(arg_5555: GLuint, arg_5556: GLint, arg_5557: GLuint64) void {
    return glad_glProgramUniformHandleui64NV.?(arg_5555, arg_5556, arg_5557);
}
pub inline fn glProgramUniformHandleui64vARB(arg_5558: GLuint, arg_5559: GLint, arg_5560: GLsizei, arg_5561: [*c]const GLuint64) void {
    return glad_glProgramUniformHandleui64vARB.?(arg_5558, arg_5559, arg_5560, arg_5561);
}
pub inline fn glProgramUniformHandleui64vNV(arg_5562: GLuint, arg_5563: GLint, arg_5564: GLsizei, arg_5565: [*c]const GLuint64) void {
    return glad_glProgramUniformHandleui64vNV.?(arg_5562, arg_5563, arg_5564, arg_5565);
}
pub inline fn glProgramUniformMatrix2dv(arg_5566: GLuint, arg_5567: GLint, arg_5568: GLsizei, arg_5569: GLboolean, arg_5570: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix2dv.?(arg_5566, arg_5567, arg_5568, arg_5569, arg_5570);
}
pub inline fn glProgramUniformMatrix2dvEXT(arg_5571: GLuint, arg_5572: GLint, arg_5573: GLsizei, arg_5574: GLboolean, arg_5575: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix2dvEXT.?(arg_5571, arg_5572, arg_5573, arg_5574, arg_5575);
}
pub inline fn glProgramUniformMatrix2fv(arg_5576: GLuint, arg_5577: GLint, arg_5578: GLsizei, arg_5579: GLboolean, arg_5580: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix2fv.?(arg_5576, arg_5577, arg_5578, arg_5579, arg_5580);
}
pub inline fn glProgramUniformMatrix2fvEXT(arg_5581: GLuint, arg_5582: GLint, arg_5583: GLsizei, arg_5584: GLboolean, arg_5585: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix2fvEXT.?(arg_5581, arg_5582, arg_5583, arg_5584, arg_5585);
}
pub inline fn glProgramUniformMatrix2x3dv(arg_5586: GLuint, arg_5587: GLint, arg_5588: GLsizei, arg_5589: GLboolean, arg_5590: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix2x3dv.?(arg_5586, arg_5587, arg_5588, arg_5589, arg_5590);
}
pub inline fn glProgramUniformMatrix2x3dvEXT(arg_5591: GLuint, arg_5592: GLint, arg_5593: GLsizei, arg_5594: GLboolean, arg_5595: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix2x3dvEXT.?(arg_5591, arg_5592, arg_5593, arg_5594, arg_5595);
}
pub inline fn glProgramUniformMatrix2x3fv(arg_5596: GLuint, arg_5597: GLint, arg_5598: GLsizei, arg_5599: GLboolean, arg_5600: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix2x3fv.?(arg_5596, arg_5597, arg_5598, arg_5599, arg_5600);
}
pub inline fn glProgramUniformMatrix2x3fvEXT(arg_5601: GLuint, arg_5602: GLint, arg_5603: GLsizei, arg_5604: GLboolean, arg_5605: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix2x3fvEXT.?(arg_5601, arg_5602, arg_5603, arg_5604, arg_5605);
}
pub inline fn glProgramUniformMatrix2x4dv(arg_5606: GLuint, arg_5607: GLint, arg_5608: GLsizei, arg_5609: GLboolean, arg_5610: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix2x4dv.?(arg_5606, arg_5607, arg_5608, arg_5609, arg_5610);
}
pub inline fn glProgramUniformMatrix2x4dvEXT(arg_5611: GLuint, arg_5612: GLint, arg_5613: GLsizei, arg_5614: GLboolean, arg_5615: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix2x4dvEXT.?(arg_5611, arg_5612, arg_5613, arg_5614, arg_5615);
}
pub inline fn glProgramUniformMatrix2x4fv(arg_5616: GLuint, arg_5617: GLint, arg_5618: GLsizei, arg_5619: GLboolean, arg_5620: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix2x4fv.?(arg_5616, arg_5617, arg_5618, arg_5619, arg_5620);
}
pub inline fn glProgramUniformMatrix2x4fvEXT(arg_5621: GLuint, arg_5622: GLint, arg_5623: GLsizei, arg_5624: GLboolean, arg_5625: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix2x4fvEXT.?(arg_5621, arg_5622, arg_5623, arg_5624, arg_5625);
}
pub inline fn glProgramUniformMatrix3dv(arg_5626: GLuint, arg_5627: GLint, arg_5628: GLsizei, arg_5629: GLboolean, arg_5630: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix3dv.?(arg_5626, arg_5627, arg_5628, arg_5629, arg_5630);
}
pub inline fn glProgramUniformMatrix3dvEXT(arg_5631: GLuint, arg_5632: GLint, arg_5633: GLsizei, arg_5634: GLboolean, arg_5635: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix3dvEXT.?(arg_5631, arg_5632, arg_5633, arg_5634, arg_5635);
}
pub inline fn glProgramUniformMatrix3fv(arg_5636: GLuint, arg_5637: GLint, arg_5638: GLsizei, arg_5639: GLboolean, arg_5640: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix3fv.?(arg_5636, arg_5637, arg_5638, arg_5639, arg_5640);
}
pub inline fn glProgramUniformMatrix3fvEXT(arg_5641: GLuint, arg_5642: GLint, arg_5643: GLsizei, arg_5644: GLboolean, arg_5645: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix3fvEXT.?(arg_5641, arg_5642, arg_5643, arg_5644, arg_5645);
}
pub inline fn glProgramUniformMatrix3x2dv(arg_5646: GLuint, arg_5647: GLint, arg_5648: GLsizei, arg_5649: GLboolean, arg_5650: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix3x2dv.?(arg_5646, arg_5647, arg_5648, arg_5649, arg_5650);
}
pub inline fn glProgramUniformMatrix3x2dvEXT(arg_5651: GLuint, arg_5652: GLint, arg_5653: GLsizei, arg_5654: GLboolean, arg_5655: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix3x2dvEXT.?(arg_5651, arg_5652, arg_5653, arg_5654, arg_5655);
}
pub inline fn glProgramUniformMatrix3x2fv(arg_5656: GLuint, arg_5657: GLint, arg_5658: GLsizei, arg_5659: GLboolean, arg_5660: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix3x2fv.?(arg_5656, arg_5657, arg_5658, arg_5659, arg_5660);
}
pub inline fn glProgramUniformMatrix3x2fvEXT(arg_5661: GLuint, arg_5662: GLint, arg_5663: GLsizei, arg_5664: GLboolean, arg_5665: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix3x2fvEXT.?(arg_5661, arg_5662, arg_5663, arg_5664, arg_5665);
}
pub inline fn glProgramUniformMatrix3x4dv(arg_5666: GLuint, arg_5667: GLint, arg_5668: GLsizei, arg_5669: GLboolean, arg_5670: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix3x4dv.?(arg_5666, arg_5667, arg_5668, arg_5669, arg_5670);
}
pub inline fn glProgramUniformMatrix3x4dvEXT(arg_5671: GLuint, arg_5672: GLint, arg_5673: GLsizei, arg_5674: GLboolean, arg_5675: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix3x4dvEXT.?(arg_5671, arg_5672, arg_5673, arg_5674, arg_5675);
}
pub inline fn glProgramUniformMatrix3x4fv(arg_5676: GLuint, arg_5677: GLint, arg_5678: GLsizei, arg_5679: GLboolean, arg_5680: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix3x4fv.?(arg_5676, arg_5677, arg_5678, arg_5679, arg_5680);
}
pub inline fn glProgramUniformMatrix3x4fvEXT(arg_5681: GLuint, arg_5682: GLint, arg_5683: GLsizei, arg_5684: GLboolean, arg_5685: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix3x4fvEXT.?(arg_5681, arg_5682, arg_5683, arg_5684, arg_5685);
}
pub inline fn glProgramUniformMatrix4dv(arg_5686: GLuint, arg_5687: GLint, arg_5688: GLsizei, arg_5689: GLboolean, arg_5690: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix4dv.?(arg_5686, arg_5687, arg_5688, arg_5689, arg_5690);
}
pub inline fn glProgramUniformMatrix4dvEXT(arg_5691: GLuint, arg_5692: GLint, arg_5693: GLsizei, arg_5694: GLboolean, arg_5695: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix4dvEXT.?(arg_5691, arg_5692, arg_5693, arg_5694, arg_5695);
}
pub inline fn glProgramUniformMatrix4fv(arg_5696: GLuint, arg_5697: GLint, arg_5698: GLsizei, arg_5699: GLboolean, arg_5700: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix4fv.?(arg_5696, arg_5697, arg_5698, arg_5699, arg_5700);
}
pub inline fn glProgramUniformMatrix4fvEXT(arg_5701: GLuint, arg_5702: GLint, arg_5703: GLsizei, arg_5704: GLboolean, arg_5705: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix4fvEXT.?(arg_5701, arg_5702, arg_5703, arg_5704, arg_5705);
}
pub inline fn glProgramUniformMatrix4x2dv(arg_5706: GLuint, arg_5707: GLint, arg_5708: GLsizei, arg_5709: GLboolean, arg_5710: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix4x2dv.?(arg_5706, arg_5707, arg_5708, arg_5709, arg_5710);
}
pub inline fn glProgramUniformMatrix4x2dvEXT(arg_5711: GLuint, arg_5712: GLint, arg_5713: GLsizei, arg_5714: GLboolean, arg_5715: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix4x2dvEXT.?(arg_5711, arg_5712, arg_5713, arg_5714, arg_5715);
}
pub inline fn glProgramUniformMatrix4x2fv(arg_5716: GLuint, arg_5717: GLint, arg_5718: GLsizei, arg_5719: GLboolean, arg_5720: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix4x2fv.?(arg_5716, arg_5717, arg_5718, arg_5719, arg_5720);
}
pub inline fn glProgramUniformMatrix4x2fvEXT(arg_5721: GLuint, arg_5722: GLint, arg_5723: GLsizei, arg_5724: GLboolean, arg_5725: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix4x2fvEXT.?(arg_5721, arg_5722, arg_5723, arg_5724, arg_5725);
}
pub inline fn glProgramUniformMatrix4x3dv(arg_5726: GLuint, arg_5727: GLint, arg_5728: GLsizei, arg_5729: GLboolean, arg_5730: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix4x3dv.?(arg_5726, arg_5727, arg_5728, arg_5729, arg_5730);
}
pub inline fn glProgramUniformMatrix4x3dvEXT(arg_5731: GLuint, arg_5732: GLint, arg_5733: GLsizei, arg_5734: GLboolean, arg_5735: [*c]const GLdouble) void {
    return glad_glProgramUniformMatrix4x3dvEXT.?(arg_5731, arg_5732, arg_5733, arg_5734, arg_5735);
}
pub inline fn glProgramUniformMatrix4x3fv(arg_5736: GLuint, arg_5737: GLint, arg_5738: GLsizei, arg_5739: GLboolean, arg_5740: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix4x3fv.?(arg_5736, arg_5737, arg_5738, arg_5739, arg_5740);
}
pub inline fn glProgramUniformMatrix4x3fvEXT(arg_5741: GLuint, arg_5742: GLint, arg_5743: GLsizei, arg_5744: GLboolean, arg_5745: [*c]const GLfloat) void {
    return glad_glProgramUniformMatrix4x3fvEXT.?(arg_5741, arg_5742, arg_5743, arg_5744, arg_5745);
}
pub inline fn glProgramUniformui64NV(arg_5746: GLuint, arg_5747: GLint, arg_5748: GLuint64EXT) void {
    return glad_glProgramUniformui64NV.?(arg_5746, arg_5747, arg_5748);
}
pub inline fn glProgramUniformui64vNV(arg_5749: GLuint, arg_5750: GLint, arg_5751: GLsizei, arg_5752: [*c]const GLuint64EXT) void {
    return glad_glProgramUniformui64vNV.?(arg_5749, arg_5750, arg_5751, arg_5752);
}
pub inline fn glProgramVertexLimitNV(arg_5753: GLenum, arg_5754: GLint) void {
    return glad_glProgramVertexLimitNV.?(arg_5753, arg_5754);
}
pub inline fn glProvokingVertex(arg_5755: GLenum) void {
    return glad_glProvokingVertex.?(arg_5755);
}
pub inline fn glProvokingVertexEXT(arg_5756: GLenum) void {
    return glad_glProvokingVertexEXT.?(arg_5756);
}
pub inline fn glPushClientAttribDefaultEXT(arg_5757: GLbitfield) void {
    return glad_glPushClientAttribDefaultEXT.?(arg_5757);
}
pub inline fn glPushDebugGroup(arg_5758: GLenum, arg_5759: GLuint, arg_5760: GLsizei, arg_5761: [*c]const GLchar) void {
    return glad_glPushDebugGroup.?(arg_5758, arg_5759, arg_5760, arg_5761);
}
pub inline fn glPushGroupMarkerEXT(arg_5762: GLsizei, arg_5763: [*c]const GLchar) void {
    return glad_glPushGroupMarkerEXT.?(arg_5762, arg_5763);
}
pub inline fn glQueryCounter(arg_5764: GLuint, arg_5765: GLenum) void {
    return glad_glQueryCounter.?(arg_5764, arg_5765);
}
pub inline fn glQueryMatrixxOES(arg_5766: [*c]GLfixed, arg_5767: [*c]GLint) GLbitfield {
    return glad_glQueryMatrixxOES.?(arg_5766, arg_5767);
}
pub inline fn glQueryObjectParameteruiAMD(arg_5768: GLenum, arg_5769: GLuint, arg_5770: GLenum, arg_5771: GLuint) void {
    return glad_glQueryObjectParameteruiAMD.?(arg_5768, arg_5769, arg_5770, arg_5771);
}
pub inline fn glQueryResourceNV(arg_5772: GLenum, arg_5773: GLint, arg_5774: GLuint, arg_5775: [*c]GLint) GLint {
    return glad_glQueryResourceNV.?(arg_5772, arg_5773, arg_5774, arg_5775);
}
pub inline fn glQueryResourceTagNV(arg_5776: GLint, arg_5777: [*c]const GLchar) void {
    return glad_glQueryResourceTagNV.?(arg_5776, arg_5777);
}
pub inline fn glRasterPos2xOES(arg_5778: GLfixed, arg_5779: GLfixed) void {
    return glad_glRasterPos2xOES.?(arg_5778, arg_5779);
}
pub inline fn glRasterPos2xvOES(arg_5780: [*c]const GLfixed) void {
    return glad_glRasterPos2xvOES.?(arg_5780);
}
pub inline fn glRasterPos3xOES(arg_5781: GLfixed, arg_5782: GLfixed, arg_5783: GLfixed) void {
    return glad_glRasterPos3xOES.?(arg_5781, arg_5782, arg_5783);
}
pub inline fn glRasterPos3xvOES(arg_5784: [*c]const GLfixed) void {
    return glad_glRasterPos3xvOES.?(arg_5784);
}
pub inline fn glRasterPos4xOES(arg_5785: GLfixed, arg_5786: GLfixed, arg_5787: GLfixed, arg_5788: GLfixed) void {
    return glad_glRasterPos4xOES.?(arg_5785, arg_5786, arg_5787, arg_5788);
}
pub inline fn glRasterPos4xvOES(arg_5789: [*c]const GLfixed) void {
    return glad_glRasterPos4xvOES.?(arg_5789);
}
pub inline fn glRasterSamplesEXT(arg_5790: GLuint, arg_5791: GLboolean) void {
    return glad_glRasterSamplesEXT.?(arg_5790, arg_5791);
}
pub inline fn glReadBuffer(arg_5792: GLenum) void {
    return glad_glReadBuffer.?(arg_5792);
}
pub inline fn glReadInstrumentsSGIX(arg_5793: GLint) void {
    return glad_glReadInstrumentsSGIX.?(arg_5793);
}
pub inline fn glReadPixels(arg_5794: GLint, arg_5795: GLint, arg_5796: GLsizei, arg_5797: GLsizei, arg_5798: GLenum, arg_5799: GLenum, arg_5800: ?*anyopaque) void {
    return glad_glReadPixels.?(arg_5794, arg_5795, arg_5796, arg_5797, arg_5798, arg_5799, arg_5800);
}
pub inline fn glReadnPixels(arg_5801: GLint, arg_5802: GLint, arg_5803: GLsizei, arg_5804: GLsizei, arg_5805: GLenum, arg_5806: GLenum, arg_5807: GLsizei, arg_5808: ?*anyopaque) void {
    return glad_glReadnPixels.?(arg_5801, arg_5802, arg_5803, arg_5804, arg_5805, arg_5806, arg_5807, arg_5808);
}
pub inline fn glReadnPixelsARB(arg_5809: GLint, arg_5810: GLint, arg_5811: GLsizei, arg_5812: GLsizei, arg_5813: GLenum, arg_5814: GLenum, arg_5815: GLsizei, arg_5816: ?*anyopaque) void {
    return glad_glReadnPixelsARB.?(arg_5809, arg_5810, arg_5811, arg_5812, arg_5813, arg_5814, arg_5815, arg_5816);
}
pub inline fn glRectxOES(arg_5817: GLfixed, arg_5818: GLfixed, arg_5819: GLfixed, arg_5820: GLfixed) void {
    return glad_glRectxOES.?(arg_5817, arg_5818, arg_5819, arg_5820);
}
pub inline fn glRectxvOES(arg_5821: [*c]const GLfixed, arg_5822: [*c]const GLfixed) void {
    return glad_glRectxvOES.?(arg_5821, arg_5822);
}
pub inline fn glReferencePlaneSGIX(arg_5823: [*c]const GLdouble) void {
    return glad_glReferencePlaneSGIX.?(arg_5823);
}
pub inline fn glReleaseKeyedMutexWin32EXT(arg_5824: GLuint, arg_5825: GLuint64) GLboolean {
    return glad_glReleaseKeyedMutexWin32EXT.?(arg_5824, arg_5825);
}
pub inline fn glReleaseShaderCompiler() void {
    return glad_glReleaseShaderCompiler.?();
}
pub inline fn glRenderGpuMaskNV(arg_5826: GLbitfield) void {
    return glad_glRenderGpuMaskNV.?(arg_5826);
}
pub inline fn glRenderbufferStorage(arg_5827: GLenum, arg_5828: GLenum, arg_5829: GLsizei, arg_5830: GLsizei) void {
    return glad_glRenderbufferStorage.?(arg_5827, arg_5828, arg_5829, arg_5830);
}
pub inline fn glRenderbufferStorageEXT(arg_5831: GLenum, arg_5832: GLenum, arg_5833: GLsizei, arg_5834: GLsizei) void {
    return glad_glRenderbufferStorageEXT.?(arg_5831, arg_5832, arg_5833, arg_5834);
}
pub inline fn glRenderbufferStorageMultisample(arg_5835: GLenum, arg_5836: GLsizei, arg_5837: GLenum, arg_5838: GLsizei, arg_5839: GLsizei) void {
    return glad_glRenderbufferStorageMultisample.?(arg_5835, arg_5836, arg_5837, arg_5838, arg_5839);
}
pub inline fn glRenderbufferStorageMultisampleAdvancedAMD(arg_5840: GLenum, arg_5841: GLsizei, arg_5842: GLsizei, arg_5843: GLenum, arg_5844: GLsizei, arg_5845: GLsizei) void {
    return glad_glRenderbufferStorageMultisampleAdvancedAMD.?(arg_5840, arg_5841, arg_5842, arg_5843, arg_5844, arg_5845);
}
pub inline fn glRenderbufferStorageMultisampleCoverageNV(arg_5846: GLenum, arg_5847: GLsizei, arg_5848: GLsizei, arg_5849: GLenum, arg_5850: GLsizei, arg_5851: GLsizei) void {
    return glad_glRenderbufferStorageMultisampleCoverageNV.?(arg_5846, arg_5847, arg_5848, arg_5849, arg_5850, arg_5851);
}
pub inline fn glRenderbufferStorageMultisampleEXT(arg_5852: GLenum, arg_5853: GLsizei, arg_5854: GLenum, arg_5855: GLsizei, arg_5856: GLsizei) void {
    return glad_glRenderbufferStorageMultisampleEXT.?(arg_5852, arg_5853, arg_5854, arg_5855, arg_5856);
}
pub inline fn glReplacementCodePointerSUN(arg_5857: GLenum, arg_5858: GLsizei, arg_5859: [*c]?*const anyopaque) void {
    return glad_glReplacementCodePointerSUN.?(arg_5857, arg_5858, arg_5859);
}
pub inline fn glReplacementCodeubSUN(arg_5860: GLubyte) void {
    return glad_glReplacementCodeubSUN.?(arg_5860);
}
pub inline fn glReplacementCodeubvSUN(arg_5861: [*c]const GLubyte) void {
    return glad_glReplacementCodeubvSUN.?(arg_5861);
}
pub inline fn glReplacementCodeuiColor3fVertex3fSUN(arg_5862: GLuint, arg_5863: GLfloat, arg_5864: GLfloat, arg_5865: GLfloat, arg_5866: GLfloat, arg_5867: GLfloat, arg_5868: GLfloat) void {
    return glad_glReplacementCodeuiColor3fVertex3fSUN.?(arg_5862, arg_5863, arg_5864, arg_5865, arg_5866, arg_5867, arg_5868);
}
pub inline fn glReplacementCodeuiColor3fVertex3fvSUN(arg_5869: [*c]const GLuint, arg_5870: [*c]const GLfloat, arg_5871: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiColor3fVertex3fvSUN.?(arg_5869, arg_5870, arg_5871);
}
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fSUN(arg_5872: GLuint, arg_5873: GLfloat, arg_5874: GLfloat, arg_5875: GLfloat, arg_5876: GLfloat, arg_5877: GLfloat, arg_5878: GLfloat, arg_5879: GLfloat, arg_5880: GLfloat, arg_5881: GLfloat, arg_5882: GLfloat) void {
    return glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN.?(arg_5872, arg_5873, arg_5874, arg_5875, arg_5876, arg_5877, arg_5878, arg_5879, arg_5880, arg_5881, arg_5882);
}
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fvSUN(arg_5883: [*c]const GLuint, arg_5884: [*c]const GLfloat, arg_5885: [*c]const GLfloat, arg_5886: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN.?(arg_5883, arg_5884, arg_5885, arg_5886);
}
pub inline fn glReplacementCodeuiColor4ubVertex3fSUN(arg_5887: GLuint, arg_5888: GLubyte, arg_5889: GLubyte, arg_5890: GLubyte, arg_5891: GLubyte, arg_5892: GLfloat, arg_5893: GLfloat, arg_5894: GLfloat) void {
    return glad_glReplacementCodeuiColor4ubVertex3fSUN.?(arg_5887, arg_5888, arg_5889, arg_5890, arg_5891, arg_5892, arg_5893, arg_5894);
}
pub inline fn glReplacementCodeuiColor4ubVertex3fvSUN(arg_5895: [*c]const GLuint, arg_5896: [*c]const GLubyte, arg_5897: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiColor4ubVertex3fvSUN.?(arg_5895, arg_5896, arg_5897);
}
pub inline fn glReplacementCodeuiNormal3fVertex3fSUN(arg_5898: GLuint, arg_5899: GLfloat, arg_5900: GLfloat, arg_5901: GLfloat, arg_5902: GLfloat, arg_5903: GLfloat, arg_5904: GLfloat) void {
    return glad_glReplacementCodeuiNormal3fVertex3fSUN.?(arg_5898, arg_5899, arg_5900, arg_5901, arg_5902, arg_5903, arg_5904);
}
pub inline fn glReplacementCodeuiNormal3fVertex3fvSUN(arg_5905: [*c]const GLuint, arg_5906: [*c]const GLfloat, arg_5907: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiNormal3fVertex3fvSUN.?(arg_5905, arg_5906, arg_5907);
}
pub inline fn glReplacementCodeuiSUN(arg_5908: GLuint) void {
    return glad_glReplacementCodeuiSUN.?(arg_5908);
}
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(arg_5909: GLuint, arg_5910: GLfloat, arg_5911: GLfloat, arg_5912: GLfloat, arg_5913: GLfloat, arg_5914: GLfloat, arg_5915: GLfloat, arg_5916: GLfloat, arg_5917: GLfloat, arg_5918: GLfloat, arg_5919: GLfloat, arg_5920: GLfloat, arg_5921: GLfloat) void {
    return glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.?(arg_5909, arg_5910, arg_5911, arg_5912, arg_5913, arg_5914, arg_5915, arg_5916, arg_5917, arg_5918, arg_5919, arg_5920, arg_5921);
}
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(arg_5922: [*c]const GLuint, arg_5923: [*c]const GLfloat, arg_5924: [*c]const GLfloat, arg_5925: [*c]const GLfloat, arg_5926: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.?(arg_5922, arg_5923, arg_5924, arg_5925, arg_5926);
}
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(arg_5927: GLuint, arg_5928: GLfloat, arg_5929: GLfloat, arg_5930: GLfloat, arg_5931: GLfloat, arg_5932: GLfloat, arg_5933: GLfloat, arg_5934: GLfloat, arg_5935: GLfloat) void {
    return glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.?(arg_5927, arg_5928, arg_5929, arg_5930, arg_5931, arg_5932, arg_5933, arg_5934, arg_5935);
}
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(arg_5936: [*c]const GLuint, arg_5937: [*c]const GLfloat, arg_5938: [*c]const GLfloat, arg_5939: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.?(arg_5936, arg_5937, arg_5938, arg_5939);
}
pub inline fn glReplacementCodeuiTexCoord2fVertex3fSUN(arg_5940: GLuint, arg_5941: GLfloat, arg_5942: GLfloat, arg_5943: GLfloat, arg_5944: GLfloat, arg_5945: GLfloat) void {
    return glad_glReplacementCodeuiTexCoord2fVertex3fSUN.?(arg_5940, arg_5941, arg_5942, arg_5943, arg_5944, arg_5945);
}
pub inline fn glReplacementCodeuiTexCoord2fVertex3fvSUN(arg_5946: [*c]const GLuint, arg_5947: [*c]const GLfloat, arg_5948: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiTexCoord2fVertex3fvSUN.?(arg_5946, arg_5947, arg_5948);
}
pub inline fn glReplacementCodeuiVertex3fSUN(arg_5949: GLuint, arg_5950: GLfloat, arg_5951: GLfloat, arg_5952: GLfloat) void {
    return glad_glReplacementCodeuiVertex3fSUN.?(arg_5949, arg_5950, arg_5951, arg_5952);
}
pub inline fn glReplacementCodeuiVertex3fvSUN(arg_5953: [*c]const GLuint, arg_5954: [*c]const GLfloat) void {
    return glad_glReplacementCodeuiVertex3fvSUN.?(arg_5953, arg_5954);
}
pub inline fn glReplacementCodeuivSUN(arg_5955: [*c]const GLuint) void {
    return glad_glReplacementCodeuivSUN.?(arg_5955);
}
pub inline fn glReplacementCodeusSUN(arg_5956: GLushort) void {
    return glad_glReplacementCodeusSUN.?(arg_5956);
}
pub inline fn glReplacementCodeusvSUN(arg_5957: [*c]const GLushort) void {
    return glad_glReplacementCodeusvSUN.?(arg_5957);
}
pub inline fn glRequestResidentProgramsNV(arg_5958: GLsizei, arg_5959: [*c]const GLuint) void {
    return glad_glRequestResidentProgramsNV.?(arg_5958, arg_5959);
}
pub inline fn glResetHistogramEXT(arg_5960: GLenum) void {
    return glad_glResetHistogramEXT.?(arg_5960);
}
pub inline fn glResetMemoryObjectParameterNV(arg_5961: GLuint, arg_5962: GLenum) void {
    return glad_glResetMemoryObjectParameterNV.?(arg_5961, arg_5962);
}
pub inline fn glResetMinmaxEXT(arg_5963: GLenum) void {
    return glad_glResetMinmaxEXT.?(arg_5963);
}
pub inline fn glResizeBuffersMESA() void {
    return glad_glResizeBuffersMESA.?();
}
pub inline fn glResolveDepthValuesNV() void {
    return glad_glResolveDepthValuesNV.?();
}
pub inline fn glResumeTransformFeedback() void {
    return glad_glResumeTransformFeedback.?();
}
pub inline fn glResumeTransformFeedbackNV() void {
    return glad_glResumeTransformFeedbackNV.?();
}
pub inline fn glRotatexOES(arg_5964: GLfixed, arg_5965: GLfixed, arg_5966: GLfixed, arg_5967: GLfixed) void {
    return glad_glRotatexOES.?(arg_5964, arg_5965, arg_5966, arg_5967);
}
pub inline fn glSampleCoverage(arg_5968: GLfloat, arg_5969: GLboolean) void {
    return glad_glSampleCoverage.?(arg_5968, arg_5969);
}
pub inline fn glSampleCoverageARB(arg_5970: GLfloat, arg_5971: GLboolean) void {
    return glad_glSampleCoverageARB.?(arg_5970, arg_5971);
}
pub inline fn glSampleMapATI(arg_5972: GLuint, arg_5973: GLuint, arg_5974: GLenum) void {
    return glad_glSampleMapATI.?(arg_5972, arg_5973, arg_5974);
}
pub inline fn glSampleMaskEXT(arg_5975: GLclampf, arg_5976: GLboolean) void {
    return glad_glSampleMaskEXT.?(arg_5975, arg_5976);
}
pub inline fn glSampleMaskIndexedNV(arg_5977: GLuint, arg_5978: GLbitfield) void {
    return glad_glSampleMaskIndexedNV.?(arg_5977, arg_5978);
}
pub inline fn glSampleMaskSGIS(arg_5979: GLclampf, arg_5980: GLboolean) void {
    return glad_glSampleMaskSGIS.?(arg_5979, arg_5980);
}
pub inline fn glSampleMaski(arg_5981: GLuint, arg_5982: GLbitfield) void {
    return glad_glSampleMaski.?(arg_5981, arg_5982);
}
pub inline fn glSamplePatternEXT(arg_5983: GLenum) void {
    return glad_glSamplePatternEXT.?(arg_5983);
}
pub inline fn glSamplePatternSGIS(arg_5984: GLenum) void {
    return glad_glSamplePatternSGIS.?(arg_5984);
}
pub inline fn glSamplerParameterIiv(arg_5985: GLuint, arg_5986: GLenum, arg_5987: [*c]const GLint) void {
    return glad_glSamplerParameterIiv.?(arg_5985, arg_5986, arg_5987);
}
pub inline fn glSamplerParameterIuiv(arg_5988: GLuint, arg_5989: GLenum, arg_5990: [*c]const GLuint) void {
    return glad_glSamplerParameterIuiv.?(arg_5988, arg_5989, arg_5990);
}
pub inline fn glSamplerParameterf(arg_5991: GLuint, arg_5992: GLenum, arg_5993: GLfloat) void {
    return glad_glSamplerParameterf.?(arg_5991, arg_5992, arg_5993);
}
pub inline fn glSamplerParameterfv(arg_5994: GLuint, arg_5995: GLenum, arg_5996: [*c]const GLfloat) void {
    return glad_glSamplerParameterfv.?(arg_5994, arg_5995, arg_5996);
}
pub inline fn glSamplerParameteri(arg_5997: GLuint, arg_5998: GLenum, arg_5999: GLint) void {
    return glad_glSamplerParameteri.?(arg_5997, arg_5998, arg_5999);
}
pub inline fn glSamplerParameteriv(arg_6000: GLuint, arg_6001: GLenum, arg_6002: [*c]const GLint) void {
    return glad_glSamplerParameteriv.?(arg_6000, arg_6001, arg_6002);
}
pub inline fn glScalexOES(arg_6003: GLfixed, arg_6004: GLfixed, arg_6005: GLfixed) void {
    return glad_glScalexOES.?(arg_6003, arg_6004, arg_6005);
}
pub inline fn glScissor(arg_6006: GLint, arg_6007: GLint, arg_6008: GLsizei, arg_6009: GLsizei) void {
    return glad_glScissor.?(arg_6006, arg_6007, arg_6008, arg_6009);
}
pub inline fn glScissorArrayv(arg_6010: GLuint, arg_6011: GLsizei, arg_6012: [*c]const GLint) void {
    return glad_glScissorArrayv.?(arg_6010, arg_6011, arg_6012);
}
pub inline fn glScissorExclusiveArrayvNV(arg_6013: GLuint, arg_6014: GLsizei, arg_6015: [*c]const GLint) void {
    return glad_glScissorExclusiveArrayvNV.?(arg_6013, arg_6014, arg_6015);
}
pub inline fn glScissorExclusiveNV(arg_6016: GLint, arg_6017: GLint, arg_6018: GLsizei, arg_6019: GLsizei) void {
    return glad_glScissorExclusiveNV.?(arg_6016, arg_6017, arg_6018, arg_6019);
}
pub inline fn glScissorIndexed(arg_6020: GLuint, arg_6021: GLint, arg_6022: GLint, arg_6023: GLsizei, arg_6024: GLsizei) void {
    return glad_glScissorIndexed.?(arg_6020, arg_6021, arg_6022, arg_6023, arg_6024);
}
pub inline fn glScissorIndexedv(arg_6025: GLuint, arg_6026: [*c]const GLint) void {
    return glad_glScissorIndexedv.?(arg_6025, arg_6026);
}
pub inline fn glSecondaryColor3bEXT(arg_6027: GLbyte, arg_6028: GLbyte, arg_6029: GLbyte) void {
    return glad_glSecondaryColor3bEXT.?(arg_6027, arg_6028, arg_6029);
}
pub inline fn glSecondaryColor3bvEXT(arg_6030: [*c]const GLbyte) void {
    return glad_glSecondaryColor3bvEXT.?(arg_6030);
}
pub inline fn glSecondaryColor3dEXT(arg_6031: GLdouble, arg_6032: GLdouble, arg_6033: GLdouble) void {
    return glad_glSecondaryColor3dEXT.?(arg_6031, arg_6032, arg_6033);
}
pub inline fn glSecondaryColor3dvEXT(arg_6034: [*c]const GLdouble) void {
    return glad_glSecondaryColor3dvEXT.?(arg_6034);
}
pub inline fn glSecondaryColor3fEXT(arg_6035: GLfloat, arg_6036: GLfloat, arg_6037: GLfloat) void {
    return glad_glSecondaryColor3fEXT.?(arg_6035, arg_6036, arg_6037);
}
pub inline fn glSecondaryColor3fvEXT(arg_6038: [*c]const GLfloat) void {
    return glad_glSecondaryColor3fvEXT.?(arg_6038);
}
pub inline fn glSecondaryColor3hNV(arg_6039: GLhalfNV, arg_6040: GLhalfNV, arg_6041: GLhalfNV) void {
    return glad_glSecondaryColor3hNV.?(arg_6039, arg_6040, arg_6041);
}
pub inline fn glSecondaryColor3hvNV(arg_6042: [*c]const GLhalfNV) void {
    return glad_glSecondaryColor3hvNV.?(arg_6042);
}
pub inline fn glSecondaryColor3iEXT(arg_6043: GLint, arg_6044: GLint, arg_6045: GLint) void {
    return glad_glSecondaryColor3iEXT.?(arg_6043, arg_6044, arg_6045);
}
pub inline fn glSecondaryColor3ivEXT(arg_6046: [*c]const GLint) void {
    return glad_glSecondaryColor3ivEXT.?(arg_6046);
}
pub inline fn glSecondaryColor3sEXT(arg_6047: GLshort, arg_6048: GLshort, arg_6049: GLshort) void {
    return glad_glSecondaryColor3sEXT.?(arg_6047, arg_6048, arg_6049);
}
pub inline fn glSecondaryColor3svEXT(arg_6050: [*c]const GLshort) void {
    return glad_glSecondaryColor3svEXT.?(arg_6050);
}
pub inline fn glSecondaryColor3ubEXT(arg_6051: GLubyte, arg_6052: GLubyte, arg_6053: GLubyte) void {
    return glad_glSecondaryColor3ubEXT.?(arg_6051, arg_6052, arg_6053);
}
pub inline fn glSecondaryColor3ubvEXT(arg_6054: [*c]const GLubyte) void {
    return glad_glSecondaryColor3ubvEXT.?(arg_6054);
}
pub inline fn glSecondaryColor3uiEXT(arg_6055: GLuint, arg_6056: GLuint, arg_6057: GLuint) void {
    return glad_glSecondaryColor3uiEXT.?(arg_6055, arg_6056, arg_6057);
}
pub inline fn glSecondaryColor3uivEXT(arg_6058: [*c]const GLuint) void {
    return glad_glSecondaryColor3uivEXT.?(arg_6058);
}
pub inline fn glSecondaryColor3usEXT(arg_6059: GLushort, arg_6060: GLushort, arg_6061: GLushort) void {
    return glad_glSecondaryColor3usEXT.?(arg_6059, arg_6060, arg_6061);
}
pub inline fn glSecondaryColor3usvEXT(arg_6062: [*c]const GLushort) void {
    return glad_glSecondaryColor3usvEXT.?(arg_6062);
}
pub inline fn glSecondaryColorFormatNV(arg_6063: GLint, arg_6064: GLenum, arg_6065: GLsizei) void {
    return glad_glSecondaryColorFormatNV.?(arg_6063, arg_6064, arg_6065);
}
pub inline fn glSecondaryColorPointerEXT(arg_6066: GLint, arg_6067: GLenum, arg_6068: GLsizei, arg_6069: ?*const anyopaque) void {
    return glad_glSecondaryColorPointerEXT.?(arg_6066, arg_6067, arg_6068, arg_6069);
}
pub inline fn glSecondaryColorPointerListIBM(arg_6070: GLint, arg_6071: GLenum, arg_6072: GLint, arg_6073: [*c]?*const anyopaque, arg_6074: GLint) void {
    return glad_glSecondaryColorPointerListIBM.?(arg_6070, arg_6071, arg_6072, arg_6073, arg_6074);
}
pub inline fn glSelectPerfMonitorCountersAMD(arg_6075: GLuint, arg_6076: GLboolean, arg_6077: GLuint, arg_6078: GLint, arg_6079: [*c]GLuint) void {
    return glad_glSelectPerfMonitorCountersAMD.?(arg_6075, arg_6076, arg_6077, arg_6078, arg_6079);
}
pub inline fn glSemaphoreParameterivNV(arg_6080: GLuint, arg_6081: GLenum, arg_6082: [*c]const GLint) void {
    return glad_glSemaphoreParameterivNV.?(arg_6080, arg_6081, arg_6082);
}
pub inline fn glSemaphoreParameterui64vEXT(arg_6083: GLuint, arg_6084: GLenum, arg_6085: [*c]const GLuint64) void {
    return glad_glSemaphoreParameterui64vEXT.?(arg_6083, arg_6084, arg_6085);
}
pub inline fn glSeparableFilter2DEXT(arg_6086: GLenum, arg_6087: GLenum, arg_6088: GLsizei, arg_6089: GLsizei, arg_6090: GLenum, arg_6091: GLenum, arg_6092: ?*const anyopaque, arg_6093: ?*const anyopaque) void {
    return glad_glSeparableFilter2DEXT.?(arg_6086, arg_6087, arg_6088, arg_6089, arg_6090, arg_6091, arg_6092, arg_6093);
}
pub inline fn glSetFenceAPPLE(arg_6094: GLuint) void {
    return glad_glSetFenceAPPLE.?(arg_6094);
}
pub inline fn glSetFenceNV(arg_6095: GLuint, arg_6096: GLenum) void {
    return glad_glSetFenceNV.?(arg_6095, arg_6096);
}
pub inline fn glSetFragmentShaderConstantATI(arg_6097: GLuint, arg_6098: [*c]const GLfloat) void {
    return glad_glSetFragmentShaderConstantATI.?(arg_6097, arg_6098);
}
pub inline fn glSetInvariantEXT(arg_6099: GLuint, arg_6100: GLenum, arg_6101: ?*const anyopaque) void {
    return glad_glSetInvariantEXT.?(arg_6099, arg_6100, arg_6101);
}
pub inline fn glSetLocalConstantEXT(arg_6102: GLuint, arg_6103: GLenum, arg_6104: ?*const anyopaque) void {
    return glad_glSetLocalConstantEXT.?(arg_6102, arg_6103, arg_6104);
}
pub inline fn glSetMultisamplefvAMD(arg_6105: GLenum, arg_6106: GLuint, arg_6107: [*c]const GLfloat) void {
    return glad_glSetMultisamplefvAMD.?(arg_6105, arg_6106, arg_6107);
}
pub inline fn glShaderBinary(arg_6108: GLsizei, arg_6109: [*c]const GLuint, arg_6110: GLenum, arg_6111: ?*const anyopaque, arg_6112: GLsizei) void {
    return glad_glShaderBinary.?(arg_6108, arg_6109, arg_6110, arg_6111, arg_6112);
}
pub inline fn glShaderOp1EXT(arg_6113: GLenum, arg_6114: GLuint, arg_6115: GLuint) void {
    return glad_glShaderOp1EXT.?(arg_6113, arg_6114, arg_6115);
}
pub inline fn glShaderOp2EXT(arg_6116: GLenum, arg_6117: GLuint, arg_6118: GLuint, arg_6119: GLuint) void {
    return glad_glShaderOp2EXT.?(arg_6116, arg_6117, arg_6118, arg_6119);
}
pub inline fn glShaderOp3EXT(arg_6120: GLenum, arg_6121: GLuint, arg_6122: GLuint, arg_6123: GLuint, arg_6124: GLuint) void {
    return glad_glShaderOp3EXT.?(arg_6120, arg_6121, arg_6122, arg_6123, arg_6124);
}
pub inline fn glShaderSource(arg_6125: GLuint, arg_6126: GLsizei, arg_6127: [*c]const [*c]const GLchar, arg_6128: [*c]const GLint) void {
    return glad_glShaderSource.?(arg_6125, arg_6126, arg_6127, arg_6128);
}
pub inline fn glShaderSourceARB(arg_6129: GLhandleARB, arg_6130: GLsizei, arg_6131: [*c][*c]const GLcharARB, arg_6132: [*c]const GLint) void {
    return glad_glShaderSourceARB.?(arg_6129, arg_6130, arg_6131, arg_6132);
}
pub inline fn glShaderStorageBlockBinding(arg_6133: GLuint, arg_6134: GLuint, arg_6135: GLuint) void {
    return glad_glShaderStorageBlockBinding.?(arg_6133, arg_6134, arg_6135);
}
pub inline fn glShadingRateImageBarrierNV(arg_6136: GLboolean) void {
    return glad_glShadingRateImageBarrierNV.?(arg_6136);
}
pub inline fn glShadingRateImagePaletteNV(arg_6137: GLuint, arg_6138: GLuint, arg_6139: GLsizei, arg_6140: [*c]const GLenum) void {
    return glad_glShadingRateImagePaletteNV.?(arg_6137, arg_6138, arg_6139, arg_6140);
}
pub inline fn glShadingRateSampleOrderCustomNV(arg_6141: GLenum, arg_6142: GLuint, arg_6143: [*c]const GLint) void {
    return glad_glShadingRateSampleOrderCustomNV.?(arg_6141, arg_6142, arg_6143);
}
pub inline fn glShadingRateSampleOrderNV(arg_6144: GLenum) void {
    return glad_glShadingRateSampleOrderNV.?(arg_6144);
}
pub inline fn glSharpenTexFuncSGIS(arg_6145: GLenum, arg_6146: GLsizei, arg_6147: [*c]const GLfloat) void {
    return glad_glSharpenTexFuncSGIS.?(arg_6145, arg_6146, arg_6147);
}
pub inline fn glSignalSemaphoreEXT(arg_6148: GLuint, arg_6149: GLuint, arg_6150: [*c]const GLuint, arg_6151: GLuint, arg_6152: [*c]const GLuint, arg_6153: [*c]const GLenum) void {
    return glad_glSignalSemaphoreEXT.?(arg_6148, arg_6149, arg_6150, arg_6151, arg_6152, arg_6153);
}
pub inline fn glSignalSemaphoreui64NVX(arg_6154: GLuint, arg_6155: GLsizei, arg_6156: [*c]const GLuint, arg_6157: [*c]const GLuint64) void {
    return glad_glSignalSemaphoreui64NVX.?(arg_6154, arg_6155, arg_6156, arg_6157);
}
pub inline fn glSignalVkFenceNV(arg_6158: GLuint64) void {
    return glad_glSignalVkFenceNV.?(arg_6158);
}
pub inline fn glSignalVkSemaphoreNV(arg_6159: GLuint64) void {
    return glad_glSignalVkSemaphoreNV.?(arg_6159);
}
pub inline fn glSpecializeShader(arg_6160: GLuint, arg_6161: [*c]const GLchar, arg_6162: GLuint, arg_6163: [*c]const GLuint, arg_6164: [*c]const GLuint) void {
    return glad_glSpecializeShader.?(arg_6160, arg_6161, arg_6162, arg_6163, arg_6164);
}
pub inline fn glSpecializeShaderARB(arg_6165: GLuint, arg_6166: [*c]const GLchar, arg_6167: GLuint, arg_6168: [*c]const GLuint, arg_6169: [*c]const GLuint) void {
    return glad_glSpecializeShaderARB.?(arg_6165, arg_6166, arg_6167, arg_6168, arg_6169);
}
pub inline fn glSpriteParameterfSGIX(arg_6170: GLenum, arg_6171: GLfloat) void {
    return glad_glSpriteParameterfSGIX.?(arg_6170, arg_6171);
}
pub inline fn glSpriteParameterfvSGIX(arg_6172: GLenum, arg_6173: [*c]const GLfloat) void {
    return glad_glSpriteParameterfvSGIX.?(arg_6172, arg_6173);
}
pub inline fn glSpriteParameteriSGIX(arg_6174: GLenum, arg_6175: GLint) void {
    return glad_glSpriteParameteriSGIX.?(arg_6174, arg_6175);
}
pub inline fn glSpriteParameterivSGIX(arg_6176: GLenum, arg_6177: [*c]const GLint) void {
    return glad_glSpriteParameterivSGIX.?(arg_6176, arg_6177);
}
pub inline fn glStartInstrumentsSGIX() void {
    return glad_glStartInstrumentsSGIX.?();
}
pub inline fn glStateCaptureNV(arg_6178: GLuint, arg_6179: GLenum) void {
    return glad_glStateCaptureNV.?(arg_6178, arg_6179);
}
pub inline fn glStencilClearTagEXT(arg_6180: GLsizei, arg_6181: GLuint) void {
    return glad_glStencilClearTagEXT.?(arg_6180, arg_6181);
}
pub inline fn glStencilFillPathInstancedNV(arg_6182: GLsizei, arg_6183: GLenum, arg_6184: ?*const anyopaque, arg_6185: GLuint, arg_6186: GLenum, arg_6187: GLuint, arg_6188: GLenum, arg_6189: [*c]const GLfloat) void {
    return glad_glStencilFillPathInstancedNV.?(arg_6182, arg_6183, arg_6184, arg_6185, arg_6186, arg_6187, arg_6188, arg_6189);
}
pub inline fn glStencilFillPathNV(arg_6190: GLuint, arg_6191: GLenum, arg_6192: GLuint) void {
    return glad_glStencilFillPathNV.?(arg_6190, arg_6191, arg_6192);
}
pub inline fn glStencilFunc(arg_6193: GLenum, arg_6194: GLint, arg_6195: GLuint) void {
    return glad_glStencilFunc.?(arg_6193, arg_6194, arg_6195);
}
pub inline fn glStencilFuncSeparate(arg_6196: GLenum, arg_6197: GLenum, arg_6198: GLint, arg_6199: GLuint) void {
    return glad_glStencilFuncSeparate.?(arg_6196, arg_6197, arg_6198, arg_6199);
}
pub inline fn glStencilFuncSeparateATI(arg_6200: GLenum, arg_6201: GLenum, arg_6202: GLint, arg_6203: GLuint) void {
    return glad_glStencilFuncSeparateATI.?(arg_6200, arg_6201, arg_6202, arg_6203);
}
pub inline fn glStencilMask(arg_6204: GLuint) void {
    return glad_glStencilMask.?(arg_6204);
}
pub inline fn glStencilMaskSeparate(arg_6205: GLenum, arg_6206: GLuint) void {
    return glad_glStencilMaskSeparate.?(arg_6205, arg_6206);
}
pub inline fn glStencilOp(arg_6207: GLenum, arg_6208: GLenum, arg_6209: GLenum) void {
    return glad_glStencilOp.?(arg_6207, arg_6208, arg_6209);
}
pub inline fn glStencilOpSeparate(arg_6210: GLenum, arg_6211: GLenum, arg_6212: GLenum, arg_6213: GLenum) void {
    return glad_glStencilOpSeparate.?(arg_6210, arg_6211, arg_6212, arg_6213);
}
pub inline fn glStencilOpSeparateATI(arg_6214: GLenum, arg_6215: GLenum, arg_6216: GLenum, arg_6217: GLenum) void {
    return glad_glStencilOpSeparateATI.?(arg_6214, arg_6215, arg_6216, arg_6217);
}
pub inline fn glStencilOpValueAMD(arg_6218: GLenum, arg_6219: GLuint) void {
    return glad_glStencilOpValueAMD.?(arg_6218, arg_6219);
}
pub inline fn glStencilStrokePathInstancedNV(arg_6220: GLsizei, arg_6221: GLenum, arg_6222: ?*const anyopaque, arg_6223: GLuint, arg_6224: GLint, arg_6225: GLuint, arg_6226: GLenum, arg_6227: [*c]const GLfloat) void {
    return glad_glStencilStrokePathInstancedNV.?(arg_6220, arg_6221, arg_6222, arg_6223, arg_6224, arg_6225, arg_6226, arg_6227);
}
pub inline fn glStencilStrokePathNV(arg_6228: GLuint, arg_6229: GLint, arg_6230: GLuint) void {
    return glad_glStencilStrokePathNV.?(arg_6228, arg_6229, arg_6230);
}
pub inline fn glStencilThenCoverFillPathInstancedNV(arg_6231: GLsizei, arg_6232: GLenum, arg_6233: ?*const anyopaque, arg_6234: GLuint, arg_6235: GLenum, arg_6236: GLuint, arg_6237: GLenum, arg_6238: GLenum, arg_6239: [*c]const GLfloat) void {
    return glad_glStencilThenCoverFillPathInstancedNV.?(arg_6231, arg_6232, arg_6233, arg_6234, arg_6235, arg_6236, arg_6237, arg_6238, arg_6239);
}
pub inline fn glStencilThenCoverFillPathNV(arg_6240: GLuint, arg_6241: GLenum, arg_6242: GLuint, arg_6243: GLenum) void {
    return glad_glStencilThenCoverFillPathNV.?(arg_6240, arg_6241, arg_6242, arg_6243);
}
pub inline fn glStencilThenCoverStrokePathInstancedNV(arg_6244: GLsizei, arg_6245: GLenum, arg_6246: ?*const anyopaque, arg_6247: GLuint, arg_6248: GLint, arg_6249: GLuint, arg_6250: GLenum, arg_6251: GLenum, arg_6252: [*c]const GLfloat) void {
    return glad_glStencilThenCoverStrokePathInstancedNV.?(arg_6244, arg_6245, arg_6246, arg_6247, arg_6248, arg_6249, arg_6250, arg_6251, arg_6252);
}
pub inline fn glStencilThenCoverStrokePathNV(arg_6253: GLuint, arg_6254: GLint, arg_6255: GLuint, arg_6256: GLenum) void {
    return glad_glStencilThenCoverStrokePathNV.?(arg_6253, arg_6254, arg_6255, arg_6256);
}
pub inline fn glStopInstrumentsSGIX(arg_6257: GLint) void {
    return glad_glStopInstrumentsSGIX.?(arg_6257);
}
pub inline fn glStringMarkerGREMEDY(arg_6258: GLsizei, arg_6259: ?*const anyopaque) void {
    return glad_glStringMarkerGREMEDY.?(arg_6258, arg_6259);
}
pub inline fn glSubpixelPrecisionBiasNV(arg_6260: GLuint, arg_6261: GLuint) void {
    return glad_glSubpixelPrecisionBiasNV.?(arg_6260, arg_6261);
}
pub inline fn glSwizzleEXT(arg_6262: GLuint, arg_6263: GLuint, arg_6264: GLenum, arg_6265: GLenum, arg_6266: GLenum, arg_6267: GLenum) void {
    return glad_glSwizzleEXT.?(arg_6262, arg_6263, arg_6264, arg_6265, arg_6266, arg_6267);
}
pub inline fn glSyncTextureINTEL(arg_6268: GLuint) void {
    return glad_glSyncTextureINTEL.?(arg_6268);
}
pub inline fn glTagSampleBufferSGIX() void {
    return glad_glTagSampleBufferSGIX.?();
}
pub inline fn glTangent3bEXT(arg_6269: GLbyte, arg_6270: GLbyte, arg_6271: GLbyte) void {
    return glad_glTangent3bEXT.?(arg_6269, arg_6270, arg_6271);
}
pub inline fn glTangent3bvEXT(arg_6272: [*c]const GLbyte) void {
    return glad_glTangent3bvEXT.?(arg_6272);
}
pub inline fn glTangent3dEXT(arg_6273: GLdouble, arg_6274: GLdouble, arg_6275: GLdouble) void {
    return glad_glTangent3dEXT.?(arg_6273, arg_6274, arg_6275);
}
pub inline fn glTangent3dvEXT(arg_6276: [*c]const GLdouble) void {
    return glad_glTangent3dvEXT.?(arg_6276);
}
pub inline fn glTangent3fEXT(arg_6277: GLfloat, arg_6278: GLfloat, arg_6279: GLfloat) void {
    return glad_glTangent3fEXT.?(arg_6277, arg_6278, arg_6279);
}
pub inline fn glTangent3fvEXT(arg_6280: [*c]const GLfloat) void {
    return glad_glTangent3fvEXT.?(arg_6280);
}
pub inline fn glTangent3iEXT(arg_6281: GLint, arg_6282: GLint, arg_6283: GLint) void {
    return glad_glTangent3iEXT.?(arg_6281, arg_6282, arg_6283);
}
pub inline fn glTangent3ivEXT(arg_6284: [*c]const GLint) void {
    return glad_glTangent3ivEXT.?(arg_6284);
}
pub inline fn glTangent3sEXT(arg_6285: GLshort, arg_6286: GLshort, arg_6287: GLshort) void {
    return glad_glTangent3sEXT.?(arg_6285, arg_6286, arg_6287);
}
pub inline fn glTangent3svEXT(arg_6288: [*c]const GLshort) void {
    return glad_glTangent3svEXT.?(arg_6288);
}
pub inline fn glTangentPointerEXT(arg_6289: GLenum, arg_6290: GLsizei, arg_6291: ?*const anyopaque) void {
    return glad_glTangentPointerEXT.?(arg_6289, arg_6290, arg_6291);
}
pub inline fn glTbufferMask3DFX(arg_6292: GLuint) void {
    return glad_glTbufferMask3DFX.?(arg_6292);
}
pub inline fn glTessellationFactorAMD(arg_6293: GLfloat) void {
    return glad_glTessellationFactorAMD.?(arg_6293);
}
pub inline fn glTessellationModeAMD(arg_6294: GLenum) void {
    return glad_glTessellationModeAMD.?(arg_6294);
}
pub inline fn glTestFenceAPPLE(arg_6295: GLuint) GLboolean {
    return glad_glTestFenceAPPLE.?(arg_6295);
}
pub inline fn glTestFenceNV(arg_6296: GLuint) GLboolean {
    return glad_glTestFenceNV.?(arg_6296);
}
pub inline fn glTestObjectAPPLE(arg_6297: GLenum, arg_6298: GLuint) GLboolean {
    return glad_glTestObjectAPPLE.?(arg_6297, arg_6298);
}
pub inline fn glTexAttachMemoryNV(arg_6299: GLenum, arg_6300: GLuint, arg_6301: GLuint64) void {
    return glad_glTexAttachMemoryNV.?(arg_6299, arg_6300, arg_6301);
}
pub inline fn glTexBuffer(arg_6302: GLenum, arg_6303: GLenum, arg_6304: GLuint) void {
    return glad_glTexBuffer.?(arg_6302, arg_6303, arg_6304);
}
pub inline fn glTexBufferARB(arg_6305: GLenum, arg_6306: GLenum, arg_6307: GLuint) void {
    return glad_glTexBufferARB.?(arg_6305, arg_6306, arg_6307);
}
pub inline fn glTexBufferEXT(arg_6308: GLenum, arg_6309: GLenum, arg_6310: GLuint) void {
    return glad_glTexBufferEXT.?(arg_6308, arg_6309, arg_6310);
}
pub inline fn glTexBufferRange(arg_6311: GLenum, arg_6312: GLenum, arg_6313: GLuint, arg_6314: GLintptr, arg_6315: GLsizeiptr) void {
    return glad_glTexBufferRange.?(arg_6311, arg_6312, arg_6313, arg_6314, arg_6315);
}
pub inline fn glTexBumpParameterfvATI(arg_6316: GLenum, arg_6317: [*c]const GLfloat) void {
    return glad_glTexBumpParameterfvATI.?(arg_6316, arg_6317);
}
pub inline fn glTexBumpParameterivATI(arg_6318: GLenum, arg_6319: [*c]const GLint) void {
    return glad_glTexBumpParameterivATI.?(arg_6318, arg_6319);
}
pub inline fn glTexCoord1bOES(arg_6320: GLbyte) void {
    return glad_glTexCoord1bOES.?(arg_6320);
}
pub inline fn glTexCoord1bvOES(arg_6321: [*c]const GLbyte) void {
    return glad_glTexCoord1bvOES.?(arg_6321);
}
pub inline fn glTexCoord1hNV(arg_6322: GLhalfNV) void {
    return glad_glTexCoord1hNV.?(arg_6322);
}
pub inline fn glTexCoord1hvNV(arg_6323: [*c]const GLhalfNV) void {
    return glad_glTexCoord1hvNV.?(arg_6323);
}
pub inline fn glTexCoord1xOES(arg_6324: GLfixed) void {
    return glad_glTexCoord1xOES.?(arg_6324);
}
pub inline fn glTexCoord1xvOES(arg_6325: [*c]const GLfixed) void {
    return glad_glTexCoord1xvOES.?(arg_6325);
}
pub inline fn glTexCoord2bOES(arg_6326: GLbyte, arg_6327: GLbyte) void {
    return glad_glTexCoord2bOES.?(arg_6326, arg_6327);
}
pub inline fn glTexCoord2bvOES(arg_6328: [*c]const GLbyte) void {
    return glad_glTexCoord2bvOES.?(arg_6328);
}
pub inline fn glTexCoord2fColor3fVertex3fSUN(arg_6329: GLfloat, arg_6330: GLfloat, arg_6331: GLfloat, arg_6332: GLfloat, arg_6333: GLfloat, arg_6334: GLfloat, arg_6335: GLfloat, arg_6336: GLfloat) void {
    return glad_glTexCoord2fColor3fVertex3fSUN.?(arg_6329, arg_6330, arg_6331, arg_6332, arg_6333, arg_6334, arg_6335, arg_6336);
}
pub inline fn glTexCoord2fColor3fVertex3fvSUN(arg_6337: [*c]const GLfloat, arg_6338: [*c]const GLfloat, arg_6339: [*c]const GLfloat) void {
    return glad_glTexCoord2fColor3fVertex3fvSUN.?(arg_6337, arg_6338, arg_6339);
}
pub inline fn glTexCoord2fColor4fNormal3fVertex3fSUN(arg_6340: GLfloat, arg_6341: GLfloat, arg_6342: GLfloat, arg_6343: GLfloat, arg_6344: GLfloat, arg_6345: GLfloat, arg_6346: GLfloat, arg_6347: GLfloat, arg_6348: GLfloat, arg_6349: GLfloat, arg_6350: GLfloat, arg_6351: GLfloat) void {
    return glad_glTexCoord2fColor4fNormal3fVertex3fSUN.?(arg_6340, arg_6341, arg_6342, arg_6343, arg_6344, arg_6345, arg_6346, arg_6347, arg_6348, arg_6349, arg_6350, arg_6351);
}
pub inline fn glTexCoord2fColor4fNormal3fVertex3fvSUN(arg_6352: [*c]const GLfloat, arg_6353: [*c]const GLfloat, arg_6354: [*c]const GLfloat, arg_6355: [*c]const GLfloat) void {
    return glad_glTexCoord2fColor4fNormal3fVertex3fvSUN.?(arg_6352, arg_6353, arg_6354, arg_6355);
}
pub inline fn glTexCoord2fColor4ubVertex3fSUN(arg_6356: GLfloat, arg_6357: GLfloat, arg_6358: GLubyte, arg_6359: GLubyte, arg_6360: GLubyte, arg_6361: GLubyte, arg_6362: GLfloat, arg_6363: GLfloat, arg_6364: GLfloat) void {
    return glad_glTexCoord2fColor4ubVertex3fSUN.?(arg_6356, arg_6357, arg_6358, arg_6359, arg_6360, arg_6361, arg_6362, arg_6363, arg_6364);
}
pub inline fn glTexCoord2fColor4ubVertex3fvSUN(arg_6365: [*c]const GLfloat, arg_6366: [*c]const GLubyte, arg_6367: [*c]const GLfloat) void {
    return glad_glTexCoord2fColor4ubVertex3fvSUN.?(arg_6365, arg_6366, arg_6367);
}
pub inline fn glTexCoord2fNormal3fVertex3fSUN(arg_6368: GLfloat, arg_6369: GLfloat, arg_6370: GLfloat, arg_6371: GLfloat, arg_6372: GLfloat, arg_6373: GLfloat, arg_6374: GLfloat, arg_6375: GLfloat) void {
    return glad_glTexCoord2fNormal3fVertex3fSUN.?(arg_6368, arg_6369, arg_6370, arg_6371, arg_6372, arg_6373, arg_6374, arg_6375);
}
pub inline fn glTexCoord2fNormal3fVertex3fvSUN(arg_6376: [*c]const GLfloat, arg_6377: [*c]const GLfloat, arg_6378: [*c]const GLfloat) void {
    return glad_glTexCoord2fNormal3fVertex3fvSUN.?(arg_6376, arg_6377, arg_6378);
}
pub inline fn glTexCoord2fVertex3fSUN(arg_6379: GLfloat, arg_6380: GLfloat, arg_6381: GLfloat, arg_6382: GLfloat, arg_6383: GLfloat) void {
    return glad_glTexCoord2fVertex3fSUN.?(arg_6379, arg_6380, arg_6381, arg_6382, arg_6383);
}
pub inline fn glTexCoord2fVertex3fvSUN(arg_6384: [*c]const GLfloat, arg_6385: [*c]const GLfloat) void {
    return glad_glTexCoord2fVertex3fvSUN.?(arg_6384, arg_6385);
}
pub inline fn glTexCoord2hNV(arg_6386: GLhalfNV, arg_6387: GLhalfNV) void {
    return glad_glTexCoord2hNV.?(arg_6386, arg_6387);
}
pub inline fn glTexCoord2hvNV(arg_6388: [*c]const GLhalfNV) void {
    return glad_glTexCoord2hvNV.?(arg_6388);
}
pub inline fn glTexCoord2xOES(arg_6389: GLfixed, arg_6390: GLfixed) void {
    return glad_glTexCoord2xOES.?(arg_6389, arg_6390);
}
pub inline fn glTexCoord2xvOES(arg_6391: [*c]const GLfixed) void {
    return glad_glTexCoord2xvOES.?(arg_6391);
}
pub inline fn glTexCoord3bOES(arg_6392: GLbyte, arg_6393: GLbyte, arg_6394: GLbyte) void {
    return glad_glTexCoord3bOES.?(arg_6392, arg_6393, arg_6394);
}
pub inline fn glTexCoord3bvOES(arg_6395: [*c]const GLbyte) void {
    return glad_glTexCoord3bvOES.?(arg_6395);
}
pub inline fn glTexCoord3hNV(arg_6396: GLhalfNV, arg_6397: GLhalfNV, arg_6398: GLhalfNV) void {
    return glad_glTexCoord3hNV.?(arg_6396, arg_6397, arg_6398);
}
pub inline fn glTexCoord3hvNV(arg_6399: [*c]const GLhalfNV) void {
    return glad_glTexCoord3hvNV.?(arg_6399);
}
pub inline fn glTexCoord3xOES(arg_6400: GLfixed, arg_6401: GLfixed, arg_6402: GLfixed) void {
    return glad_glTexCoord3xOES.?(arg_6400, arg_6401, arg_6402);
}
pub inline fn glTexCoord3xvOES(arg_6403: [*c]const GLfixed) void {
    return glad_glTexCoord3xvOES.?(arg_6403);
}
pub inline fn glTexCoord4bOES(arg_6404: GLbyte, arg_6405: GLbyte, arg_6406: GLbyte, arg_6407: GLbyte) void {
    return glad_glTexCoord4bOES.?(arg_6404, arg_6405, arg_6406, arg_6407);
}
pub inline fn glTexCoord4bvOES(arg_6408: [*c]const GLbyte) void {
    return glad_glTexCoord4bvOES.?(arg_6408);
}
pub inline fn glTexCoord4fColor4fNormal3fVertex4fSUN(arg_6409: GLfloat, arg_6410: GLfloat, arg_6411: GLfloat, arg_6412: GLfloat, arg_6413: GLfloat, arg_6414: GLfloat, arg_6415: GLfloat, arg_6416: GLfloat, arg_6417: GLfloat, arg_6418: GLfloat, arg_6419: GLfloat, arg_6420: GLfloat, arg_6421: GLfloat, arg_6422: GLfloat, arg_6423: GLfloat) void {
    return glad_glTexCoord4fColor4fNormal3fVertex4fSUN.?(arg_6409, arg_6410, arg_6411, arg_6412, arg_6413, arg_6414, arg_6415, arg_6416, arg_6417, arg_6418, arg_6419, arg_6420, arg_6421, arg_6422, arg_6423);
}
pub inline fn glTexCoord4fColor4fNormal3fVertex4fvSUN(arg_6424: [*c]const GLfloat, arg_6425: [*c]const GLfloat, arg_6426: [*c]const GLfloat, arg_6427: [*c]const GLfloat) void {
    return glad_glTexCoord4fColor4fNormal3fVertex4fvSUN.?(arg_6424, arg_6425, arg_6426, arg_6427);
}
pub inline fn glTexCoord4fVertex4fSUN(arg_6428: GLfloat, arg_6429: GLfloat, arg_6430: GLfloat, arg_6431: GLfloat, arg_6432: GLfloat, arg_6433: GLfloat, arg_6434: GLfloat, arg_6435: GLfloat) void {
    return glad_glTexCoord4fVertex4fSUN.?(arg_6428, arg_6429, arg_6430, arg_6431, arg_6432, arg_6433, arg_6434, arg_6435);
}
pub inline fn glTexCoord4fVertex4fvSUN(arg_6436: [*c]const GLfloat, arg_6437: [*c]const GLfloat) void {
    return glad_glTexCoord4fVertex4fvSUN.?(arg_6436, arg_6437);
}
pub inline fn glTexCoord4hNV(arg_6438: GLhalfNV, arg_6439: GLhalfNV, arg_6440: GLhalfNV, arg_6441: GLhalfNV) void {
    return glad_glTexCoord4hNV.?(arg_6438, arg_6439, arg_6440, arg_6441);
}
pub inline fn glTexCoord4hvNV(arg_6442: [*c]const GLhalfNV) void {
    return glad_glTexCoord4hvNV.?(arg_6442);
}
pub inline fn glTexCoord4xOES(arg_6443: GLfixed, arg_6444: GLfixed, arg_6445: GLfixed, arg_6446: GLfixed) void {
    return glad_glTexCoord4xOES.?(arg_6443, arg_6444, arg_6445, arg_6446);
}
pub inline fn glTexCoord4xvOES(arg_6447: [*c]const GLfixed) void {
    return glad_glTexCoord4xvOES.?(arg_6447);
}
pub inline fn glTexCoordFormatNV(arg_6448: GLint, arg_6449: GLenum, arg_6450: GLsizei) void {
    return glad_glTexCoordFormatNV.?(arg_6448, arg_6449, arg_6450);
}
pub inline fn glTexCoordPointerEXT(arg_6451: GLint, arg_6452: GLenum, arg_6453: GLsizei, arg_6454: GLsizei, arg_6455: ?*const anyopaque) void {
    return glad_glTexCoordPointerEXT.?(arg_6451, arg_6452, arg_6453, arg_6454, arg_6455);
}
pub inline fn glTexCoordPointerListIBM(arg_6456: GLint, arg_6457: GLenum, arg_6458: GLint, arg_6459: [*c]?*const anyopaque, arg_6460: GLint) void {
    return glad_glTexCoordPointerListIBM.?(arg_6456, arg_6457, arg_6458, arg_6459, arg_6460);
}
pub inline fn glTexCoordPointervINTEL(arg_6461: GLint, arg_6462: GLenum, arg_6463: [*c]?*const anyopaque) void {
    return glad_glTexCoordPointervINTEL.?(arg_6461, arg_6462, arg_6463);
}
pub inline fn glTexEnvxOES(arg_6464: GLenum, arg_6465: GLenum, arg_6466: GLfixed) void {
    return glad_glTexEnvxOES.?(arg_6464, arg_6465, arg_6466);
}
pub inline fn glTexEnvxvOES(arg_6467: GLenum, arg_6468: GLenum, arg_6469: [*c]const GLfixed) void {
    return glad_glTexEnvxvOES.?(arg_6467, arg_6468, arg_6469);
}
pub inline fn glTexFilterFuncSGIS(arg_6470: GLenum, arg_6471: GLenum, arg_6472: GLsizei, arg_6473: [*c]const GLfloat) void {
    return glad_glTexFilterFuncSGIS.?(arg_6470, arg_6471, arg_6472, arg_6473);
}
pub inline fn glTexGenxOES(arg_6474: GLenum, arg_6475: GLenum, arg_6476: GLfixed) void {
    return glad_glTexGenxOES.?(arg_6474, arg_6475, arg_6476);
}
pub inline fn glTexGenxvOES(arg_6477: GLenum, arg_6478: GLenum, arg_6479: [*c]const GLfixed) void {
    return glad_glTexGenxvOES.?(arg_6477, arg_6478, arg_6479);
}
pub inline fn glTexImage1D(arg_6480: GLenum, arg_6481: GLint, arg_6482: GLint, arg_6483: GLsizei, arg_6484: GLint, arg_6485: GLenum, arg_6486: GLenum, arg_6487: ?*const anyopaque) void {
    return glad_glTexImage1D.?(arg_6480, arg_6481, arg_6482, arg_6483, arg_6484, arg_6485, arg_6486, arg_6487);
}
pub inline fn glTexImage2D(arg_6488: GLenum, arg_6489: GLint, arg_6490: GLint, arg_6491: GLsizei, arg_6492: GLsizei, arg_6493: GLint, arg_6494: GLenum, arg_6495: GLenum, arg_6496: ?*const anyopaque) void {
    return glad_glTexImage2D.?(arg_6488, arg_6489, arg_6490, arg_6491, arg_6492, arg_6493, arg_6494, arg_6495, arg_6496);
}
pub inline fn glTexImage2DMultisample(arg_6497: GLenum, arg_6498: GLsizei, arg_6499: GLenum, arg_6500: GLsizei, arg_6501: GLsizei, arg_6502: GLboolean) void {
    return glad_glTexImage2DMultisample.?(arg_6497, arg_6498, arg_6499, arg_6500, arg_6501, arg_6502);
}
pub inline fn glTexImage2DMultisampleCoverageNV(arg_6503: GLenum, arg_6504: GLsizei, arg_6505: GLsizei, arg_6506: GLint, arg_6507: GLsizei, arg_6508: GLsizei, arg_6509: GLboolean) void {
    return glad_glTexImage2DMultisampleCoverageNV.?(arg_6503, arg_6504, arg_6505, arg_6506, arg_6507, arg_6508, arg_6509);
}
pub inline fn glTexImage3D(arg_6510: GLenum, arg_6511: GLint, arg_6512: GLint, arg_6513: GLsizei, arg_6514: GLsizei, arg_6515: GLsizei, arg_6516: GLint, arg_6517: GLenum, arg_6518: GLenum, arg_6519: ?*const anyopaque) void {
    return glad_glTexImage3D.?(arg_6510, arg_6511, arg_6512, arg_6513, arg_6514, arg_6515, arg_6516, arg_6517, arg_6518, arg_6519);
}
pub inline fn glTexImage3DEXT(arg_6520: GLenum, arg_6521: GLint, arg_6522: GLenum, arg_6523: GLsizei, arg_6524: GLsizei, arg_6525: GLsizei, arg_6526: GLint, arg_6527: GLenum, arg_6528: GLenum, arg_6529: ?*const anyopaque) void {
    return glad_glTexImage3DEXT.?(arg_6520, arg_6521, arg_6522, arg_6523, arg_6524, arg_6525, arg_6526, arg_6527, arg_6528, arg_6529);
}
pub inline fn glTexImage3DMultisample(arg_6530: GLenum, arg_6531: GLsizei, arg_6532: GLenum, arg_6533: GLsizei, arg_6534: GLsizei, arg_6535: GLsizei, arg_6536: GLboolean) void {
    return glad_glTexImage3DMultisample.?(arg_6530, arg_6531, arg_6532, arg_6533, arg_6534, arg_6535, arg_6536);
}
pub inline fn glTexImage3DMultisampleCoverageNV(arg_6537: GLenum, arg_6538: GLsizei, arg_6539: GLsizei, arg_6540: GLint, arg_6541: GLsizei, arg_6542: GLsizei, arg_6543: GLsizei, arg_6544: GLboolean) void {
    return glad_glTexImage3DMultisampleCoverageNV.?(arg_6537, arg_6538, arg_6539, arg_6540, arg_6541, arg_6542, arg_6543, arg_6544);
}
pub inline fn glTexImage4DSGIS(arg_6545: GLenum, arg_6546: GLint, arg_6547: GLenum, arg_6548: GLsizei, arg_6549: GLsizei, arg_6550: GLsizei, arg_6551: GLsizei, arg_6552: GLint, arg_6553: GLenum, arg_6554: GLenum, arg_6555: ?*const anyopaque) void {
    return glad_glTexImage4DSGIS.?(arg_6545, arg_6546, arg_6547, arg_6548, arg_6549, arg_6550, arg_6551, arg_6552, arg_6553, arg_6554, arg_6555);
}
pub inline fn glTexPageCommitmentARB(arg_6556: GLenum, arg_6557: GLint, arg_6558: GLint, arg_6559: GLint, arg_6560: GLint, arg_6561: GLsizei, arg_6562: GLsizei, arg_6563: GLsizei, arg_6564: GLboolean) void {
    return glad_glTexPageCommitmentARB.?(arg_6556, arg_6557, arg_6558, arg_6559, arg_6560, arg_6561, arg_6562, arg_6563, arg_6564);
}
pub inline fn glTexPageCommitmentMemNV(arg_6565: GLenum, arg_6566: GLint, arg_6567: GLint, arg_6568: GLint, arg_6569: GLint, arg_6570: GLint, arg_6571: GLsizei, arg_6572: GLsizei, arg_6573: GLsizei, arg_6574: GLuint, arg_6575: GLuint64, arg_6576: GLboolean) void {
    return glad_glTexPageCommitmentMemNV.?(arg_6565, arg_6566, arg_6567, arg_6568, arg_6569, arg_6570, arg_6571, arg_6572, arg_6573, arg_6574, arg_6575, arg_6576);
}
pub inline fn glTexParameterIiv(arg_6577: GLenum, arg_6578: GLenum, arg_6579: [*c]const GLint) void {
    return glad_glTexParameterIiv.?(arg_6577, arg_6578, arg_6579);
}
pub inline fn glTexParameterIivEXT(arg_6580: GLenum, arg_6581: GLenum, arg_6582: [*c]const GLint) void {
    return glad_glTexParameterIivEXT.?(arg_6580, arg_6581, arg_6582);
}
pub inline fn glTexParameterIuiv(arg_6583: GLenum, arg_6584: GLenum, arg_6585: [*c]const GLuint) void {
    return glad_glTexParameterIuiv.?(arg_6583, arg_6584, arg_6585);
}
pub inline fn glTexParameterIuivEXT(arg_6586: GLenum, arg_6587: GLenum, arg_6588: [*c]const GLuint) void {
    return glad_glTexParameterIuivEXT.?(arg_6586, arg_6587, arg_6588);
}
pub inline fn glTexParameterf(arg_6589: GLenum, arg_6590: GLenum, arg_6591: GLfloat) void {
    return glad_glTexParameterf.?(arg_6589, arg_6590, arg_6591);
}
pub inline fn glTexParameterfv(arg_6592: GLenum, arg_6593: GLenum, arg_6594: [*c]const GLfloat) void {
    return glad_glTexParameterfv.?(arg_6592, arg_6593, arg_6594);
}
pub inline fn glTexParameteri(arg_6595: GLenum, arg_6596: GLenum, arg_6597: GLint) void {
    return glad_glTexParameteri.?(arg_6595, arg_6596, arg_6597);
}
pub inline fn glTexParameteriv(arg_6598: GLenum, arg_6599: GLenum, arg_6600: [*c]const GLint) void {
    return glad_glTexParameteriv.?(arg_6598, arg_6599, arg_6600);
}
pub inline fn glTexParameterxOES(arg_6601: GLenum, arg_6602: GLenum, arg_6603: GLfixed) void {
    return glad_glTexParameterxOES.?(arg_6601, arg_6602, arg_6603);
}
pub inline fn glTexParameterxvOES(arg_6604: GLenum, arg_6605: GLenum, arg_6606: [*c]const GLfixed) void {
    return glad_glTexParameterxvOES.?(arg_6604, arg_6605, arg_6606);
}
pub inline fn glTexRenderbufferNV(arg_6607: GLenum, arg_6608: GLuint) void {
    return glad_glTexRenderbufferNV.?(arg_6607, arg_6608);
}
pub inline fn glTexStorage1D(arg_6609: GLenum, arg_6610: GLsizei, arg_6611: GLenum, arg_6612: GLsizei) void {
    return glad_glTexStorage1D.?(arg_6609, arg_6610, arg_6611, arg_6612);
}
pub inline fn glTexStorage1DEXT(arg_6613: GLenum, arg_6614: GLsizei, arg_6615: GLenum, arg_6616: GLsizei) void {
    return glad_glTexStorage1DEXT.?(arg_6613, arg_6614, arg_6615, arg_6616);
}
pub inline fn glTexStorage2D(arg_6617: GLenum, arg_6618: GLsizei, arg_6619: GLenum, arg_6620: GLsizei, arg_6621: GLsizei) void {
    return glad_glTexStorage2D.?(arg_6617, arg_6618, arg_6619, arg_6620, arg_6621);
}
pub inline fn glTexStorage2DEXT(arg_6622: GLenum, arg_6623: GLsizei, arg_6624: GLenum, arg_6625: GLsizei, arg_6626: GLsizei) void {
    return glad_glTexStorage2DEXT.?(arg_6622, arg_6623, arg_6624, arg_6625, arg_6626);
}
pub inline fn glTexStorage2DMultisample(arg_6627: GLenum, arg_6628: GLsizei, arg_6629: GLenum, arg_6630: GLsizei, arg_6631: GLsizei, arg_6632: GLboolean) void {
    return glad_glTexStorage2DMultisample.?(arg_6627, arg_6628, arg_6629, arg_6630, arg_6631, arg_6632);
}
pub inline fn glTexStorage3D(arg_6633: GLenum, arg_6634: GLsizei, arg_6635: GLenum, arg_6636: GLsizei, arg_6637: GLsizei, arg_6638: GLsizei) void {
    return glad_glTexStorage3D.?(arg_6633, arg_6634, arg_6635, arg_6636, arg_6637, arg_6638);
}
pub inline fn glTexStorage3DEXT(arg_6639: GLenum, arg_6640: GLsizei, arg_6641: GLenum, arg_6642: GLsizei, arg_6643: GLsizei, arg_6644: GLsizei) void {
    return glad_glTexStorage3DEXT.?(arg_6639, arg_6640, arg_6641, arg_6642, arg_6643, arg_6644);
}
pub inline fn glTexStorage3DMultisample(arg_6645: GLenum, arg_6646: GLsizei, arg_6647: GLenum, arg_6648: GLsizei, arg_6649: GLsizei, arg_6650: GLsizei, arg_6651: GLboolean) void {
    return glad_glTexStorage3DMultisample.?(arg_6645, arg_6646, arg_6647, arg_6648, arg_6649, arg_6650, arg_6651);
}
pub inline fn glTexStorageMem1DEXT(arg_6652: GLenum, arg_6653: GLsizei, arg_6654: GLenum, arg_6655: GLsizei, arg_6656: GLuint, arg_6657: GLuint64) void {
    return glad_glTexStorageMem1DEXT.?(arg_6652, arg_6653, arg_6654, arg_6655, arg_6656, arg_6657);
}
pub inline fn glTexStorageMem2DEXT(arg_6658: GLenum, arg_6659: GLsizei, arg_6660: GLenum, arg_6661: GLsizei, arg_6662: GLsizei, arg_6663: GLuint, arg_6664: GLuint64) void {
    return glad_glTexStorageMem2DEXT.?(arg_6658, arg_6659, arg_6660, arg_6661, arg_6662, arg_6663, arg_6664);
}
pub inline fn glTexStorageMem2DMultisampleEXT(arg_6665: GLenum, arg_6666: GLsizei, arg_6667: GLenum, arg_6668: GLsizei, arg_6669: GLsizei, arg_6670: GLboolean, arg_6671: GLuint, arg_6672: GLuint64) void {
    return glad_glTexStorageMem2DMultisampleEXT.?(arg_6665, arg_6666, arg_6667, arg_6668, arg_6669, arg_6670, arg_6671, arg_6672);
}
pub inline fn glTexStorageMem3DEXT(arg_6673: GLenum, arg_6674: GLsizei, arg_6675: GLenum, arg_6676: GLsizei, arg_6677: GLsizei, arg_6678: GLsizei, arg_6679: GLuint, arg_6680: GLuint64) void {
    return glad_glTexStorageMem3DEXT.?(arg_6673, arg_6674, arg_6675, arg_6676, arg_6677, arg_6678, arg_6679, arg_6680);
}
pub inline fn glTexStorageMem3DMultisampleEXT(arg_6681: GLenum, arg_6682: GLsizei, arg_6683: GLenum, arg_6684: GLsizei, arg_6685: GLsizei, arg_6686: GLsizei, arg_6687: GLboolean, arg_6688: GLuint, arg_6689: GLuint64) void {
    return glad_glTexStorageMem3DMultisampleEXT.?(arg_6681, arg_6682, arg_6683, arg_6684, arg_6685, arg_6686, arg_6687, arg_6688, arg_6689);
}
pub inline fn glTexStorageSparseAMD(arg_6690: GLenum, arg_6691: GLenum, arg_6692: GLsizei, arg_6693: GLsizei, arg_6694: GLsizei, arg_6695: GLsizei, arg_6696: GLbitfield) void {
    return glad_glTexStorageSparseAMD.?(arg_6690, arg_6691, arg_6692, arg_6693, arg_6694, arg_6695, arg_6696);
}
pub inline fn glTexSubImage1D(arg_6697: GLenum, arg_6698: GLint, arg_6699: GLint, arg_6700: GLsizei, arg_6701: GLenum, arg_6702: GLenum, arg_6703: ?*const anyopaque) void {
    return glad_glTexSubImage1D.?(arg_6697, arg_6698, arg_6699, arg_6700, arg_6701, arg_6702, arg_6703);
}
pub inline fn glTexSubImage1DEXT(arg_6704: GLenum, arg_6705: GLint, arg_6706: GLint, arg_6707: GLsizei, arg_6708: GLenum, arg_6709: GLenum, arg_6710: ?*const anyopaque) void {
    return glad_glTexSubImage1DEXT.?(arg_6704, arg_6705, arg_6706, arg_6707, arg_6708, arg_6709, arg_6710);
}
pub inline fn glTexSubImage2D(arg_6711: GLenum, arg_6712: GLint, arg_6713: GLint, arg_6714: GLint, arg_6715: GLsizei, arg_6716: GLsizei, arg_6717: GLenum, arg_6718: GLenum, arg_6719: ?*const anyopaque) void {
    return glad_glTexSubImage2D.?(arg_6711, arg_6712, arg_6713, arg_6714, arg_6715, arg_6716, arg_6717, arg_6718, arg_6719);
}
pub inline fn glTexSubImage2DEXT(arg_6720: GLenum, arg_6721: GLint, arg_6722: GLint, arg_6723: GLint, arg_6724: GLsizei, arg_6725: GLsizei, arg_6726: GLenum, arg_6727: GLenum, arg_6728: ?*const anyopaque) void {
    return glad_glTexSubImage2DEXT.?(arg_6720, arg_6721, arg_6722, arg_6723, arg_6724, arg_6725, arg_6726, arg_6727, arg_6728);
}
pub inline fn glTexSubImage3D(arg_6729: GLenum, arg_6730: GLint, arg_6731: GLint, arg_6732: GLint, arg_6733: GLint, arg_6734: GLsizei, arg_6735: GLsizei, arg_6736: GLsizei, arg_6737: GLenum, arg_6738: GLenum, arg_6739: ?*const anyopaque) void {
    return glad_glTexSubImage3D.?(arg_6729, arg_6730, arg_6731, arg_6732, arg_6733, arg_6734, arg_6735, arg_6736, arg_6737, arg_6738, arg_6739);
}
pub inline fn glTexSubImage3DEXT(arg_6740: GLenum, arg_6741: GLint, arg_6742: GLint, arg_6743: GLint, arg_6744: GLint, arg_6745: GLsizei, arg_6746: GLsizei, arg_6747: GLsizei, arg_6748: GLenum, arg_6749: GLenum, arg_6750: ?*const anyopaque) void {
    return glad_glTexSubImage3DEXT.?(arg_6740, arg_6741, arg_6742, arg_6743, arg_6744, arg_6745, arg_6746, arg_6747, arg_6748, arg_6749, arg_6750);
}
pub inline fn glTexSubImage4DSGIS(arg_6751: GLenum, arg_6752: GLint, arg_6753: GLint, arg_6754: GLint, arg_6755: GLint, arg_6756: GLint, arg_6757: GLsizei, arg_6758: GLsizei, arg_6759: GLsizei, arg_6760: GLsizei, arg_6761: GLenum, arg_6762: GLenum, arg_6763: ?*const anyopaque) void {
    return glad_glTexSubImage4DSGIS.?(arg_6751, arg_6752, arg_6753, arg_6754, arg_6755, arg_6756, arg_6757, arg_6758, arg_6759, arg_6760, arg_6761, arg_6762, arg_6763);
}
pub inline fn glTextureAttachMemoryNV(arg_6764: GLuint, arg_6765: GLuint, arg_6766: GLuint64) void {
    return glad_glTextureAttachMemoryNV.?(arg_6764, arg_6765, arg_6766);
}
pub inline fn glTextureBarrier() void {
    return glad_glTextureBarrier.?();
}
pub inline fn glTextureBarrierNV() void {
    return glad_glTextureBarrierNV.?();
}
pub inline fn glTextureBuffer(arg_6767: GLuint, arg_6768: GLenum, arg_6769: GLuint) void {
    return glad_glTextureBuffer.?(arg_6767, arg_6768, arg_6769);
}
pub inline fn glTextureBufferEXT(arg_6770: GLuint, arg_6771: GLenum, arg_6772: GLenum, arg_6773: GLuint) void {
    return glad_glTextureBufferEXT.?(arg_6770, arg_6771, arg_6772, arg_6773);
}
pub inline fn glTextureBufferRange(arg_6774: GLuint, arg_6775: GLenum, arg_6776: GLuint, arg_6777: GLintptr, arg_6778: GLsizeiptr) void {
    return glad_glTextureBufferRange.?(arg_6774, arg_6775, arg_6776, arg_6777, arg_6778);
}
pub inline fn glTextureBufferRangeEXT(arg_6779: GLuint, arg_6780: GLenum, arg_6781: GLenum, arg_6782: GLuint, arg_6783: GLintptr, arg_6784: GLsizeiptr) void {
    return glad_glTextureBufferRangeEXT.?(arg_6779, arg_6780, arg_6781, arg_6782, arg_6783, arg_6784);
}
pub inline fn glTextureColorMaskSGIS(arg_6785: GLboolean, arg_6786: GLboolean, arg_6787: GLboolean, arg_6788: GLboolean) void {
    return glad_glTextureColorMaskSGIS.?(arg_6785, arg_6786, arg_6787, arg_6788);
}
pub inline fn glTextureImage1DEXT(arg_6789: GLuint, arg_6790: GLenum, arg_6791: GLint, arg_6792: GLint, arg_6793: GLsizei, arg_6794: GLint, arg_6795: GLenum, arg_6796: GLenum, arg_6797: ?*const anyopaque) void {
    return glad_glTextureImage1DEXT.?(arg_6789, arg_6790, arg_6791, arg_6792, arg_6793, arg_6794, arg_6795, arg_6796, arg_6797);
}
pub inline fn glTextureImage2DEXT(arg_6798: GLuint, arg_6799: GLenum, arg_6800: GLint, arg_6801: GLint, arg_6802: GLsizei, arg_6803: GLsizei, arg_6804: GLint, arg_6805: GLenum, arg_6806: GLenum, arg_6807: ?*const anyopaque) void {
    return glad_glTextureImage2DEXT.?(arg_6798, arg_6799, arg_6800, arg_6801, arg_6802, arg_6803, arg_6804, arg_6805, arg_6806, arg_6807);
}
pub inline fn glTextureImage2DMultisampleCoverageNV(arg_6808: GLuint, arg_6809: GLenum, arg_6810: GLsizei, arg_6811: GLsizei, arg_6812: GLint, arg_6813: GLsizei, arg_6814: GLsizei, arg_6815: GLboolean) void {
    return glad_glTextureImage2DMultisampleCoverageNV.?(arg_6808, arg_6809, arg_6810, arg_6811, arg_6812, arg_6813, arg_6814, arg_6815);
}
pub inline fn glTextureImage2DMultisampleNV(arg_6816: GLuint, arg_6817: GLenum, arg_6818: GLsizei, arg_6819: GLint, arg_6820: GLsizei, arg_6821: GLsizei, arg_6822: GLboolean) void {
    return glad_glTextureImage2DMultisampleNV.?(arg_6816, arg_6817, arg_6818, arg_6819, arg_6820, arg_6821, arg_6822);
}
pub inline fn glTextureImage3DEXT(arg_6823: GLuint, arg_6824: GLenum, arg_6825: GLint, arg_6826: GLint, arg_6827: GLsizei, arg_6828: GLsizei, arg_6829: GLsizei, arg_6830: GLint, arg_6831: GLenum, arg_6832: GLenum, arg_6833: ?*const anyopaque) void {
    return glad_glTextureImage3DEXT.?(arg_6823, arg_6824, arg_6825, arg_6826, arg_6827, arg_6828, arg_6829, arg_6830, arg_6831, arg_6832, arg_6833);
}
pub inline fn glTextureImage3DMultisampleCoverageNV(arg_6834: GLuint, arg_6835: GLenum, arg_6836: GLsizei, arg_6837: GLsizei, arg_6838: GLint, arg_6839: GLsizei, arg_6840: GLsizei, arg_6841: GLsizei, arg_6842: GLboolean) void {
    return glad_glTextureImage3DMultisampleCoverageNV.?(arg_6834, arg_6835, arg_6836, arg_6837, arg_6838, arg_6839, arg_6840, arg_6841, arg_6842);
}
pub inline fn glTextureImage3DMultisampleNV(arg_6843: GLuint, arg_6844: GLenum, arg_6845: GLsizei, arg_6846: GLint, arg_6847: GLsizei, arg_6848: GLsizei, arg_6849: GLsizei, arg_6850: GLboolean) void {
    return glad_glTextureImage3DMultisampleNV.?(arg_6843, arg_6844, arg_6845, arg_6846, arg_6847, arg_6848, arg_6849, arg_6850);
}
pub inline fn glTextureLightEXT(arg_6851: GLenum) void {
    return glad_glTextureLightEXT.?(arg_6851);
}
pub inline fn glTextureMaterialEXT(arg_6852: GLenum, arg_6853: GLenum) void {
    return glad_glTextureMaterialEXT.?(arg_6852, arg_6853);
}
pub inline fn glTextureNormalEXT(arg_6854: GLenum) void {
    return glad_glTextureNormalEXT.?(arg_6854);
}
pub inline fn glTexturePageCommitmentEXT(arg_6855: GLuint, arg_6856: GLint, arg_6857: GLint, arg_6858: GLint, arg_6859: GLint, arg_6860: GLsizei, arg_6861: GLsizei, arg_6862: GLsizei, arg_6863: GLboolean) void {
    return glad_glTexturePageCommitmentEXT.?(arg_6855, arg_6856, arg_6857, arg_6858, arg_6859, arg_6860, arg_6861, arg_6862, arg_6863);
}
pub inline fn glTexturePageCommitmentMemNV(arg_6864: GLuint, arg_6865: GLint, arg_6866: GLint, arg_6867: GLint, arg_6868: GLint, arg_6869: GLint, arg_6870: GLsizei, arg_6871: GLsizei, arg_6872: GLsizei, arg_6873: GLuint, arg_6874: GLuint64, arg_6875: GLboolean) void {
    return glad_glTexturePageCommitmentMemNV.?(arg_6864, arg_6865, arg_6866, arg_6867, arg_6868, arg_6869, arg_6870, arg_6871, arg_6872, arg_6873, arg_6874, arg_6875);
}
pub inline fn glTextureParameterIiv(arg_6876: GLuint, arg_6877: GLenum, arg_6878: [*c]const GLint) void {
    return glad_glTextureParameterIiv.?(arg_6876, arg_6877, arg_6878);
}
pub inline fn glTextureParameterIivEXT(arg_6879: GLuint, arg_6880: GLenum, arg_6881: GLenum, arg_6882: [*c]const GLint) void {
    return glad_glTextureParameterIivEXT.?(arg_6879, arg_6880, arg_6881, arg_6882);
}
pub inline fn glTextureParameterIuiv(arg_6883: GLuint, arg_6884: GLenum, arg_6885: [*c]const GLuint) void {
    return glad_glTextureParameterIuiv.?(arg_6883, arg_6884, arg_6885);
}
pub inline fn glTextureParameterIuivEXT(arg_6886: GLuint, arg_6887: GLenum, arg_6888: GLenum, arg_6889: [*c]const GLuint) void {
    return glad_glTextureParameterIuivEXT.?(arg_6886, arg_6887, arg_6888, arg_6889);
}
pub inline fn glTextureParameterf(arg_6890: GLuint, arg_6891: GLenum, arg_6892: GLfloat) void {
    return glad_glTextureParameterf.?(arg_6890, arg_6891, arg_6892);
}
pub inline fn glTextureParameterfEXT(arg_6893: GLuint, arg_6894: GLenum, arg_6895: GLenum, arg_6896: GLfloat) void {
    return glad_glTextureParameterfEXT.?(arg_6893, arg_6894, arg_6895, arg_6896);
}
pub inline fn glTextureParameterfv(arg_6897: GLuint, arg_6898: GLenum, arg_6899: [*c]const GLfloat) void {
    return glad_glTextureParameterfv.?(arg_6897, arg_6898, arg_6899);
}
pub inline fn glTextureParameterfvEXT(arg_6900: GLuint, arg_6901: GLenum, arg_6902: GLenum, arg_6903: [*c]const GLfloat) void {
    return glad_glTextureParameterfvEXT.?(arg_6900, arg_6901, arg_6902, arg_6903);
}
pub inline fn glTextureParameteri(arg_6904: GLuint, arg_6905: GLenum, arg_6906: GLint) void {
    return glad_glTextureParameteri.?(arg_6904, arg_6905, arg_6906);
}
pub inline fn glTextureParameteriEXT(arg_6907: GLuint, arg_6908: GLenum, arg_6909: GLenum, arg_6910: GLint) void {
    return glad_glTextureParameteriEXT.?(arg_6907, arg_6908, arg_6909, arg_6910);
}
pub inline fn glTextureParameteriv(arg_6911: GLuint, arg_6912: GLenum, arg_6913: [*c]const GLint) void {
    return glad_glTextureParameteriv.?(arg_6911, arg_6912, arg_6913);
}
pub inline fn glTextureParameterivEXT(arg_6914: GLuint, arg_6915: GLenum, arg_6916: GLenum, arg_6917: [*c]const GLint) void {
    return glad_glTextureParameterivEXT.?(arg_6914, arg_6915, arg_6916, arg_6917);
}
pub inline fn glTextureRangeAPPLE(arg_6918: GLenum, arg_6919: GLsizei, arg_6920: ?*const anyopaque) void {
    return glad_glTextureRangeAPPLE.?(arg_6918, arg_6919, arg_6920);
}
pub inline fn glTextureRenderbufferEXT(arg_6921: GLuint, arg_6922: GLenum, arg_6923: GLuint) void {
    return glad_glTextureRenderbufferEXT.?(arg_6921, arg_6922, arg_6923);
}
pub inline fn glTextureStorage1D(arg_6924: GLuint, arg_6925: GLsizei, arg_6926: GLenum, arg_6927: GLsizei) void {
    return glad_glTextureStorage1D.?(arg_6924, arg_6925, arg_6926, arg_6927);
}
pub inline fn glTextureStorage1DEXT(arg_6928: GLuint, arg_6929: GLenum, arg_6930: GLsizei, arg_6931: GLenum, arg_6932: GLsizei) void {
    return glad_glTextureStorage1DEXT.?(arg_6928, arg_6929, arg_6930, arg_6931, arg_6932);
}
pub inline fn glTextureStorage2D(arg_6933: GLuint, arg_6934: GLsizei, arg_6935: GLenum, arg_6936: GLsizei, arg_6937: GLsizei) void {
    return glad_glTextureStorage2D.?(arg_6933, arg_6934, arg_6935, arg_6936, arg_6937);
}
pub inline fn glTextureStorage2DEXT(arg_6938: GLuint, arg_6939: GLenum, arg_6940: GLsizei, arg_6941: GLenum, arg_6942: GLsizei, arg_6943: GLsizei) void {
    return glad_glTextureStorage2DEXT.?(arg_6938, arg_6939, arg_6940, arg_6941, arg_6942, arg_6943);
}
pub inline fn glTextureStorage2DMultisample(arg_6944: GLuint, arg_6945: GLsizei, arg_6946: GLenum, arg_6947: GLsizei, arg_6948: GLsizei, arg_6949: GLboolean) void {
    return glad_glTextureStorage2DMultisample.?(arg_6944, arg_6945, arg_6946, arg_6947, arg_6948, arg_6949);
}
pub inline fn glTextureStorage2DMultisampleEXT(arg_6950: GLuint, arg_6951: GLenum, arg_6952: GLsizei, arg_6953: GLenum, arg_6954: GLsizei, arg_6955: GLsizei, arg_6956: GLboolean) void {
    return glad_glTextureStorage2DMultisampleEXT.?(arg_6950, arg_6951, arg_6952, arg_6953, arg_6954, arg_6955, arg_6956);
}
pub inline fn glTextureStorage3D(arg_6957: GLuint, arg_6958: GLsizei, arg_6959: GLenum, arg_6960: GLsizei, arg_6961: GLsizei, arg_6962: GLsizei) void {
    return glad_glTextureStorage3D.?(arg_6957, arg_6958, arg_6959, arg_6960, arg_6961, arg_6962);
}
pub inline fn glTextureStorage3DEXT(arg_6963: GLuint, arg_6964: GLenum, arg_6965: GLsizei, arg_6966: GLenum, arg_6967: GLsizei, arg_6968: GLsizei, arg_6969: GLsizei) void {
    return glad_glTextureStorage3DEXT.?(arg_6963, arg_6964, arg_6965, arg_6966, arg_6967, arg_6968, arg_6969);
}
pub inline fn glTextureStorage3DMultisample(arg_6970: GLuint, arg_6971: GLsizei, arg_6972: GLenum, arg_6973: GLsizei, arg_6974: GLsizei, arg_6975: GLsizei, arg_6976: GLboolean) void {
    return glad_glTextureStorage3DMultisample.?(arg_6970, arg_6971, arg_6972, arg_6973, arg_6974, arg_6975, arg_6976);
}
pub inline fn glTextureStorage3DMultisampleEXT(arg_6977: GLuint, arg_6978: GLenum, arg_6979: GLsizei, arg_6980: GLenum, arg_6981: GLsizei, arg_6982: GLsizei, arg_6983: GLsizei, arg_6984: GLboolean) void {
    return glad_glTextureStorage3DMultisampleEXT.?(arg_6977, arg_6978, arg_6979, arg_6980, arg_6981, arg_6982, arg_6983, arg_6984);
}
pub inline fn glTextureStorageMem1DEXT(arg_6985: GLuint, arg_6986: GLsizei, arg_6987: GLenum, arg_6988: GLsizei, arg_6989: GLuint, arg_6990: GLuint64) void {
    return glad_glTextureStorageMem1DEXT.?(arg_6985, arg_6986, arg_6987, arg_6988, arg_6989, arg_6990);
}
pub inline fn glTextureStorageMem2DEXT(arg_6991: GLuint, arg_6992: GLsizei, arg_6993: GLenum, arg_6994: GLsizei, arg_6995: GLsizei, arg_6996: GLuint, arg_6997: GLuint64) void {
    return glad_glTextureStorageMem2DEXT.?(arg_6991, arg_6992, arg_6993, arg_6994, arg_6995, arg_6996, arg_6997);
}
pub inline fn glTextureStorageMem2DMultisampleEXT(arg_6998: GLuint, arg_6999: GLsizei, arg_7000: GLenum, arg_7001: GLsizei, arg_7002: GLsizei, arg_7003: GLboolean, arg_7004: GLuint, arg_7005: GLuint64) void {
    return glad_glTextureStorageMem2DMultisampleEXT.?(arg_6998, arg_6999, arg_7000, arg_7001, arg_7002, arg_7003, arg_7004, arg_7005);
}
pub inline fn glTextureStorageMem3DEXT(arg_7006: GLuint, arg_7007: GLsizei, arg_7008: GLenum, arg_7009: GLsizei, arg_7010: GLsizei, arg_7011: GLsizei, arg_7012: GLuint, arg_7013: GLuint64) void {
    return glad_glTextureStorageMem3DEXT.?(arg_7006, arg_7007, arg_7008, arg_7009, arg_7010, arg_7011, arg_7012, arg_7013);
}
pub inline fn glTextureStorageMem3DMultisampleEXT(arg_7014: GLuint, arg_7015: GLsizei, arg_7016: GLenum, arg_7017: GLsizei, arg_7018: GLsizei, arg_7019: GLsizei, arg_7020: GLboolean, arg_7021: GLuint, arg_7022: GLuint64) void {
    return glad_glTextureStorageMem3DMultisampleEXT.?(arg_7014, arg_7015, arg_7016, arg_7017, arg_7018, arg_7019, arg_7020, arg_7021, arg_7022);
}
pub inline fn glTextureStorageSparseAMD(arg_7023: GLuint, arg_7024: GLenum, arg_7025: GLenum, arg_7026: GLsizei, arg_7027: GLsizei, arg_7028: GLsizei, arg_7029: GLsizei, arg_7030: GLbitfield) void {
    return glad_glTextureStorageSparseAMD.?(arg_7023, arg_7024, arg_7025, arg_7026, arg_7027, arg_7028, arg_7029, arg_7030);
}
pub inline fn glTextureSubImage1D(arg_7031: GLuint, arg_7032: GLint, arg_7033: GLint, arg_7034: GLsizei, arg_7035: GLenum, arg_7036: GLenum, arg_7037: ?*const anyopaque) void {
    return glad_glTextureSubImage1D.?(arg_7031, arg_7032, arg_7033, arg_7034, arg_7035, arg_7036, arg_7037);
}
pub inline fn glTextureSubImage1DEXT(arg_7038: GLuint, arg_7039: GLenum, arg_7040: GLint, arg_7041: GLint, arg_7042: GLsizei, arg_7043: GLenum, arg_7044: GLenum, arg_7045: ?*const anyopaque) void {
    return glad_glTextureSubImage1DEXT.?(arg_7038, arg_7039, arg_7040, arg_7041, arg_7042, arg_7043, arg_7044, arg_7045);
}
pub inline fn glTextureSubImage2D(arg_7046: GLuint, arg_7047: GLint, arg_7048: GLint, arg_7049: GLint, arg_7050: GLsizei, arg_7051: GLsizei, arg_7052: GLenum, arg_7053: GLenum, arg_7054: ?*const anyopaque) void {
    return glad_glTextureSubImage2D.?(arg_7046, arg_7047, arg_7048, arg_7049, arg_7050, arg_7051, arg_7052, arg_7053, arg_7054);
}
pub inline fn glTextureSubImage2DEXT(arg_7055: GLuint, arg_7056: GLenum, arg_7057: GLint, arg_7058: GLint, arg_7059: GLint, arg_7060: GLsizei, arg_7061: GLsizei, arg_7062: GLenum, arg_7063: GLenum, arg_7064: ?*const anyopaque) void {
    return glad_glTextureSubImage2DEXT.?(arg_7055, arg_7056, arg_7057, arg_7058, arg_7059, arg_7060, arg_7061, arg_7062, arg_7063, arg_7064);
}
pub inline fn glTextureSubImage3D(arg_7065: GLuint, arg_7066: GLint, arg_7067: GLint, arg_7068: GLint, arg_7069: GLint, arg_7070: GLsizei, arg_7071: GLsizei, arg_7072: GLsizei, arg_7073: GLenum, arg_7074: GLenum, arg_7075: ?*const anyopaque) void {
    return glad_glTextureSubImage3D.?(arg_7065, arg_7066, arg_7067, arg_7068, arg_7069, arg_7070, arg_7071, arg_7072, arg_7073, arg_7074, arg_7075);
}
pub inline fn glTextureSubImage3DEXT(arg_7076: GLuint, arg_7077: GLenum, arg_7078: GLint, arg_7079: GLint, arg_7080: GLint, arg_7081: GLint, arg_7082: GLsizei, arg_7083: GLsizei, arg_7084: GLsizei, arg_7085: GLenum, arg_7086: GLenum, arg_7087: ?*const anyopaque) void {
    return glad_glTextureSubImage3DEXT.?(arg_7076, arg_7077, arg_7078, arg_7079, arg_7080, arg_7081, arg_7082, arg_7083, arg_7084, arg_7085, arg_7086, arg_7087);
}
pub inline fn glTextureView(arg_7088: GLuint, arg_7089: GLenum, arg_7090: GLuint, arg_7091: GLenum, arg_7092: GLuint, arg_7093: GLuint, arg_7094: GLuint, arg_7095: GLuint) void {
    return glad_glTextureView.?(arg_7088, arg_7089, arg_7090, arg_7091, arg_7092, arg_7093, arg_7094, arg_7095);
}
pub inline fn glTrackMatrixNV(arg_7096: GLenum, arg_7097: GLuint, arg_7098: GLenum, arg_7099: GLenum) void {
    return glad_glTrackMatrixNV.?(arg_7096, arg_7097, arg_7098, arg_7099);
}
pub inline fn glTransformFeedbackAttribsNV(arg_7100: GLsizei, arg_7101: [*c]const GLint, arg_7102: GLenum) void {
    return glad_glTransformFeedbackAttribsNV.?(arg_7100, arg_7101, arg_7102);
}
pub inline fn glTransformFeedbackBufferBase(arg_7103: GLuint, arg_7104: GLuint, arg_7105: GLuint) void {
    return glad_glTransformFeedbackBufferBase.?(arg_7103, arg_7104, arg_7105);
}
pub inline fn glTransformFeedbackBufferRange(arg_7106: GLuint, arg_7107: GLuint, arg_7108: GLuint, arg_7109: GLintptr, arg_7110: GLsizeiptr) void {
    return glad_glTransformFeedbackBufferRange.?(arg_7106, arg_7107, arg_7108, arg_7109, arg_7110);
}
pub inline fn glTransformFeedbackStreamAttribsNV(arg_7111: GLsizei, arg_7112: [*c]const GLint, arg_7113: GLsizei, arg_7114: [*c]const GLint, arg_7115: GLenum) void {
    return glad_glTransformFeedbackStreamAttribsNV.?(arg_7111, arg_7112, arg_7113, arg_7114, arg_7115);
}
pub inline fn glTransformFeedbackVaryings(arg_7116: GLuint, arg_7117: GLsizei, arg_7118: [*c]const [*c]const GLchar, arg_7119: GLenum) void {
    return glad_glTransformFeedbackVaryings.?(arg_7116, arg_7117, arg_7118, arg_7119);
}
pub inline fn glTransformFeedbackVaryingsEXT(arg_7120: GLuint, arg_7121: GLsizei, arg_7122: [*c]const [*c]const GLchar, arg_7123: GLenum) void {
    return glad_glTransformFeedbackVaryingsEXT.?(arg_7120, arg_7121, arg_7122, arg_7123);
}
pub inline fn glTransformFeedbackVaryingsNV(arg_7124: GLuint, arg_7125: GLsizei, arg_7126: [*c]const GLint, arg_7127: GLenum) void {
    return glad_glTransformFeedbackVaryingsNV.?(arg_7124, arg_7125, arg_7126, arg_7127);
}
pub inline fn glTransformPathNV(arg_7128: GLuint, arg_7129: GLuint, arg_7130: GLenum, arg_7131: [*c]const GLfloat) void {
    return glad_glTransformPathNV.?(arg_7128, arg_7129, arg_7130, arg_7131);
}
pub inline fn glTranslatexOES(arg_7132: GLfixed, arg_7133: GLfixed, arg_7134: GLfixed) void {
    return glad_glTranslatexOES.?(arg_7132, arg_7133, arg_7134);
}
pub inline fn glUniform1d(arg_7135: GLint, arg_7136: GLdouble) void {
    return glad_glUniform1d.?(arg_7135, arg_7136);
}
pub inline fn glUniform1dv(arg_7137: GLint, arg_7138: GLsizei, arg_7139: [*c]const GLdouble) void {
    return glad_glUniform1dv.?(arg_7137, arg_7138, arg_7139);
}
pub inline fn glUniform1f(arg_7140: GLint, arg_7141: GLfloat) void {
    return glad_glUniform1f.?(arg_7140, arg_7141);
}
pub inline fn glUniform1fARB(arg_7142: GLint, arg_7143: GLfloat) void {
    return glad_glUniform1fARB.?(arg_7142, arg_7143);
}
pub inline fn glUniform1fv(arg_7144: GLint, arg_7145: GLsizei, arg_7146: [*c]const GLfloat) void {
    return glad_glUniform1fv.?(arg_7144, arg_7145, arg_7146);
}
pub inline fn glUniform1fvARB(arg_7147: GLint, arg_7148: GLsizei, arg_7149: [*c]const GLfloat) void {
    return glad_glUniform1fvARB.?(arg_7147, arg_7148, arg_7149);
}
pub inline fn glUniform1i(arg_7150: GLint, arg_7151: GLint) void {
    return glad_glUniform1i.?(arg_7150, arg_7151);
}
pub inline fn glUniform1i64ARB(arg_7152: GLint, arg_7153: GLint64) void {
    return glad_glUniform1i64ARB.?(arg_7152, arg_7153);
}
pub inline fn glUniform1i64NV(arg_7154: GLint, arg_7155: GLint64EXT) void {
    return glad_glUniform1i64NV.?(arg_7154, arg_7155);
}
pub inline fn glUniform1i64vARB(arg_7156: GLint, arg_7157: GLsizei, arg_7158: [*c]const GLint64) void {
    return glad_glUniform1i64vARB.?(arg_7156, arg_7157, arg_7158);
}
pub inline fn glUniform1i64vNV(arg_7159: GLint, arg_7160: GLsizei, arg_7161: [*c]const GLint64EXT) void {
    return glad_glUniform1i64vNV.?(arg_7159, arg_7160, arg_7161);
}
pub inline fn glUniform1iARB(arg_7162: GLint, arg_7163: GLint) void {
    return glad_glUniform1iARB.?(arg_7162, arg_7163);
}
pub inline fn glUniform1iv(arg_7164: GLint, arg_7165: GLsizei, arg_7166: [*c]const GLint) void {
    return glad_glUniform1iv.?(arg_7164, arg_7165, arg_7166);
}
pub inline fn glUniform1ivARB(arg_7167: GLint, arg_7168: GLsizei, arg_7169: [*c]const GLint) void {
    return glad_glUniform1ivARB.?(arg_7167, arg_7168, arg_7169);
}
pub inline fn glUniform1ui(arg_7170: GLint, arg_7171: GLuint) void {
    return glad_glUniform1ui.?(arg_7170, arg_7171);
}
pub inline fn glUniform1ui64ARB(arg_7172: GLint, arg_7173: GLuint64) void {
    return glad_glUniform1ui64ARB.?(arg_7172, arg_7173);
}
pub inline fn glUniform1ui64NV(arg_7174: GLint, arg_7175: GLuint64EXT) void {
    return glad_glUniform1ui64NV.?(arg_7174, arg_7175);
}
pub inline fn glUniform1ui64vARB(arg_7176: GLint, arg_7177: GLsizei, arg_7178: [*c]const GLuint64) void {
    return glad_glUniform1ui64vARB.?(arg_7176, arg_7177, arg_7178);
}
pub inline fn glUniform1ui64vNV(arg_7179: GLint, arg_7180: GLsizei, arg_7181: [*c]const GLuint64EXT) void {
    return glad_glUniform1ui64vNV.?(arg_7179, arg_7180, arg_7181);
}
pub inline fn glUniform1uiEXT(arg_7182: GLint, arg_7183: GLuint) void {
    return glad_glUniform1uiEXT.?(arg_7182, arg_7183);
}
pub inline fn glUniform1uiv(arg_7184: GLint, arg_7185: GLsizei, arg_7186: [*c]const GLuint) void {
    return glad_glUniform1uiv.?(arg_7184, arg_7185, arg_7186);
}
pub inline fn glUniform1uivEXT(arg_7187: GLint, arg_7188: GLsizei, arg_7189: [*c]const GLuint) void {
    return glad_glUniform1uivEXT.?(arg_7187, arg_7188, arg_7189);
}
pub inline fn glUniform2d(arg_7190: GLint, arg_7191: GLdouble, arg_7192: GLdouble) void {
    return glad_glUniform2d.?(arg_7190, arg_7191, arg_7192);
}
pub inline fn glUniform2dv(arg_7193: GLint, arg_7194: GLsizei, arg_7195: [*c]const GLdouble) void {
    return glad_glUniform2dv.?(arg_7193, arg_7194, arg_7195);
}
pub inline fn glUniform2f(arg_7196: GLint, arg_7197: GLfloat, arg_7198: GLfloat) void {
    return glad_glUniform2f.?(arg_7196, arg_7197, arg_7198);
}
pub inline fn glUniform2fARB(arg_7199: GLint, arg_7200: GLfloat, arg_7201: GLfloat) void {
    return glad_glUniform2fARB.?(arg_7199, arg_7200, arg_7201);
}
pub inline fn glUniform2fv(arg_7202: GLint, arg_7203: GLsizei, arg_7204: [*c]const GLfloat) void {
    return glad_glUniform2fv.?(arg_7202, arg_7203, arg_7204);
}
pub inline fn glUniform2fvARB(arg_7205: GLint, arg_7206: GLsizei, arg_7207: [*c]const GLfloat) void {
    return glad_glUniform2fvARB.?(arg_7205, arg_7206, arg_7207);
}
pub inline fn glUniform2i(arg_7208: GLint, arg_7209: GLint, arg_7210: GLint) void {
    return glad_glUniform2i.?(arg_7208, arg_7209, arg_7210);
}
pub inline fn glUniform2i64ARB(arg_7211: GLint, arg_7212: GLint64, arg_7213: GLint64) void {
    return glad_glUniform2i64ARB.?(arg_7211, arg_7212, arg_7213);
}
pub inline fn glUniform2i64NV(arg_7214: GLint, arg_7215: GLint64EXT, arg_7216: GLint64EXT) void {
    return glad_glUniform2i64NV.?(arg_7214, arg_7215, arg_7216);
}
pub inline fn glUniform2i64vARB(arg_7217: GLint, arg_7218: GLsizei, arg_7219: [*c]const GLint64) void {
    return glad_glUniform2i64vARB.?(arg_7217, arg_7218, arg_7219);
}
pub inline fn glUniform2i64vNV(arg_7220: GLint, arg_7221: GLsizei, arg_7222: [*c]const GLint64EXT) void {
    return glad_glUniform2i64vNV.?(arg_7220, arg_7221, arg_7222);
}
pub inline fn glUniform2iARB(arg_7223: GLint, arg_7224: GLint, arg_7225: GLint) void {
    return glad_glUniform2iARB.?(arg_7223, arg_7224, arg_7225);
}
pub inline fn glUniform2iv(arg_7226: GLint, arg_7227: GLsizei, arg_7228: [*c]const GLint) void {
    return glad_glUniform2iv.?(arg_7226, arg_7227, arg_7228);
}
pub inline fn glUniform2ivARB(arg_7229: GLint, arg_7230: GLsizei, arg_7231: [*c]const GLint) void {
    return glad_glUniform2ivARB.?(arg_7229, arg_7230, arg_7231);
}
pub inline fn glUniform2ui(arg_7232: GLint, arg_7233: GLuint, arg_7234: GLuint) void {
    return glad_glUniform2ui.?(arg_7232, arg_7233, arg_7234);
}
pub inline fn glUniform2ui64ARB(arg_7235: GLint, arg_7236: GLuint64, arg_7237: GLuint64) void {
    return glad_glUniform2ui64ARB.?(arg_7235, arg_7236, arg_7237);
}
pub inline fn glUniform2ui64NV(arg_7238: GLint, arg_7239: GLuint64EXT, arg_7240: GLuint64EXT) void {
    return glad_glUniform2ui64NV.?(arg_7238, arg_7239, arg_7240);
}
pub inline fn glUniform2ui64vARB(arg_7241: GLint, arg_7242: GLsizei, arg_7243: [*c]const GLuint64) void {
    return glad_glUniform2ui64vARB.?(arg_7241, arg_7242, arg_7243);
}
pub inline fn glUniform2ui64vNV(arg_7244: GLint, arg_7245: GLsizei, arg_7246: [*c]const GLuint64EXT) void {
    return glad_glUniform2ui64vNV.?(arg_7244, arg_7245, arg_7246);
}
pub inline fn glUniform2uiEXT(arg_7247: GLint, arg_7248: GLuint, arg_7249: GLuint) void {
    return glad_glUniform2uiEXT.?(arg_7247, arg_7248, arg_7249);
}
pub inline fn glUniform2uiv(arg_7250: GLint, arg_7251: GLsizei, arg_7252: [*c]const GLuint) void {
    return glad_glUniform2uiv.?(arg_7250, arg_7251, arg_7252);
}
pub inline fn glUniform2uivEXT(arg_7253: GLint, arg_7254: GLsizei, arg_7255: [*c]const GLuint) void {
    return glad_glUniform2uivEXT.?(arg_7253, arg_7254, arg_7255);
}
pub inline fn glUniform3d(arg_7256: GLint, arg_7257: GLdouble, arg_7258: GLdouble, arg_7259: GLdouble) void {
    return glad_glUniform3d.?(arg_7256, arg_7257, arg_7258, arg_7259);
}
pub inline fn glUniform3dv(arg_7260: GLint, arg_7261: GLsizei, arg_7262: [*c]const GLdouble) void {
    return glad_glUniform3dv.?(arg_7260, arg_7261, arg_7262);
}
pub inline fn glUniform3f(arg_7263: GLint, arg_7264: GLfloat, arg_7265: GLfloat, arg_7266: GLfloat) void {
    return glad_glUniform3f.?(arg_7263, arg_7264, arg_7265, arg_7266);
}
pub inline fn glUniform3fARB(arg_7267: GLint, arg_7268: GLfloat, arg_7269: GLfloat, arg_7270: GLfloat) void {
    return glad_glUniform3fARB.?(arg_7267, arg_7268, arg_7269, arg_7270);
}
pub inline fn glUniform3fv(arg_7271: GLint, arg_7272: GLsizei, arg_7273: [*c]const GLfloat) void {
    return glad_glUniform3fv.?(arg_7271, arg_7272, arg_7273);
}
pub inline fn glUniform3fvARB(arg_7274: GLint, arg_7275: GLsizei, arg_7276: [*c]const GLfloat) void {
    return glad_glUniform3fvARB.?(arg_7274, arg_7275, arg_7276);
}
pub inline fn glUniform3i(arg_7277: GLint, arg_7278: GLint, arg_7279: GLint, arg_7280: GLint) void {
    return glad_glUniform3i.?(arg_7277, arg_7278, arg_7279, arg_7280);
}
pub inline fn glUniform3i64ARB(arg_7281: GLint, arg_7282: GLint64, arg_7283: GLint64, arg_7284: GLint64) void {
    return glad_glUniform3i64ARB.?(arg_7281, arg_7282, arg_7283, arg_7284);
}
pub inline fn glUniform3i64NV(arg_7285: GLint, arg_7286: GLint64EXT, arg_7287: GLint64EXT, arg_7288: GLint64EXT) void {
    return glad_glUniform3i64NV.?(arg_7285, arg_7286, arg_7287, arg_7288);
}
pub inline fn glUniform3i64vARB(arg_7289: GLint, arg_7290: GLsizei, arg_7291: [*c]const GLint64) void {
    return glad_glUniform3i64vARB.?(arg_7289, arg_7290, arg_7291);
}
pub inline fn glUniform3i64vNV(arg_7292: GLint, arg_7293: GLsizei, arg_7294: [*c]const GLint64EXT) void {
    return glad_glUniform3i64vNV.?(arg_7292, arg_7293, arg_7294);
}
pub inline fn glUniform3iARB(arg_7295: GLint, arg_7296: GLint, arg_7297: GLint, arg_7298: GLint) void {
    return glad_glUniform3iARB.?(arg_7295, arg_7296, arg_7297, arg_7298);
}
pub inline fn glUniform3iv(arg_7299: GLint, arg_7300: GLsizei, arg_7301: [*c]const GLint) void {
    return glad_glUniform3iv.?(arg_7299, arg_7300, arg_7301);
}
pub inline fn glUniform3ivARB(arg_7302: GLint, arg_7303: GLsizei, arg_7304: [*c]const GLint) void {
    return glad_glUniform3ivARB.?(arg_7302, arg_7303, arg_7304);
}
pub inline fn glUniform3ui(arg_7305: GLint, arg_7306: GLuint, arg_7307: GLuint, arg_7308: GLuint) void {
    return glad_glUniform3ui.?(arg_7305, arg_7306, arg_7307, arg_7308);
}
pub inline fn glUniform3ui64ARB(arg_7309: GLint, arg_7310: GLuint64, arg_7311: GLuint64, arg_7312: GLuint64) void {
    return glad_glUniform3ui64ARB.?(arg_7309, arg_7310, arg_7311, arg_7312);
}
pub inline fn glUniform3ui64NV(arg_7313: GLint, arg_7314: GLuint64EXT, arg_7315: GLuint64EXT, arg_7316: GLuint64EXT) void {
    return glad_glUniform3ui64NV.?(arg_7313, arg_7314, arg_7315, arg_7316);
}
pub inline fn glUniform3ui64vARB(arg_7317: GLint, arg_7318: GLsizei, arg_7319: [*c]const GLuint64) void {
    return glad_glUniform3ui64vARB.?(arg_7317, arg_7318, arg_7319);
}
pub inline fn glUniform3ui64vNV(arg_7320: GLint, arg_7321: GLsizei, arg_7322: [*c]const GLuint64EXT) void {
    return glad_glUniform3ui64vNV.?(arg_7320, arg_7321, arg_7322);
}
pub inline fn glUniform3uiEXT(arg_7323: GLint, arg_7324: GLuint, arg_7325: GLuint, arg_7326: GLuint) void {
    return glad_glUniform3uiEXT.?(arg_7323, arg_7324, arg_7325, arg_7326);
}
pub inline fn glUniform3uiv(arg_7327: GLint, arg_7328: GLsizei, arg_7329: [*c]const GLuint) void {
    return glad_glUniform3uiv.?(arg_7327, arg_7328, arg_7329);
}
pub inline fn glUniform3uivEXT(arg_7330: GLint, arg_7331: GLsizei, arg_7332: [*c]const GLuint) void {
    return glad_glUniform3uivEXT.?(arg_7330, arg_7331, arg_7332);
}
pub inline fn glUniform4d(arg_7333: GLint, arg_7334: GLdouble, arg_7335: GLdouble, arg_7336: GLdouble, arg_7337: GLdouble) void {
    return glad_glUniform4d.?(arg_7333, arg_7334, arg_7335, arg_7336, arg_7337);
}
pub inline fn glUniform4dv(arg_7338: GLint, arg_7339: GLsizei, arg_7340: [*c]const GLdouble) void {
    return glad_glUniform4dv.?(arg_7338, arg_7339, arg_7340);
}
pub inline fn glUniform4f(arg_7341: GLint, arg_7342: GLfloat, arg_7343: GLfloat, arg_7344: GLfloat, arg_7345: GLfloat) void {
    return glad_glUniform4f.?(arg_7341, arg_7342, arg_7343, arg_7344, arg_7345);
}
pub inline fn glUniform4fARB(arg_7346: GLint, arg_7347: GLfloat, arg_7348: GLfloat, arg_7349: GLfloat, arg_7350: GLfloat) void {
    return glad_glUniform4fARB.?(arg_7346, arg_7347, arg_7348, arg_7349, arg_7350);
}
pub inline fn glUniform4fv(arg_7351: GLint, arg_7352: GLsizei, arg_7353: [*c]const GLfloat) void {
    return glad_glUniform4fv.?(arg_7351, arg_7352, arg_7353);
}
pub inline fn glUniform4fvARB(arg_7354: GLint, arg_7355: GLsizei, arg_7356: [*c]const GLfloat) void {
    return glad_glUniform4fvARB.?(arg_7354, arg_7355, arg_7356);
}
pub inline fn glUniform4i(arg_7357: GLint, arg_7358: GLint, arg_7359: GLint, arg_7360: GLint, arg_7361: GLint) void {
    return glad_glUniform4i.?(arg_7357, arg_7358, arg_7359, arg_7360, arg_7361);
}
pub inline fn glUniform4i64ARB(arg_7362: GLint, arg_7363: GLint64, arg_7364: GLint64, arg_7365: GLint64, arg_7366: GLint64) void {
    return glad_glUniform4i64ARB.?(arg_7362, arg_7363, arg_7364, arg_7365, arg_7366);
}
pub inline fn glUniform4i64NV(arg_7367: GLint, arg_7368: GLint64EXT, arg_7369: GLint64EXT, arg_7370: GLint64EXT, arg_7371: GLint64EXT) void {
    return glad_glUniform4i64NV.?(arg_7367, arg_7368, arg_7369, arg_7370, arg_7371);
}
pub inline fn glUniform4i64vARB(arg_7372: GLint, arg_7373: GLsizei, arg_7374: [*c]const GLint64) void {
    return glad_glUniform4i64vARB.?(arg_7372, arg_7373, arg_7374);
}
pub inline fn glUniform4i64vNV(arg_7375: GLint, arg_7376: GLsizei, arg_7377: [*c]const GLint64EXT) void {
    return glad_glUniform4i64vNV.?(arg_7375, arg_7376, arg_7377);
}
pub inline fn glUniform4iARB(arg_7378: GLint, arg_7379: GLint, arg_7380: GLint, arg_7381: GLint, arg_7382: GLint) void {
    return glad_glUniform4iARB.?(arg_7378, arg_7379, arg_7380, arg_7381, arg_7382);
}
pub inline fn glUniform4iv(arg_7383: GLint, arg_7384: GLsizei, arg_7385: [*c]const GLint) void {
    return glad_glUniform4iv.?(arg_7383, arg_7384, arg_7385);
}
pub inline fn glUniform4ivARB(arg_7386: GLint, arg_7387: GLsizei, arg_7388: [*c]const GLint) void {
    return glad_glUniform4ivARB.?(arg_7386, arg_7387, arg_7388);
}
pub inline fn glUniform4ui(arg_7389: GLint, arg_7390: GLuint, arg_7391: GLuint, arg_7392: GLuint, arg_7393: GLuint) void {
    return glad_glUniform4ui.?(arg_7389, arg_7390, arg_7391, arg_7392, arg_7393);
}
pub inline fn glUniform4ui64ARB(arg_7394: GLint, arg_7395: GLuint64, arg_7396: GLuint64, arg_7397: GLuint64, arg_7398: GLuint64) void {
    return glad_glUniform4ui64ARB.?(arg_7394, arg_7395, arg_7396, arg_7397, arg_7398);
}
pub inline fn glUniform4ui64NV(arg_7399: GLint, arg_7400: GLuint64EXT, arg_7401: GLuint64EXT, arg_7402: GLuint64EXT, arg_7403: GLuint64EXT) void {
    return glad_glUniform4ui64NV.?(arg_7399, arg_7400, arg_7401, arg_7402, arg_7403);
}
pub inline fn glUniform4ui64vARB(arg_7404: GLint, arg_7405: GLsizei, arg_7406: [*c]const GLuint64) void {
    return glad_glUniform4ui64vARB.?(arg_7404, arg_7405, arg_7406);
}
pub inline fn glUniform4ui64vNV(arg_7407: GLint, arg_7408: GLsizei, arg_7409: [*c]const GLuint64EXT) void {
    return glad_glUniform4ui64vNV.?(arg_7407, arg_7408, arg_7409);
}
pub inline fn glUniform4uiEXT(arg_7410: GLint, arg_7411: GLuint, arg_7412: GLuint, arg_7413: GLuint, arg_7414: GLuint) void {
    return glad_glUniform4uiEXT.?(arg_7410, arg_7411, arg_7412, arg_7413, arg_7414);
}
pub inline fn glUniform4uiv(arg_7415: GLint, arg_7416: GLsizei, arg_7417: [*c]const GLuint) void {
    return glad_glUniform4uiv.?(arg_7415, arg_7416, arg_7417);
}
pub inline fn glUniform4uivEXT(arg_7418: GLint, arg_7419: GLsizei, arg_7420: [*c]const GLuint) void {
    return glad_glUniform4uivEXT.?(arg_7418, arg_7419, arg_7420);
}
pub inline fn glUniformBlockBinding(arg_7421: GLuint, arg_7422: GLuint, arg_7423: GLuint) void {
    return glad_glUniformBlockBinding.?(arg_7421, arg_7422, arg_7423);
}
pub inline fn glUniformBufferEXT(arg_7424: GLuint, arg_7425: GLint, arg_7426: GLuint) void {
    return glad_glUniformBufferEXT.?(arg_7424, arg_7425, arg_7426);
}
pub inline fn glUniformHandleui64ARB(arg_7427: GLint, arg_7428: GLuint64) void {
    return glad_glUniformHandleui64ARB.?(arg_7427, arg_7428);
}
pub inline fn glUniformHandleui64NV(arg_7429: GLint, arg_7430: GLuint64) void {
    return glad_glUniformHandleui64NV.?(arg_7429, arg_7430);
}
pub inline fn glUniformHandleui64vARB(arg_7431: GLint, arg_7432: GLsizei, arg_7433: [*c]const GLuint64) void {
    return glad_glUniformHandleui64vARB.?(arg_7431, arg_7432, arg_7433);
}
pub inline fn glUniformHandleui64vNV(arg_7434: GLint, arg_7435: GLsizei, arg_7436: [*c]const GLuint64) void {
    return glad_glUniformHandleui64vNV.?(arg_7434, arg_7435, arg_7436);
}
pub inline fn glUniformMatrix2dv(arg_7437: GLint, arg_7438: GLsizei, arg_7439: GLboolean, arg_7440: [*c]const GLdouble) void {
    return glad_glUniformMatrix2dv.?(arg_7437, arg_7438, arg_7439, arg_7440);
}
pub inline fn glUniformMatrix2fv(arg_7441: GLint, arg_7442: GLsizei, arg_7443: GLboolean, arg_7444: [*c]const GLfloat) void {
    return glad_glUniformMatrix2fv.?(arg_7441, arg_7442, arg_7443, arg_7444);
}
pub inline fn glUniformMatrix2fvARB(arg_7445: GLint, arg_7446: GLsizei, arg_7447: GLboolean, arg_7448: [*c]const GLfloat) void {
    return glad_glUniformMatrix2fvARB.?(arg_7445, arg_7446, arg_7447, arg_7448);
}
pub inline fn glUniformMatrix2x3dv(arg_7449: GLint, arg_7450: GLsizei, arg_7451: GLboolean, arg_7452: [*c]const GLdouble) void {
    return glad_glUniformMatrix2x3dv.?(arg_7449, arg_7450, arg_7451, arg_7452);
}
pub inline fn glUniformMatrix2x3fv(arg_7453: GLint, arg_7454: GLsizei, arg_7455: GLboolean, arg_7456: [*c]const GLfloat) void {
    return glad_glUniformMatrix2x3fv.?(arg_7453, arg_7454, arg_7455, arg_7456);
}
pub inline fn glUniformMatrix2x4dv(arg_7457: GLint, arg_7458: GLsizei, arg_7459: GLboolean, arg_7460: [*c]const GLdouble) void {
    return glad_glUniformMatrix2x4dv.?(arg_7457, arg_7458, arg_7459, arg_7460);
}
pub inline fn glUniformMatrix2x4fv(arg_7461: GLint, arg_7462: GLsizei, arg_7463: GLboolean, arg_7464: [*c]const GLfloat) void {
    return glad_glUniformMatrix2x4fv.?(arg_7461, arg_7462, arg_7463, arg_7464);
}
pub inline fn glUniformMatrix3dv(arg_7465: GLint, arg_7466: GLsizei, arg_7467: GLboolean, arg_7468: [*c]const GLdouble) void {
    return glad_glUniformMatrix3dv.?(arg_7465, arg_7466, arg_7467, arg_7468);
}
pub inline fn glUniformMatrix3fv(arg_7469: GLint, arg_7470: GLsizei, arg_7471: GLboolean, arg_7472: [*c]const GLfloat) void {
    return glad_glUniformMatrix3fv.?(arg_7469, arg_7470, arg_7471, arg_7472);
}
pub inline fn glUniformMatrix3fvARB(arg_7473: GLint, arg_7474: GLsizei, arg_7475: GLboolean, arg_7476: [*c]const GLfloat) void {
    return glad_glUniformMatrix3fvARB.?(arg_7473, arg_7474, arg_7475, arg_7476);
}
pub inline fn glUniformMatrix3x2dv(arg_7477: GLint, arg_7478: GLsizei, arg_7479: GLboolean, arg_7480: [*c]const GLdouble) void {
    return glad_glUniformMatrix3x2dv.?(arg_7477, arg_7478, arg_7479, arg_7480);
}
pub inline fn glUniformMatrix3x2fv(arg_7481: GLint, arg_7482: GLsizei, arg_7483: GLboolean, arg_7484: [*c]const GLfloat) void {
    return glad_glUniformMatrix3x2fv.?(arg_7481, arg_7482, arg_7483, arg_7484);
}
pub inline fn glUniformMatrix3x4dv(arg_7485: GLint, arg_7486: GLsizei, arg_7487: GLboolean, arg_7488: [*c]const GLdouble) void {
    return glad_glUniformMatrix3x4dv.?(arg_7485, arg_7486, arg_7487, arg_7488);
}
pub inline fn glUniformMatrix3x4fv(arg_7489: GLint, arg_7490: GLsizei, arg_7491: GLboolean, arg_7492: [*c]const GLfloat) void {
    return glad_glUniformMatrix3x4fv.?(arg_7489, arg_7490, arg_7491, arg_7492);
}
pub inline fn glUniformMatrix4dv(arg_7493: GLint, arg_7494: GLsizei, arg_7495: GLboolean, arg_7496: [*c]const GLdouble) void {
    return glad_glUniformMatrix4dv.?(arg_7493, arg_7494, arg_7495, arg_7496);
}
pub inline fn glUniformMatrix4fv(arg_7497: GLint, arg_7498: GLsizei, arg_7499: GLboolean, arg_7500: [*c]const GLfloat) void {
    return glad_glUniformMatrix4fv.?(arg_7497, arg_7498, arg_7499, arg_7500);
}
pub inline fn glUniformMatrix4fvARB(arg_7501: GLint, arg_7502: GLsizei, arg_7503: GLboolean, arg_7504: [*c]const GLfloat) void {
    return glad_glUniformMatrix4fvARB.?(arg_7501, arg_7502, arg_7503, arg_7504);
}
pub inline fn glUniformMatrix4x2dv(arg_7505: GLint, arg_7506: GLsizei, arg_7507: GLboolean, arg_7508: [*c]const GLdouble) void {
    return glad_glUniformMatrix4x2dv.?(arg_7505, arg_7506, arg_7507, arg_7508);
}
pub inline fn glUniformMatrix4x2fv(arg_7509: GLint, arg_7510: GLsizei, arg_7511: GLboolean, arg_7512: [*c]const GLfloat) void {
    return glad_glUniformMatrix4x2fv.?(arg_7509, arg_7510, arg_7511, arg_7512);
}
pub inline fn glUniformMatrix4x3dv(arg_7513: GLint, arg_7514: GLsizei, arg_7515: GLboolean, arg_7516: [*c]const GLdouble) void {
    return glad_glUniformMatrix4x3dv.?(arg_7513, arg_7514, arg_7515, arg_7516);
}
pub inline fn glUniformMatrix4x3fv(arg_7517: GLint, arg_7518: GLsizei, arg_7519: GLboolean, arg_7520: [*c]const GLfloat) void {
    return glad_glUniformMatrix4x3fv.?(arg_7517, arg_7518, arg_7519, arg_7520);
}
pub inline fn glUniformSubroutinesuiv(arg_7521: GLenum, arg_7522: GLsizei, arg_7523: [*c]const GLuint) void {
    return glad_glUniformSubroutinesuiv.?(arg_7521, arg_7522, arg_7523);
}
pub inline fn glUniformui64NV(arg_7524: GLint, arg_7525: GLuint64EXT) void {
    return glad_glUniformui64NV.?(arg_7524, arg_7525);
}
pub inline fn glUniformui64vNV(arg_7526: GLint, arg_7527: GLsizei, arg_7528: [*c]const GLuint64EXT) void {
    return glad_glUniformui64vNV.?(arg_7526, arg_7527, arg_7528);
}
pub inline fn glUnlockArraysEXT() void {
    return glad_glUnlockArraysEXT.?();
}
pub inline fn glUnmapBuffer(arg_7529: GLenum) GLboolean {
    return glad_glUnmapBuffer.?(arg_7529);
}
pub inline fn glUnmapBufferARB(arg_7530: GLenum) GLboolean {
    return glad_glUnmapBufferARB.?(arg_7530);
}
pub inline fn glUnmapNamedBuffer(arg_7531: GLuint) GLboolean {
    return glad_glUnmapNamedBuffer.?(arg_7531);
}
pub inline fn glUnmapNamedBufferEXT(arg_7532: GLuint) GLboolean {
    return glad_glUnmapNamedBufferEXT.?(arg_7532);
}
pub inline fn glUnmapObjectBufferATI(arg_7533: GLuint) void {
    return glad_glUnmapObjectBufferATI.?(arg_7533);
}
pub inline fn glUnmapTexture2DINTEL(arg_7534: GLuint, arg_7535: GLint) void {
    return glad_glUnmapTexture2DINTEL.?(arg_7534, arg_7535);
}
pub inline fn glUpdateObjectBufferATI(arg_7536: GLuint, arg_7537: GLuint, arg_7538: GLsizei, arg_7539: ?*const anyopaque, arg_7540: GLenum) void {
    return glad_glUpdateObjectBufferATI.?(arg_7536, arg_7537, arg_7538, arg_7539, arg_7540);
}
pub inline fn glUploadGpuMaskNVX(arg_7541: GLbitfield) void {
    return glad_glUploadGpuMaskNVX.?(arg_7541);
}
pub inline fn glUseProgram(arg_7542: GLuint) void {
    return glad_glUseProgram.?(arg_7542);
}
pub inline fn glUseProgramObjectARB(arg_7543: GLhandleARB) void {
    return glad_glUseProgramObjectARB.?(arg_7543);
}
pub inline fn glUseProgramStages(arg_7544: GLuint, arg_7545: GLbitfield, arg_7546: GLuint) void {
    return glad_glUseProgramStages.?(arg_7544, arg_7545, arg_7546);
}
pub inline fn glUseShaderProgramEXT(arg_7547: GLenum, arg_7548: GLuint) void {
    return glad_glUseShaderProgramEXT.?(arg_7547, arg_7548);
}
pub inline fn glVDPAUFiniNV() void {
    return glad_glVDPAUFiniNV.?();
}
pub inline fn glVDPAUGetSurfaceivNV(arg_7549: GLvdpauSurfaceNV, arg_7550: GLenum, arg_7551: GLsizei, arg_7552: [*c]GLsizei, arg_7553: [*c]GLint) void {
    return glad_glVDPAUGetSurfaceivNV.?(arg_7549, arg_7550, arg_7551, arg_7552, arg_7553);
}
pub inline fn glVDPAUInitNV(arg_7554: ?*const anyopaque, arg_7555: ?*const anyopaque) void {
    return glad_glVDPAUInitNV.?(arg_7554, arg_7555);
}
pub inline fn glVDPAUIsSurfaceNV(arg_7556: GLvdpauSurfaceNV) GLboolean {
    return glad_glVDPAUIsSurfaceNV.?(arg_7556);
}
pub inline fn glVDPAUMapSurfacesNV(arg_7557: GLsizei, arg_7558: [*c]const GLvdpauSurfaceNV) void {
    return glad_glVDPAUMapSurfacesNV.?(arg_7557, arg_7558);
}
pub inline fn glVDPAURegisterOutputSurfaceNV(arg_7559: ?*const anyopaque, arg_7560: GLenum, arg_7561: GLsizei, arg_7562: [*c]const GLuint) GLvdpauSurfaceNV {
    return glad_glVDPAURegisterOutputSurfaceNV.?(arg_7559, arg_7560, arg_7561, arg_7562);
}
pub inline fn glVDPAURegisterVideoSurfaceNV(arg_7563: ?*const anyopaque, arg_7564: GLenum, arg_7565: GLsizei, arg_7566: [*c]const GLuint) GLvdpauSurfaceNV {
    return glad_glVDPAURegisterVideoSurfaceNV.?(arg_7563, arg_7564, arg_7565, arg_7566);
}
pub inline fn glVDPAURegisterVideoSurfaceWithPictureStructureNV(arg_7567: ?*const anyopaque, arg_7568: GLenum, arg_7569: GLsizei, arg_7570: [*c]const GLuint, arg_7571: GLboolean) GLvdpauSurfaceNV {
    return glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV.?(arg_7567, arg_7568, arg_7569, arg_7570, arg_7571);
}
pub inline fn glVDPAUSurfaceAccessNV(arg_7572: GLvdpauSurfaceNV, arg_7573: GLenum) void {
    return glad_glVDPAUSurfaceAccessNV.?(arg_7572, arg_7573);
}
pub inline fn glVDPAUUnmapSurfacesNV(arg_7574: GLsizei, arg_7575: [*c]const GLvdpauSurfaceNV) void {
    return glad_glVDPAUUnmapSurfacesNV.?(arg_7574, arg_7575);
}
pub inline fn glVDPAUUnregisterSurfaceNV(arg_7576: GLvdpauSurfaceNV) void {
    return glad_glVDPAUUnregisterSurfaceNV.?(arg_7576);
}
pub inline fn glValidateProgram(arg_7577: GLuint) void {
    return glad_glValidateProgram.?(arg_7577);
}
pub inline fn glValidateProgramARB(arg_7578: GLhandleARB) void {
    return glad_glValidateProgramARB.?(arg_7578);
}
pub inline fn glValidateProgramPipeline(arg_7579: GLuint) void {
    return glad_glValidateProgramPipeline.?(arg_7579);
}
pub inline fn glVariantArrayObjectATI(arg_7580: GLuint, arg_7581: GLenum, arg_7582: GLsizei, arg_7583: GLuint, arg_7584: GLuint) void {
    return glad_glVariantArrayObjectATI.?(arg_7580, arg_7581, arg_7582, arg_7583, arg_7584);
}
pub inline fn glVariantPointerEXT(arg_7585: GLuint, arg_7586: GLenum, arg_7587: GLuint, arg_7588: ?*const anyopaque) void {
    return glad_glVariantPointerEXT.?(arg_7585, arg_7586, arg_7587, arg_7588);
}
pub inline fn glVariantbvEXT(arg_7589: GLuint, arg_7590: [*c]const GLbyte) void {
    return glad_glVariantbvEXT.?(arg_7589, arg_7590);
}
pub inline fn glVariantdvEXT(arg_7591: GLuint, arg_7592: [*c]const GLdouble) void {
    return glad_glVariantdvEXT.?(arg_7591, arg_7592);
}
pub inline fn glVariantfvEXT(arg_7593: GLuint, arg_7594: [*c]const GLfloat) void {
    return glad_glVariantfvEXT.?(arg_7593, arg_7594);
}
pub inline fn glVariantivEXT(arg_7595: GLuint, arg_7596: [*c]const GLint) void {
    return glad_glVariantivEXT.?(arg_7595, arg_7596);
}
pub inline fn glVariantsvEXT(arg_7597: GLuint, arg_7598: [*c]const GLshort) void {
    return glad_glVariantsvEXT.?(arg_7597, arg_7598);
}
pub inline fn glVariantubvEXT(arg_7599: GLuint, arg_7600: [*c]const GLubyte) void {
    return glad_glVariantubvEXT.?(arg_7599, arg_7600);
}
pub inline fn glVariantuivEXT(arg_7601: GLuint, arg_7602: [*c]const GLuint) void {
    return glad_glVariantuivEXT.?(arg_7601, arg_7602);
}
pub inline fn glVariantusvEXT(arg_7603: GLuint, arg_7604: [*c]const GLushort) void {
    return glad_glVariantusvEXT.?(arg_7603, arg_7604);
}
pub inline fn glVertex2bOES(arg_7605: GLbyte, arg_7606: GLbyte) void {
    return glad_glVertex2bOES.?(arg_7605, arg_7606);
}
pub inline fn glVertex2bvOES(arg_7607: [*c]const GLbyte) void {
    return glad_glVertex2bvOES.?(arg_7607);
}
pub inline fn glVertex2hNV(arg_7608: GLhalfNV, arg_7609: GLhalfNV) void {
    return glad_glVertex2hNV.?(arg_7608, arg_7609);
}
pub inline fn glVertex2hvNV(arg_7610: [*c]const GLhalfNV) void {
    return glad_glVertex2hvNV.?(arg_7610);
}
pub inline fn glVertex2xOES(arg_7611: GLfixed) void {
    return glad_glVertex2xOES.?(arg_7611);
}
pub inline fn glVertex2xvOES(arg_7612: [*c]const GLfixed) void {
    return glad_glVertex2xvOES.?(arg_7612);
}
pub inline fn glVertex3bOES(arg_7613: GLbyte, arg_7614: GLbyte, arg_7615: GLbyte) void {
    return glad_glVertex3bOES.?(arg_7613, arg_7614, arg_7615);
}
pub inline fn glVertex3bvOES(arg_7616: [*c]const GLbyte) void {
    return glad_glVertex3bvOES.?(arg_7616);
}
pub inline fn glVertex3hNV(arg_7617: GLhalfNV, arg_7618: GLhalfNV, arg_7619: GLhalfNV) void {
    return glad_glVertex3hNV.?(arg_7617, arg_7618, arg_7619);
}
pub inline fn glVertex3hvNV(arg_7620: [*c]const GLhalfNV) void {
    return glad_glVertex3hvNV.?(arg_7620);
}
pub inline fn glVertex3xOES(arg_7621: GLfixed, arg_7622: GLfixed) void {
    return glad_glVertex3xOES.?(arg_7621, arg_7622);
}
pub inline fn glVertex3xvOES(arg_7623: [*c]const GLfixed) void {
    return glad_glVertex3xvOES.?(arg_7623);
}
pub inline fn glVertex4bOES(arg_7624: GLbyte, arg_7625: GLbyte, arg_7626: GLbyte, arg_7627: GLbyte) void {
    return glad_glVertex4bOES.?(arg_7624, arg_7625, arg_7626, arg_7627);
}
pub inline fn glVertex4bvOES(arg_7628: [*c]const GLbyte) void {
    return glad_glVertex4bvOES.?(arg_7628);
}
pub inline fn glVertex4hNV(arg_7629: GLhalfNV, arg_7630: GLhalfNV, arg_7631: GLhalfNV, arg_7632: GLhalfNV) void {
    return glad_glVertex4hNV.?(arg_7629, arg_7630, arg_7631, arg_7632);
}
pub inline fn glVertex4hvNV(arg_7633: [*c]const GLhalfNV) void {
    return glad_glVertex4hvNV.?(arg_7633);
}
pub inline fn glVertex4xOES(arg_7634: GLfixed, arg_7635: GLfixed, arg_7636: GLfixed) void {
    return glad_glVertex4xOES.?(arg_7634, arg_7635, arg_7636);
}
pub inline fn glVertex4xvOES(arg_7637: [*c]const GLfixed) void {
    return glad_glVertex4xvOES.?(arg_7637);
}
pub inline fn glVertexArrayAttribBinding(arg_7638: GLuint, arg_7639: GLuint, arg_7640: GLuint) void {
    return glad_glVertexArrayAttribBinding.?(arg_7638, arg_7639, arg_7640);
}
pub inline fn glVertexArrayAttribFormat(arg_7641: GLuint, arg_7642: GLuint, arg_7643: GLint, arg_7644: GLenum, arg_7645: GLboolean, arg_7646: GLuint) void {
    return glad_glVertexArrayAttribFormat.?(arg_7641, arg_7642, arg_7643, arg_7644, arg_7645, arg_7646);
}
pub inline fn glVertexArrayAttribIFormat(arg_7647: GLuint, arg_7648: GLuint, arg_7649: GLint, arg_7650: GLenum, arg_7651: GLuint) void {
    return glad_glVertexArrayAttribIFormat.?(arg_7647, arg_7648, arg_7649, arg_7650, arg_7651);
}
pub inline fn glVertexArrayAttribLFormat(arg_7652: GLuint, arg_7653: GLuint, arg_7654: GLint, arg_7655: GLenum, arg_7656: GLuint) void {
    return glad_glVertexArrayAttribLFormat.?(arg_7652, arg_7653, arg_7654, arg_7655, arg_7656);
}
pub inline fn glVertexArrayBindVertexBufferEXT(arg_7657: GLuint, arg_7658: GLuint, arg_7659: GLuint, arg_7660: GLintptr, arg_7661: GLsizei) void {
    return glad_glVertexArrayBindVertexBufferEXT.?(arg_7657, arg_7658, arg_7659, arg_7660, arg_7661);
}
pub inline fn glVertexArrayBindingDivisor(arg_7662: GLuint, arg_7663: GLuint, arg_7664: GLuint) void {
    return glad_glVertexArrayBindingDivisor.?(arg_7662, arg_7663, arg_7664);
}
pub inline fn glVertexArrayColorOffsetEXT(arg_7665: GLuint, arg_7666: GLuint, arg_7667: GLint, arg_7668: GLenum, arg_7669: GLsizei, arg_7670: GLintptr) void {
    return glad_glVertexArrayColorOffsetEXT.?(arg_7665, arg_7666, arg_7667, arg_7668, arg_7669, arg_7670);
}
pub inline fn glVertexArrayEdgeFlagOffsetEXT(arg_7671: GLuint, arg_7672: GLuint, arg_7673: GLsizei, arg_7674: GLintptr) void {
    return glad_glVertexArrayEdgeFlagOffsetEXT.?(arg_7671, arg_7672, arg_7673, arg_7674);
}
pub inline fn glVertexArrayElementBuffer(arg_7675: GLuint, arg_7676: GLuint) void {
    return glad_glVertexArrayElementBuffer.?(arg_7675, arg_7676);
}
pub inline fn glVertexArrayFogCoordOffsetEXT(arg_7677: GLuint, arg_7678: GLuint, arg_7679: GLenum, arg_7680: GLsizei, arg_7681: GLintptr) void {
    return glad_glVertexArrayFogCoordOffsetEXT.?(arg_7677, arg_7678, arg_7679, arg_7680, arg_7681);
}
pub inline fn glVertexArrayIndexOffsetEXT(arg_7682: GLuint, arg_7683: GLuint, arg_7684: GLenum, arg_7685: GLsizei, arg_7686: GLintptr) void {
    return glad_glVertexArrayIndexOffsetEXT.?(arg_7682, arg_7683, arg_7684, arg_7685, arg_7686);
}
pub inline fn glVertexArrayMultiTexCoordOffsetEXT(arg_7687: GLuint, arg_7688: GLuint, arg_7689: GLenum, arg_7690: GLint, arg_7691: GLenum, arg_7692: GLsizei, arg_7693: GLintptr) void {
    return glad_glVertexArrayMultiTexCoordOffsetEXT.?(arg_7687, arg_7688, arg_7689, arg_7690, arg_7691, arg_7692, arg_7693);
}
pub inline fn glVertexArrayNormalOffsetEXT(arg_7694: GLuint, arg_7695: GLuint, arg_7696: GLenum, arg_7697: GLsizei, arg_7698: GLintptr) void {
    return glad_glVertexArrayNormalOffsetEXT.?(arg_7694, arg_7695, arg_7696, arg_7697, arg_7698);
}
pub inline fn glVertexArrayParameteriAPPLE(arg_7699: GLenum, arg_7700: GLint) void {
    return glad_glVertexArrayParameteriAPPLE.?(arg_7699, arg_7700);
}
pub inline fn glVertexArrayRangeAPPLE(arg_7701: GLsizei, arg_7702: ?*anyopaque) void {
    return glad_glVertexArrayRangeAPPLE.?(arg_7701, arg_7702);
}
pub inline fn glVertexArrayRangeNV(arg_7703: GLsizei, arg_7704: ?*const anyopaque) void {
    return glad_glVertexArrayRangeNV.?(arg_7703, arg_7704);
}
pub inline fn glVertexArraySecondaryColorOffsetEXT(arg_7705: GLuint, arg_7706: GLuint, arg_7707: GLint, arg_7708: GLenum, arg_7709: GLsizei, arg_7710: GLintptr) void {
    return glad_glVertexArraySecondaryColorOffsetEXT.?(arg_7705, arg_7706, arg_7707, arg_7708, arg_7709, arg_7710);
}
pub inline fn glVertexArrayTexCoordOffsetEXT(arg_7711: GLuint, arg_7712: GLuint, arg_7713: GLint, arg_7714: GLenum, arg_7715: GLsizei, arg_7716: GLintptr) void {
    return glad_glVertexArrayTexCoordOffsetEXT.?(arg_7711, arg_7712, arg_7713, arg_7714, arg_7715, arg_7716);
}
pub inline fn glVertexArrayVertexAttribBindingEXT(arg_7717: GLuint, arg_7718: GLuint, arg_7719: GLuint) void {
    return glad_glVertexArrayVertexAttribBindingEXT.?(arg_7717, arg_7718, arg_7719);
}
pub inline fn glVertexArrayVertexAttribDivisorEXT(arg_7720: GLuint, arg_7721: GLuint, arg_7722: GLuint) void {
    return glad_glVertexArrayVertexAttribDivisorEXT.?(arg_7720, arg_7721, arg_7722);
}
pub inline fn glVertexArrayVertexAttribFormatEXT(arg_7723: GLuint, arg_7724: GLuint, arg_7725: GLint, arg_7726: GLenum, arg_7727: GLboolean, arg_7728: GLuint) void {
    return glad_glVertexArrayVertexAttribFormatEXT.?(arg_7723, arg_7724, arg_7725, arg_7726, arg_7727, arg_7728);
}
pub inline fn glVertexArrayVertexAttribIFormatEXT(arg_7729: GLuint, arg_7730: GLuint, arg_7731: GLint, arg_7732: GLenum, arg_7733: GLuint) void {
    return glad_glVertexArrayVertexAttribIFormatEXT.?(arg_7729, arg_7730, arg_7731, arg_7732, arg_7733);
}
pub inline fn glVertexArrayVertexAttribIOffsetEXT(arg_7734: GLuint, arg_7735: GLuint, arg_7736: GLuint, arg_7737: GLint, arg_7738: GLenum, arg_7739: GLsizei, arg_7740: GLintptr) void {
    return glad_glVertexArrayVertexAttribIOffsetEXT.?(arg_7734, arg_7735, arg_7736, arg_7737, arg_7738, arg_7739, arg_7740);
}
pub inline fn glVertexArrayVertexAttribLFormatEXT(arg_7741: GLuint, arg_7742: GLuint, arg_7743: GLint, arg_7744: GLenum, arg_7745: GLuint) void {
    return glad_glVertexArrayVertexAttribLFormatEXT.?(arg_7741, arg_7742, arg_7743, arg_7744, arg_7745);
}
pub inline fn glVertexArrayVertexAttribLOffsetEXT(arg_7746: GLuint, arg_7747: GLuint, arg_7748: GLuint, arg_7749: GLint, arg_7750: GLenum, arg_7751: GLsizei, arg_7752: GLintptr) void {
    return glad_glVertexArrayVertexAttribLOffsetEXT.?(arg_7746, arg_7747, arg_7748, arg_7749, arg_7750, arg_7751, arg_7752);
}
pub inline fn glVertexArrayVertexAttribOffsetEXT(arg_7753: GLuint, arg_7754: GLuint, arg_7755: GLuint, arg_7756: GLint, arg_7757: GLenum, arg_7758: GLboolean, arg_7759: GLsizei, arg_7760: GLintptr) void {
    return glad_glVertexArrayVertexAttribOffsetEXT.?(arg_7753, arg_7754, arg_7755, arg_7756, arg_7757, arg_7758, arg_7759, arg_7760);
}
pub inline fn glVertexArrayVertexBindingDivisorEXT(arg_7761: GLuint, arg_7762: GLuint, arg_7763: GLuint) void {
    return glad_glVertexArrayVertexBindingDivisorEXT.?(arg_7761, arg_7762, arg_7763);
}
pub inline fn glVertexArrayVertexBuffer(arg_7764: GLuint, arg_7765: GLuint, arg_7766: GLuint, arg_7767: GLintptr, arg_7768: GLsizei) void {
    return glad_glVertexArrayVertexBuffer.?(arg_7764, arg_7765, arg_7766, arg_7767, arg_7768);
}
pub inline fn glVertexArrayVertexBuffers(arg_7769: GLuint, arg_7770: GLuint, arg_7771: GLsizei, arg_7772: [*c]const GLuint, arg_7773: [*c]const GLintptr, arg_7774: [*c]const GLsizei) void {
    return glad_glVertexArrayVertexBuffers.?(arg_7769, arg_7770, arg_7771, arg_7772, arg_7773, arg_7774);
}
pub inline fn glVertexArrayVertexOffsetEXT(arg_7775: GLuint, arg_7776: GLuint, arg_7777: GLint, arg_7778: GLenum, arg_7779: GLsizei, arg_7780: GLintptr) void {
    return glad_glVertexArrayVertexOffsetEXT.?(arg_7775, arg_7776, arg_7777, arg_7778, arg_7779, arg_7780);
}
pub inline fn glVertexAttrib1d(arg_7781: GLuint, arg_7782: GLdouble) void {
    return glad_glVertexAttrib1d.?(arg_7781, arg_7782);
}
pub inline fn glVertexAttrib1dARB(arg_7783: GLuint, arg_7784: GLdouble) void {
    return glad_glVertexAttrib1dARB.?(arg_7783, arg_7784);
}
pub inline fn glVertexAttrib1dNV(arg_7785: GLuint, arg_7786: GLdouble) void {
    return glad_glVertexAttrib1dNV.?(arg_7785, arg_7786);
}
pub inline fn glVertexAttrib1dv(arg_7787: GLuint, arg_7788: [*c]const GLdouble) void {
    return glad_glVertexAttrib1dv.?(arg_7787, arg_7788);
}
pub inline fn glVertexAttrib1dvARB(arg_7789: GLuint, arg_7790: [*c]const GLdouble) void {
    return glad_glVertexAttrib1dvARB.?(arg_7789, arg_7790);
}
pub inline fn glVertexAttrib1dvNV(arg_7791: GLuint, arg_7792: [*c]const GLdouble) void {
    return glad_glVertexAttrib1dvNV.?(arg_7791, arg_7792);
}
pub inline fn glVertexAttrib1f(arg_7793: GLuint, arg_7794: GLfloat) void {
    return glad_glVertexAttrib1f.?(arg_7793, arg_7794);
}
pub inline fn glVertexAttrib1fARB(arg_7795: GLuint, arg_7796: GLfloat) void {
    return glad_glVertexAttrib1fARB.?(arg_7795, arg_7796);
}
pub inline fn glVertexAttrib1fNV(arg_7797: GLuint, arg_7798: GLfloat) void {
    return glad_glVertexAttrib1fNV.?(arg_7797, arg_7798);
}
pub inline fn glVertexAttrib1fv(arg_7799: GLuint, arg_7800: [*c]const GLfloat) void {
    return glad_glVertexAttrib1fv.?(arg_7799, arg_7800);
}
pub inline fn glVertexAttrib1fvARB(arg_7801: GLuint, arg_7802: [*c]const GLfloat) void {
    return glad_glVertexAttrib1fvARB.?(arg_7801, arg_7802);
}
pub inline fn glVertexAttrib1fvNV(arg_7803: GLuint, arg_7804: [*c]const GLfloat) void {
    return glad_glVertexAttrib1fvNV.?(arg_7803, arg_7804);
}
pub inline fn glVertexAttrib1hNV(arg_7805: GLuint, arg_7806: GLhalfNV) void {
    return glad_glVertexAttrib1hNV.?(arg_7805, arg_7806);
}
pub inline fn glVertexAttrib1hvNV(arg_7807: GLuint, arg_7808: [*c]const GLhalfNV) void {
    return glad_glVertexAttrib1hvNV.?(arg_7807, arg_7808);
}
pub inline fn glVertexAttrib1s(arg_7809: GLuint, arg_7810: GLshort) void {
    return glad_glVertexAttrib1s.?(arg_7809, arg_7810);
}
pub inline fn glVertexAttrib1sARB(arg_7811: GLuint, arg_7812: GLshort) void {
    return glad_glVertexAttrib1sARB.?(arg_7811, arg_7812);
}
pub inline fn glVertexAttrib1sNV(arg_7813: GLuint, arg_7814: GLshort) void {
    return glad_glVertexAttrib1sNV.?(arg_7813, arg_7814);
}
pub inline fn glVertexAttrib1sv(arg_7815: GLuint, arg_7816: [*c]const GLshort) void {
    return glad_glVertexAttrib1sv.?(arg_7815, arg_7816);
}
pub inline fn glVertexAttrib1svARB(arg_7817: GLuint, arg_7818: [*c]const GLshort) void {
    return glad_glVertexAttrib1svARB.?(arg_7817, arg_7818);
}
pub inline fn glVertexAttrib1svNV(arg_7819: GLuint, arg_7820: [*c]const GLshort) void {
    return glad_glVertexAttrib1svNV.?(arg_7819, arg_7820);
}
pub inline fn glVertexAttrib2d(arg_7821: GLuint, arg_7822: GLdouble, arg_7823: GLdouble) void {
    return glad_glVertexAttrib2d.?(arg_7821, arg_7822, arg_7823);
}
pub inline fn glVertexAttrib2dARB(arg_7824: GLuint, arg_7825: GLdouble, arg_7826: GLdouble) void {
    return glad_glVertexAttrib2dARB.?(arg_7824, arg_7825, arg_7826);
}
pub inline fn glVertexAttrib2dNV(arg_7827: GLuint, arg_7828: GLdouble, arg_7829: GLdouble) void {
    return glad_glVertexAttrib2dNV.?(arg_7827, arg_7828, arg_7829);
}
pub inline fn glVertexAttrib2dv(arg_7830: GLuint, arg_7831: [*c]const GLdouble) void {
    return glad_glVertexAttrib2dv.?(arg_7830, arg_7831);
}
pub inline fn glVertexAttrib2dvARB(arg_7832: GLuint, arg_7833: [*c]const GLdouble) void {
    return glad_glVertexAttrib2dvARB.?(arg_7832, arg_7833);
}
pub inline fn glVertexAttrib2dvNV(arg_7834: GLuint, arg_7835: [*c]const GLdouble) void {
    return glad_glVertexAttrib2dvNV.?(arg_7834, arg_7835);
}
pub inline fn glVertexAttrib2f(arg_7836: GLuint, arg_7837: GLfloat, arg_7838: GLfloat) void {
    return glad_glVertexAttrib2f.?(arg_7836, arg_7837, arg_7838);
}
pub inline fn glVertexAttrib2fARB(arg_7839: GLuint, arg_7840: GLfloat, arg_7841: GLfloat) void {
    return glad_glVertexAttrib2fARB.?(arg_7839, arg_7840, arg_7841);
}
pub inline fn glVertexAttrib2fNV(arg_7842: GLuint, arg_7843: GLfloat, arg_7844: GLfloat) void {
    return glad_glVertexAttrib2fNV.?(arg_7842, arg_7843, arg_7844);
}
pub inline fn glVertexAttrib2fv(arg_7845: GLuint, arg_7846: [*c]const GLfloat) void {
    return glad_glVertexAttrib2fv.?(arg_7845, arg_7846);
}
pub inline fn glVertexAttrib2fvARB(arg_7847: GLuint, arg_7848: [*c]const GLfloat) void {
    return glad_glVertexAttrib2fvARB.?(arg_7847, arg_7848);
}
pub inline fn glVertexAttrib2fvNV(arg_7849: GLuint, arg_7850: [*c]const GLfloat) void {
    return glad_glVertexAttrib2fvNV.?(arg_7849, arg_7850);
}
pub inline fn glVertexAttrib2hNV(arg_7851: GLuint, arg_7852: GLhalfNV, arg_7853: GLhalfNV) void {
    return glad_glVertexAttrib2hNV.?(arg_7851, arg_7852, arg_7853);
}
pub inline fn glVertexAttrib2hvNV(arg_7854: GLuint, arg_7855: [*c]const GLhalfNV) void {
    return glad_glVertexAttrib2hvNV.?(arg_7854, arg_7855);
}
pub inline fn glVertexAttrib2s(arg_7856: GLuint, arg_7857: GLshort, arg_7858: GLshort) void {
    return glad_glVertexAttrib2s.?(arg_7856, arg_7857, arg_7858);
}
pub inline fn glVertexAttrib2sARB(arg_7859: GLuint, arg_7860: GLshort, arg_7861: GLshort) void {
    return glad_glVertexAttrib2sARB.?(arg_7859, arg_7860, arg_7861);
}
pub inline fn glVertexAttrib2sNV(arg_7862: GLuint, arg_7863: GLshort, arg_7864: GLshort) void {
    return glad_glVertexAttrib2sNV.?(arg_7862, arg_7863, arg_7864);
}
pub inline fn glVertexAttrib2sv(arg_7865: GLuint, arg_7866: [*c]const GLshort) void {
    return glad_glVertexAttrib2sv.?(arg_7865, arg_7866);
}
pub inline fn glVertexAttrib2svARB(arg_7867: GLuint, arg_7868: [*c]const GLshort) void {
    return glad_glVertexAttrib2svARB.?(arg_7867, arg_7868);
}
pub inline fn glVertexAttrib2svNV(arg_7869: GLuint, arg_7870: [*c]const GLshort) void {
    return glad_glVertexAttrib2svNV.?(arg_7869, arg_7870);
}
pub inline fn glVertexAttrib3d(arg_7871: GLuint, arg_7872: GLdouble, arg_7873: GLdouble, arg_7874: GLdouble) void {
    return glad_glVertexAttrib3d.?(arg_7871, arg_7872, arg_7873, arg_7874);
}
pub inline fn glVertexAttrib3dARB(arg_7875: GLuint, arg_7876: GLdouble, arg_7877: GLdouble, arg_7878: GLdouble) void {
    return glad_glVertexAttrib3dARB.?(arg_7875, arg_7876, arg_7877, arg_7878);
}
pub inline fn glVertexAttrib3dNV(arg_7879: GLuint, arg_7880: GLdouble, arg_7881: GLdouble, arg_7882: GLdouble) void {
    return glad_glVertexAttrib3dNV.?(arg_7879, arg_7880, arg_7881, arg_7882);
}
pub inline fn glVertexAttrib3dv(arg_7883: GLuint, arg_7884: [*c]const GLdouble) void {
    return glad_glVertexAttrib3dv.?(arg_7883, arg_7884);
}
pub inline fn glVertexAttrib3dvARB(arg_7885: GLuint, arg_7886: [*c]const GLdouble) void {
    return glad_glVertexAttrib3dvARB.?(arg_7885, arg_7886);
}
pub inline fn glVertexAttrib3dvNV(arg_7887: GLuint, arg_7888: [*c]const GLdouble) void {
    return glad_glVertexAttrib3dvNV.?(arg_7887, arg_7888);
}
pub inline fn glVertexAttrib3f(arg_7889: GLuint, arg_7890: GLfloat, arg_7891: GLfloat, arg_7892: GLfloat) void {
    return glad_glVertexAttrib3f.?(arg_7889, arg_7890, arg_7891, arg_7892);
}
pub inline fn glVertexAttrib3fARB(arg_7893: GLuint, arg_7894: GLfloat, arg_7895: GLfloat, arg_7896: GLfloat) void {
    return glad_glVertexAttrib3fARB.?(arg_7893, arg_7894, arg_7895, arg_7896);
}
pub inline fn glVertexAttrib3fNV(arg_7897: GLuint, arg_7898: GLfloat, arg_7899: GLfloat, arg_7900: GLfloat) void {
    return glad_glVertexAttrib3fNV.?(arg_7897, arg_7898, arg_7899, arg_7900);
}
pub inline fn glVertexAttrib3fv(arg_7901: GLuint, arg_7902: [*c]const GLfloat) void {
    return glad_glVertexAttrib3fv.?(arg_7901, arg_7902);
}
pub inline fn glVertexAttrib3fvARB(arg_7903: GLuint, arg_7904: [*c]const GLfloat) void {
    return glad_glVertexAttrib3fvARB.?(arg_7903, arg_7904);
}
pub inline fn glVertexAttrib3fvNV(arg_7905: GLuint, arg_7906: [*c]const GLfloat) void {
    return glad_glVertexAttrib3fvNV.?(arg_7905, arg_7906);
}
pub inline fn glVertexAttrib3hNV(arg_7907: GLuint, arg_7908: GLhalfNV, arg_7909: GLhalfNV, arg_7910: GLhalfNV) void {
    return glad_glVertexAttrib3hNV.?(arg_7907, arg_7908, arg_7909, arg_7910);
}
pub inline fn glVertexAttrib3hvNV(arg_7911: GLuint, arg_7912: [*c]const GLhalfNV) void {
    return glad_glVertexAttrib3hvNV.?(arg_7911, arg_7912);
}
pub inline fn glVertexAttrib3s(arg_7913: GLuint, arg_7914: GLshort, arg_7915: GLshort, arg_7916: GLshort) void {
    return glad_glVertexAttrib3s.?(arg_7913, arg_7914, arg_7915, arg_7916);
}
pub inline fn glVertexAttrib3sARB(arg_7917: GLuint, arg_7918: GLshort, arg_7919: GLshort, arg_7920: GLshort) void {
    return glad_glVertexAttrib3sARB.?(arg_7917, arg_7918, arg_7919, arg_7920);
}
pub inline fn glVertexAttrib3sNV(arg_7921: GLuint, arg_7922: GLshort, arg_7923: GLshort, arg_7924: GLshort) void {
    return glad_glVertexAttrib3sNV.?(arg_7921, arg_7922, arg_7923, arg_7924);
}
pub inline fn glVertexAttrib3sv(arg_7925: GLuint, arg_7926: [*c]const GLshort) void {
    return glad_glVertexAttrib3sv.?(arg_7925, arg_7926);
}
pub inline fn glVertexAttrib3svARB(arg_7927: GLuint, arg_7928: [*c]const GLshort) void {
    return glad_glVertexAttrib3svARB.?(arg_7927, arg_7928);
}
pub inline fn glVertexAttrib3svNV(arg_7929: GLuint, arg_7930: [*c]const GLshort) void {
    return glad_glVertexAttrib3svNV.?(arg_7929, arg_7930);
}
pub inline fn glVertexAttrib4Nbv(arg_7931: GLuint, arg_7932: [*c]const GLbyte) void {
    return glad_glVertexAttrib4Nbv.?(arg_7931, arg_7932);
}
pub inline fn glVertexAttrib4NbvARB(arg_7933: GLuint, arg_7934: [*c]const GLbyte) void {
    return glad_glVertexAttrib4NbvARB.?(arg_7933, arg_7934);
}
pub inline fn glVertexAttrib4Niv(arg_7935: GLuint, arg_7936: [*c]const GLint) void {
    return glad_glVertexAttrib4Niv.?(arg_7935, arg_7936);
}
pub inline fn glVertexAttrib4NivARB(arg_7937: GLuint, arg_7938: [*c]const GLint) void {
    return glad_glVertexAttrib4NivARB.?(arg_7937, arg_7938);
}
pub inline fn glVertexAttrib4Nsv(arg_7939: GLuint, arg_7940: [*c]const GLshort) void {
    return glad_glVertexAttrib4Nsv.?(arg_7939, arg_7940);
}
pub inline fn glVertexAttrib4NsvARB(arg_7941: GLuint, arg_7942: [*c]const GLshort) void {
    return glad_glVertexAttrib4NsvARB.?(arg_7941, arg_7942);
}
pub inline fn glVertexAttrib4Nub(arg_7943: GLuint, arg_7944: GLubyte, arg_7945: GLubyte, arg_7946: GLubyte, arg_7947: GLubyte) void {
    return glad_glVertexAttrib4Nub.?(arg_7943, arg_7944, arg_7945, arg_7946, arg_7947);
}
pub inline fn glVertexAttrib4NubARB(arg_7948: GLuint, arg_7949: GLubyte, arg_7950: GLubyte, arg_7951: GLubyte, arg_7952: GLubyte) void {
    return glad_glVertexAttrib4NubARB.?(arg_7948, arg_7949, arg_7950, arg_7951, arg_7952);
}
pub inline fn glVertexAttrib4Nubv(arg_7953: GLuint, arg_7954: [*c]const GLubyte) void {
    return glad_glVertexAttrib4Nubv.?(arg_7953, arg_7954);
}
pub inline fn glVertexAttrib4NubvARB(arg_7955: GLuint, arg_7956: [*c]const GLubyte) void {
    return glad_glVertexAttrib4NubvARB.?(arg_7955, arg_7956);
}
pub inline fn glVertexAttrib4Nuiv(arg_7957: GLuint, arg_7958: [*c]const GLuint) void {
    return glad_glVertexAttrib4Nuiv.?(arg_7957, arg_7958);
}
pub inline fn glVertexAttrib4NuivARB(arg_7959: GLuint, arg_7960: [*c]const GLuint) void {
    return glad_glVertexAttrib4NuivARB.?(arg_7959, arg_7960);
}
pub inline fn glVertexAttrib4Nusv(arg_7961: GLuint, arg_7962: [*c]const GLushort) void {
    return glad_glVertexAttrib4Nusv.?(arg_7961, arg_7962);
}
pub inline fn glVertexAttrib4NusvARB(arg_7963: GLuint, arg_7964: [*c]const GLushort) void {
    return glad_glVertexAttrib4NusvARB.?(arg_7963, arg_7964);
}
pub inline fn glVertexAttrib4bv(arg_7965: GLuint, arg_7966: [*c]const GLbyte) void {
    return glad_glVertexAttrib4bv.?(arg_7965, arg_7966);
}
pub inline fn glVertexAttrib4bvARB(arg_7967: GLuint, arg_7968: [*c]const GLbyte) void {
    return glad_glVertexAttrib4bvARB.?(arg_7967, arg_7968);
}
pub inline fn glVertexAttrib4d(arg_7969: GLuint, arg_7970: GLdouble, arg_7971: GLdouble, arg_7972: GLdouble, arg_7973: GLdouble) void {
    return glad_glVertexAttrib4d.?(arg_7969, arg_7970, arg_7971, arg_7972, arg_7973);
}
pub inline fn glVertexAttrib4dARB(arg_7974: GLuint, arg_7975: GLdouble, arg_7976: GLdouble, arg_7977: GLdouble, arg_7978: GLdouble) void {
    return glad_glVertexAttrib4dARB.?(arg_7974, arg_7975, arg_7976, arg_7977, arg_7978);
}
pub inline fn glVertexAttrib4dNV(arg_7979: GLuint, arg_7980: GLdouble, arg_7981: GLdouble, arg_7982: GLdouble, arg_7983: GLdouble) void {
    return glad_glVertexAttrib4dNV.?(arg_7979, arg_7980, arg_7981, arg_7982, arg_7983);
}
pub inline fn glVertexAttrib4dv(arg_7984: GLuint, arg_7985: [*c]const GLdouble) void {
    return glad_glVertexAttrib4dv.?(arg_7984, arg_7985);
}
pub inline fn glVertexAttrib4dvARB(arg_7986: GLuint, arg_7987: [*c]const GLdouble) void {
    return glad_glVertexAttrib4dvARB.?(arg_7986, arg_7987);
}
pub inline fn glVertexAttrib4dvNV(arg_7988: GLuint, arg_7989: [*c]const GLdouble) void {
    return glad_glVertexAttrib4dvNV.?(arg_7988, arg_7989);
}
pub inline fn glVertexAttrib4f(arg_7990: GLuint, arg_7991: GLfloat, arg_7992: GLfloat, arg_7993: GLfloat, arg_7994: GLfloat) void {
    return glad_glVertexAttrib4f.?(arg_7990, arg_7991, arg_7992, arg_7993, arg_7994);
}
pub inline fn glVertexAttrib4fARB(arg_7995: GLuint, arg_7996: GLfloat, arg_7997: GLfloat, arg_7998: GLfloat, arg_7999: GLfloat) void {
    return glad_glVertexAttrib4fARB.?(arg_7995, arg_7996, arg_7997, arg_7998, arg_7999);
}
pub inline fn glVertexAttrib4fNV(arg_8000: GLuint, arg_8001: GLfloat, arg_8002: GLfloat, arg_8003: GLfloat, arg_8004: GLfloat) void {
    return glad_glVertexAttrib4fNV.?(arg_8000, arg_8001, arg_8002, arg_8003, arg_8004);
}
pub inline fn glVertexAttrib4fv(arg_8005: GLuint, arg_8006: [*c]const GLfloat) void {
    return glad_glVertexAttrib4fv.?(arg_8005, arg_8006);
}
pub inline fn glVertexAttrib4fvARB(arg_8007: GLuint, arg_8008: [*c]const GLfloat) void {
    return glad_glVertexAttrib4fvARB.?(arg_8007, arg_8008);
}
pub inline fn glVertexAttrib4fvNV(arg_8009: GLuint, arg_8010: [*c]const GLfloat) void {
    return glad_glVertexAttrib4fvNV.?(arg_8009, arg_8010);
}
pub inline fn glVertexAttrib4hNV(arg_8011: GLuint, arg_8012: GLhalfNV, arg_8013: GLhalfNV, arg_8014: GLhalfNV, arg_8015: GLhalfNV) void {
    return glad_glVertexAttrib4hNV.?(arg_8011, arg_8012, arg_8013, arg_8014, arg_8015);
}
pub inline fn glVertexAttrib4hvNV(arg_8016: GLuint, arg_8017: [*c]const GLhalfNV) void {
    return glad_glVertexAttrib4hvNV.?(arg_8016, arg_8017);
}
pub inline fn glVertexAttrib4iv(arg_8018: GLuint, arg_8019: [*c]const GLint) void {
    return glad_glVertexAttrib4iv.?(arg_8018, arg_8019);
}
pub inline fn glVertexAttrib4ivARB(arg_8020: GLuint, arg_8021: [*c]const GLint) void {
    return glad_glVertexAttrib4ivARB.?(arg_8020, arg_8021);
}
pub inline fn glVertexAttrib4s(arg_8022: GLuint, arg_8023: GLshort, arg_8024: GLshort, arg_8025: GLshort, arg_8026: GLshort) void {
    return glad_glVertexAttrib4s.?(arg_8022, arg_8023, arg_8024, arg_8025, arg_8026);
}
pub inline fn glVertexAttrib4sARB(arg_8027: GLuint, arg_8028: GLshort, arg_8029: GLshort, arg_8030: GLshort, arg_8031: GLshort) void {
    return glad_glVertexAttrib4sARB.?(arg_8027, arg_8028, arg_8029, arg_8030, arg_8031);
}
pub inline fn glVertexAttrib4sNV(arg_8032: GLuint, arg_8033: GLshort, arg_8034: GLshort, arg_8035: GLshort, arg_8036: GLshort) void {
    return glad_glVertexAttrib4sNV.?(arg_8032, arg_8033, arg_8034, arg_8035, arg_8036);
}
pub inline fn glVertexAttrib4sv(arg_8037: GLuint, arg_8038: [*c]const GLshort) void {
    return glad_glVertexAttrib4sv.?(arg_8037, arg_8038);
}
pub inline fn glVertexAttrib4svARB(arg_8039: GLuint, arg_8040: [*c]const GLshort) void {
    return glad_glVertexAttrib4svARB.?(arg_8039, arg_8040);
}
pub inline fn glVertexAttrib4svNV(arg_8041: GLuint, arg_8042: [*c]const GLshort) void {
    return glad_glVertexAttrib4svNV.?(arg_8041, arg_8042);
}
pub inline fn glVertexAttrib4ubNV(arg_8043: GLuint, arg_8044: GLubyte, arg_8045: GLubyte, arg_8046: GLubyte, arg_8047: GLubyte) void {
    return glad_glVertexAttrib4ubNV.?(arg_8043, arg_8044, arg_8045, arg_8046, arg_8047);
}
pub inline fn glVertexAttrib4ubv(arg_8048: GLuint, arg_8049: [*c]const GLubyte) void {
    return glad_glVertexAttrib4ubv.?(arg_8048, arg_8049);
}
pub inline fn glVertexAttrib4ubvARB(arg_8050: GLuint, arg_8051: [*c]const GLubyte) void {
    return glad_glVertexAttrib4ubvARB.?(arg_8050, arg_8051);
}
pub inline fn glVertexAttrib4ubvNV(arg_8052: GLuint, arg_8053: [*c]const GLubyte) void {
    return glad_glVertexAttrib4ubvNV.?(arg_8052, arg_8053);
}
pub inline fn glVertexAttrib4uiv(arg_8054: GLuint, arg_8055: [*c]const GLuint) void {
    return glad_glVertexAttrib4uiv.?(arg_8054, arg_8055);
}
pub inline fn glVertexAttrib4uivARB(arg_8056: GLuint, arg_8057: [*c]const GLuint) void {
    return glad_glVertexAttrib4uivARB.?(arg_8056, arg_8057);
}
pub inline fn glVertexAttrib4usv(arg_8058: GLuint, arg_8059: [*c]const GLushort) void {
    return glad_glVertexAttrib4usv.?(arg_8058, arg_8059);
}
pub inline fn glVertexAttrib4usvARB(arg_8060: GLuint, arg_8061: [*c]const GLushort) void {
    return glad_glVertexAttrib4usvARB.?(arg_8060, arg_8061);
}
pub inline fn glVertexAttribArrayObjectATI(arg_8062: GLuint, arg_8063: GLint, arg_8064: GLenum, arg_8065: GLboolean, arg_8066: GLsizei, arg_8067: GLuint, arg_8068: GLuint) void {
    return glad_glVertexAttribArrayObjectATI.?(arg_8062, arg_8063, arg_8064, arg_8065, arg_8066, arg_8067, arg_8068);
}
pub inline fn glVertexAttribBinding(arg_8069: GLuint, arg_8070: GLuint) void {
    return glad_glVertexAttribBinding.?(arg_8069, arg_8070);
}
pub inline fn glVertexAttribDivisor(arg_8071: GLuint, arg_8072: GLuint) void {
    return glad_glVertexAttribDivisor.?(arg_8071, arg_8072);
}
pub inline fn glVertexAttribDivisorARB(arg_8073: GLuint, arg_8074: GLuint) void {
    return glad_glVertexAttribDivisorARB.?(arg_8073, arg_8074);
}
pub inline fn glVertexAttribFormat(arg_8075: GLuint, arg_8076: GLint, arg_8077: GLenum, arg_8078: GLboolean, arg_8079: GLuint) void {
    return glad_glVertexAttribFormat.?(arg_8075, arg_8076, arg_8077, arg_8078, arg_8079);
}
pub inline fn glVertexAttribFormatNV(arg_8080: GLuint, arg_8081: GLint, arg_8082: GLenum, arg_8083: GLboolean, arg_8084: GLsizei) void {
    return glad_glVertexAttribFormatNV.?(arg_8080, arg_8081, arg_8082, arg_8083, arg_8084);
}
pub inline fn glVertexAttribI1i(arg_8085: GLuint, arg_8086: GLint) void {
    return glad_glVertexAttribI1i.?(arg_8085, arg_8086);
}
pub inline fn glVertexAttribI1iEXT(arg_8087: GLuint, arg_8088: GLint) void {
    return glad_glVertexAttribI1iEXT.?(arg_8087, arg_8088);
}
pub inline fn glVertexAttribI1iv(arg_8089: GLuint, arg_8090: [*c]const GLint) void {
    return glad_glVertexAttribI1iv.?(arg_8089, arg_8090);
}
pub inline fn glVertexAttribI1ivEXT(arg_8091: GLuint, arg_8092: [*c]const GLint) void {
    return glad_glVertexAttribI1ivEXT.?(arg_8091, arg_8092);
}
pub inline fn glVertexAttribI1ui(arg_8093: GLuint, arg_8094: GLuint) void {
    return glad_glVertexAttribI1ui.?(arg_8093, arg_8094);
}
pub inline fn glVertexAttribI1uiEXT(arg_8095: GLuint, arg_8096: GLuint) void {
    return glad_glVertexAttribI1uiEXT.?(arg_8095, arg_8096);
}
pub inline fn glVertexAttribI1uiv(arg_8097: GLuint, arg_8098: [*c]const GLuint) void {
    return glad_glVertexAttribI1uiv.?(arg_8097, arg_8098);
}
pub inline fn glVertexAttribI1uivEXT(arg_8099: GLuint, arg_8100: [*c]const GLuint) void {
    return glad_glVertexAttribI1uivEXT.?(arg_8099, arg_8100);
}
pub inline fn glVertexAttribI2i(arg_8101: GLuint, arg_8102: GLint, arg_8103: GLint) void {
    return glad_glVertexAttribI2i.?(arg_8101, arg_8102, arg_8103);
}
pub inline fn glVertexAttribI2iEXT(arg_8104: GLuint, arg_8105: GLint, arg_8106: GLint) void {
    return glad_glVertexAttribI2iEXT.?(arg_8104, arg_8105, arg_8106);
}
pub inline fn glVertexAttribI2iv(arg_8107: GLuint, arg_8108: [*c]const GLint) void {
    return glad_glVertexAttribI2iv.?(arg_8107, arg_8108);
}
pub inline fn glVertexAttribI2ivEXT(arg_8109: GLuint, arg_8110: [*c]const GLint) void {
    return glad_glVertexAttribI2ivEXT.?(arg_8109, arg_8110);
}
pub inline fn glVertexAttribI2ui(arg_8111: GLuint, arg_8112: GLuint, arg_8113: GLuint) void {
    return glad_glVertexAttribI2ui.?(arg_8111, arg_8112, arg_8113);
}
pub inline fn glVertexAttribI2uiEXT(arg_8114: GLuint, arg_8115: GLuint, arg_8116: GLuint) void {
    return glad_glVertexAttribI2uiEXT.?(arg_8114, arg_8115, arg_8116);
}
pub inline fn glVertexAttribI2uiv(arg_8117: GLuint, arg_8118: [*c]const GLuint) void {
    return glad_glVertexAttribI2uiv.?(arg_8117, arg_8118);
}
pub inline fn glVertexAttribI2uivEXT(arg_8119: GLuint, arg_8120: [*c]const GLuint) void {
    return glad_glVertexAttribI2uivEXT.?(arg_8119, arg_8120);
}
pub inline fn glVertexAttribI3i(arg_8121: GLuint, arg_8122: GLint, arg_8123: GLint, arg_8124: GLint) void {
    return glad_glVertexAttribI3i.?(arg_8121, arg_8122, arg_8123, arg_8124);
}
pub inline fn glVertexAttribI3iEXT(arg_8125: GLuint, arg_8126: GLint, arg_8127: GLint, arg_8128: GLint) void {
    return glad_glVertexAttribI3iEXT.?(arg_8125, arg_8126, arg_8127, arg_8128);
}
pub inline fn glVertexAttribI3iv(arg_8129: GLuint, arg_8130: [*c]const GLint) void {
    return glad_glVertexAttribI3iv.?(arg_8129, arg_8130);
}
pub inline fn glVertexAttribI3ivEXT(arg_8131: GLuint, arg_8132: [*c]const GLint) void {
    return glad_glVertexAttribI3ivEXT.?(arg_8131, arg_8132);
}
pub inline fn glVertexAttribI3ui(arg_8133: GLuint, arg_8134: GLuint, arg_8135: GLuint, arg_8136: GLuint) void {
    return glad_glVertexAttribI3ui.?(arg_8133, arg_8134, arg_8135, arg_8136);
}
pub inline fn glVertexAttribI3uiEXT(arg_8137: GLuint, arg_8138: GLuint, arg_8139: GLuint, arg_8140: GLuint) void {
    return glad_glVertexAttribI3uiEXT.?(arg_8137, arg_8138, arg_8139, arg_8140);
}
pub inline fn glVertexAttribI3uiv(arg_8141: GLuint, arg_8142: [*c]const GLuint) void {
    return glad_glVertexAttribI3uiv.?(arg_8141, arg_8142);
}
pub inline fn glVertexAttribI3uivEXT(arg_8143: GLuint, arg_8144: [*c]const GLuint) void {
    return glad_glVertexAttribI3uivEXT.?(arg_8143, arg_8144);
}
pub inline fn glVertexAttribI4bv(arg_8145: GLuint, arg_8146: [*c]const GLbyte) void {
    return glad_glVertexAttribI4bv.?(arg_8145, arg_8146);
}
pub inline fn glVertexAttribI4bvEXT(arg_8147: GLuint, arg_8148: [*c]const GLbyte) void {
    return glad_glVertexAttribI4bvEXT.?(arg_8147, arg_8148);
}
pub inline fn glVertexAttribI4i(arg_8149: GLuint, arg_8150: GLint, arg_8151: GLint, arg_8152: GLint, arg_8153: GLint) void {
    return glad_glVertexAttribI4i.?(arg_8149, arg_8150, arg_8151, arg_8152, arg_8153);
}
pub inline fn glVertexAttribI4iEXT(arg_8154: GLuint, arg_8155: GLint, arg_8156: GLint, arg_8157: GLint, arg_8158: GLint) void {
    return glad_glVertexAttribI4iEXT.?(arg_8154, arg_8155, arg_8156, arg_8157, arg_8158);
}
pub inline fn glVertexAttribI4iv(arg_8159: GLuint, arg_8160: [*c]const GLint) void {
    return glad_glVertexAttribI4iv.?(arg_8159, arg_8160);
}
pub inline fn glVertexAttribI4ivEXT(arg_8161: GLuint, arg_8162: [*c]const GLint) void {
    return glad_glVertexAttribI4ivEXT.?(arg_8161, arg_8162);
}
pub inline fn glVertexAttribI4sv(arg_8163: GLuint, arg_8164: [*c]const GLshort) void {
    return glad_glVertexAttribI4sv.?(arg_8163, arg_8164);
}
pub inline fn glVertexAttribI4svEXT(arg_8165: GLuint, arg_8166: [*c]const GLshort) void {
    return glad_glVertexAttribI4svEXT.?(arg_8165, arg_8166);
}
pub inline fn glVertexAttribI4ubv(arg_8167: GLuint, arg_8168: [*c]const GLubyte) void {
    return glad_glVertexAttribI4ubv.?(arg_8167, arg_8168);
}
pub inline fn glVertexAttribI4ubvEXT(arg_8169: GLuint, arg_8170: [*c]const GLubyte) void {
    return glad_glVertexAttribI4ubvEXT.?(arg_8169, arg_8170);
}
pub inline fn glVertexAttribI4ui(arg_8171: GLuint, arg_8172: GLuint, arg_8173: GLuint, arg_8174: GLuint, arg_8175: GLuint) void {
    return glad_glVertexAttribI4ui.?(arg_8171, arg_8172, arg_8173, arg_8174, arg_8175);
}
pub inline fn glVertexAttribI4uiEXT(arg_8176: GLuint, arg_8177: GLuint, arg_8178: GLuint, arg_8179: GLuint, arg_8180: GLuint) void {
    return glad_glVertexAttribI4uiEXT.?(arg_8176, arg_8177, arg_8178, arg_8179, arg_8180);
}
pub inline fn glVertexAttribI4uiv(arg_8181: GLuint, arg_8182: [*c]const GLuint) void {
    return glad_glVertexAttribI4uiv.?(arg_8181, arg_8182);
}
pub inline fn glVertexAttribI4uivEXT(arg_8183: GLuint, arg_8184: [*c]const GLuint) void {
    return glad_glVertexAttribI4uivEXT.?(arg_8183, arg_8184);
}
pub inline fn glVertexAttribI4usv(arg_8185: GLuint, arg_8186: [*c]const GLushort) void {
    return glad_glVertexAttribI4usv.?(arg_8185, arg_8186);
}
pub inline fn glVertexAttribI4usvEXT(arg_8187: GLuint, arg_8188: [*c]const GLushort) void {
    return glad_glVertexAttribI4usvEXT.?(arg_8187, arg_8188);
}
pub inline fn glVertexAttribIFormat(arg_8189: GLuint, arg_8190: GLint, arg_8191: GLenum, arg_8192: GLuint) void {
    return glad_glVertexAttribIFormat.?(arg_8189, arg_8190, arg_8191, arg_8192);
}
pub inline fn glVertexAttribIFormatNV(arg_8193: GLuint, arg_8194: GLint, arg_8195: GLenum, arg_8196: GLsizei) void {
    return glad_glVertexAttribIFormatNV.?(arg_8193, arg_8194, arg_8195, arg_8196);
}
pub inline fn glVertexAttribIPointer(arg_8197: GLuint, arg_8198: GLint, arg_8199: GLenum, arg_8200: GLsizei, arg_8201: ?*const anyopaque) void {
    return glad_glVertexAttribIPointer.?(arg_8197, arg_8198, arg_8199, arg_8200, arg_8201);
}
pub inline fn glVertexAttribIPointerEXT(arg_8202: GLuint, arg_8203: GLint, arg_8204: GLenum, arg_8205: GLsizei, arg_8206: ?*const anyopaque) void {
    return glad_glVertexAttribIPointerEXT.?(arg_8202, arg_8203, arg_8204, arg_8205, arg_8206);
}
pub inline fn glVertexAttribL1d(arg_8207: GLuint, arg_8208: GLdouble) void {
    return glad_glVertexAttribL1d.?(arg_8207, arg_8208);
}
pub inline fn glVertexAttribL1dEXT(arg_8209: GLuint, arg_8210: GLdouble) void {
    return glad_glVertexAttribL1dEXT.?(arg_8209, arg_8210);
}
pub inline fn glVertexAttribL1dv(arg_8211: GLuint, arg_8212: [*c]const GLdouble) void {
    return glad_glVertexAttribL1dv.?(arg_8211, arg_8212);
}
pub inline fn glVertexAttribL1dvEXT(arg_8213: GLuint, arg_8214: [*c]const GLdouble) void {
    return glad_glVertexAttribL1dvEXT.?(arg_8213, arg_8214);
}
pub inline fn glVertexAttribL1i64NV(arg_8215: GLuint, arg_8216: GLint64EXT) void {
    return glad_glVertexAttribL1i64NV.?(arg_8215, arg_8216);
}
pub inline fn glVertexAttribL1i64vNV(arg_8217: GLuint, arg_8218: [*c]const GLint64EXT) void {
    return glad_glVertexAttribL1i64vNV.?(arg_8217, arg_8218);
}
pub inline fn glVertexAttribL1ui64ARB(arg_8219: GLuint, arg_8220: GLuint64EXT) void {
    return glad_glVertexAttribL1ui64ARB.?(arg_8219, arg_8220);
}
pub inline fn glVertexAttribL1ui64NV(arg_8221: GLuint, arg_8222: GLuint64EXT) void {
    return glad_glVertexAttribL1ui64NV.?(arg_8221, arg_8222);
}
pub inline fn glVertexAttribL1ui64vARB(arg_8223: GLuint, arg_8224: [*c]const GLuint64EXT) void {
    return glad_glVertexAttribL1ui64vARB.?(arg_8223, arg_8224);
}
pub inline fn glVertexAttribL1ui64vNV(arg_8225: GLuint, arg_8226: [*c]const GLuint64EXT) void {
    return glad_glVertexAttribL1ui64vNV.?(arg_8225, arg_8226);
}
pub inline fn glVertexAttribL2d(arg_8227: GLuint, arg_8228: GLdouble, arg_8229: GLdouble) void {
    return glad_glVertexAttribL2d.?(arg_8227, arg_8228, arg_8229);
}
pub inline fn glVertexAttribL2dEXT(arg_8230: GLuint, arg_8231: GLdouble, arg_8232: GLdouble) void {
    return glad_glVertexAttribL2dEXT.?(arg_8230, arg_8231, arg_8232);
}
pub inline fn glVertexAttribL2dv(arg_8233: GLuint, arg_8234: [*c]const GLdouble) void {
    return glad_glVertexAttribL2dv.?(arg_8233, arg_8234);
}
pub inline fn glVertexAttribL2dvEXT(arg_8235: GLuint, arg_8236: [*c]const GLdouble) void {
    return glad_glVertexAttribL2dvEXT.?(arg_8235, arg_8236);
}
pub inline fn glVertexAttribL2i64NV(arg_8237: GLuint, arg_8238: GLint64EXT, arg_8239: GLint64EXT) void {
    return glad_glVertexAttribL2i64NV.?(arg_8237, arg_8238, arg_8239);
}
pub inline fn glVertexAttribL2i64vNV(arg_8240: GLuint, arg_8241: [*c]const GLint64EXT) void {
    return glad_glVertexAttribL2i64vNV.?(arg_8240, arg_8241);
}
pub inline fn glVertexAttribL2ui64NV(arg_8242: GLuint, arg_8243: GLuint64EXT, arg_8244: GLuint64EXT) void {
    return glad_glVertexAttribL2ui64NV.?(arg_8242, arg_8243, arg_8244);
}
pub inline fn glVertexAttribL2ui64vNV(arg_8245: GLuint, arg_8246: [*c]const GLuint64EXT) void {
    return glad_glVertexAttribL2ui64vNV.?(arg_8245, arg_8246);
}
pub inline fn glVertexAttribL3d(arg_8247: GLuint, arg_8248: GLdouble, arg_8249: GLdouble, arg_8250: GLdouble) void {
    return glad_glVertexAttribL3d.?(arg_8247, arg_8248, arg_8249, arg_8250);
}
pub inline fn glVertexAttribL3dEXT(arg_8251: GLuint, arg_8252: GLdouble, arg_8253: GLdouble, arg_8254: GLdouble) void {
    return glad_glVertexAttribL3dEXT.?(arg_8251, arg_8252, arg_8253, arg_8254);
}
pub inline fn glVertexAttribL3dv(arg_8255: GLuint, arg_8256: [*c]const GLdouble) void {
    return glad_glVertexAttribL3dv.?(arg_8255, arg_8256);
}
pub inline fn glVertexAttribL3dvEXT(arg_8257: GLuint, arg_8258: [*c]const GLdouble) void {
    return glad_glVertexAttribL3dvEXT.?(arg_8257, arg_8258);
}
pub inline fn glVertexAttribL3i64NV(arg_8259: GLuint, arg_8260: GLint64EXT, arg_8261: GLint64EXT, arg_8262: GLint64EXT) void {
    return glad_glVertexAttribL3i64NV.?(arg_8259, arg_8260, arg_8261, arg_8262);
}
pub inline fn glVertexAttribL3i64vNV(arg_8263: GLuint, arg_8264: [*c]const GLint64EXT) void {
    return glad_glVertexAttribL3i64vNV.?(arg_8263, arg_8264);
}
pub inline fn glVertexAttribL3ui64NV(arg_8265: GLuint, arg_8266: GLuint64EXT, arg_8267: GLuint64EXT, arg_8268: GLuint64EXT) void {
    return glad_glVertexAttribL3ui64NV.?(arg_8265, arg_8266, arg_8267, arg_8268);
}
pub inline fn glVertexAttribL3ui64vNV(arg_8269: GLuint, arg_8270: [*c]const GLuint64EXT) void {
    return glad_glVertexAttribL3ui64vNV.?(arg_8269, arg_8270);
}
pub inline fn glVertexAttribL4d(arg_8271: GLuint, arg_8272: GLdouble, arg_8273: GLdouble, arg_8274: GLdouble, arg_8275: GLdouble) void {
    return glad_glVertexAttribL4d.?(arg_8271, arg_8272, arg_8273, arg_8274, arg_8275);
}
pub inline fn glVertexAttribL4dEXT(arg_8276: GLuint, arg_8277: GLdouble, arg_8278: GLdouble, arg_8279: GLdouble, arg_8280: GLdouble) void {
    return glad_glVertexAttribL4dEXT.?(arg_8276, arg_8277, arg_8278, arg_8279, arg_8280);
}
pub inline fn glVertexAttribL4dv(arg_8281: GLuint, arg_8282: [*c]const GLdouble) void {
    return glad_glVertexAttribL4dv.?(arg_8281, arg_8282);
}
pub inline fn glVertexAttribL4dvEXT(arg_8283: GLuint, arg_8284: [*c]const GLdouble) void {
    return glad_glVertexAttribL4dvEXT.?(arg_8283, arg_8284);
}
pub inline fn glVertexAttribL4i64NV(arg_8285: GLuint, arg_8286: GLint64EXT, arg_8287: GLint64EXT, arg_8288: GLint64EXT, arg_8289: GLint64EXT) void {
    return glad_glVertexAttribL4i64NV.?(arg_8285, arg_8286, arg_8287, arg_8288, arg_8289);
}
pub inline fn glVertexAttribL4i64vNV(arg_8290: GLuint, arg_8291: [*c]const GLint64EXT) void {
    return glad_glVertexAttribL4i64vNV.?(arg_8290, arg_8291);
}
pub inline fn glVertexAttribL4ui64NV(arg_8292: GLuint, arg_8293: GLuint64EXT, arg_8294: GLuint64EXT, arg_8295: GLuint64EXT, arg_8296: GLuint64EXT) void {
    return glad_glVertexAttribL4ui64NV.?(arg_8292, arg_8293, arg_8294, arg_8295, arg_8296);
}
pub inline fn glVertexAttribL4ui64vNV(arg_8297: GLuint, arg_8298: [*c]const GLuint64EXT) void {
    return glad_glVertexAttribL4ui64vNV.?(arg_8297, arg_8298);
}
pub inline fn glVertexAttribLFormat(arg_8299: GLuint, arg_8300: GLint, arg_8301: GLenum, arg_8302: GLuint) void {
    return glad_glVertexAttribLFormat.?(arg_8299, arg_8300, arg_8301, arg_8302);
}
pub inline fn glVertexAttribLFormatNV(arg_8303: GLuint, arg_8304: GLint, arg_8305: GLenum, arg_8306: GLsizei) void {
    return glad_glVertexAttribLFormatNV.?(arg_8303, arg_8304, arg_8305, arg_8306);
}
pub inline fn glVertexAttribLPointer(arg_8307: GLuint, arg_8308: GLint, arg_8309: GLenum, arg_8310: GLsizei, arg_8311: ?*const anyopaque) void {
    return glad_glVertexAttribLPointer.?(arg_8307, arg_8308, arg_8309, arg_8310, arg_8311);
}
pub inline fn glVertexAttribLPointerEXT(arg_8312: GLuint, arg_8313: GLint, arg_8314: GLenum, arg_8315: GLsizei, arg_8316: ?*const anyopaque) void {
    return glad_glVertexAttribLPointerEXT.?(arg_8312, arg_8313, arg_8314, arg_8315, arg_8316);
}
pub inline fn glVertexAttribP1ui(arg_8317: GLuint, arg_8318: GLenum, arg_8319: GLboolean, arg_8320: GLuint) void {
    return glad_glVertexAttribP1ui.?(arg_8317, arg_8318, arg_8319, arg_8320);
}
pub inline fn glVertexAttribP1uiv(arg_8321: GLuint, arg_8322: GLenum, arg_8323: GLboolean, arg_8324: [*c]const GLuint) void {
    return glad_glVertexAttribP1uiv.?(arg_8321, arg_8322, arg_8323, arg_8324);
}
pub inline fn glVertexAttribP2ui(arg_8325: GLuint, arg_8326: GLenum, arg_8327: GLboolean, arg_8328: GLuint) void {
    return glad_glVertexAttribP2ui.?(arg_8325, arg_8326, arg_8327, arg_8328);
}
pub inline fn glVertexAttribP2uiv(arg_8329: GLuint, arg_8330: GLenum, arg_8331: GLboolean, arg_8332: [*c]const GLuint) void {
    return glad_glVertexAttribP2uiv.?(arg_8329, arg_8330, arg_8331, arg_8332);
}
pub inline fn glVertexAttribP3ui(arg_8333: GLuint, arg_8334: GLenum, arg_8335: GLboolean, arg_8336: GLuint) void {
    return glad_glVertexAttribP3ui.?(arg_8333, arg_8334, arg_8335, arg_8336);
}
pub inline fn glVertexAttribP3uiv(arg_8337: GLuint, arg_8338: GLenum, arg_8339: GLboolean, arg_8340: [*c]const GLuint) void {
    return glad_glVertexAttribP3uiv.?(arg_8337, arg_8338, arg_8339, arg_8340);
}
pub inline fn glVertexAttribP4ui(arg_8341: GLuint, arg_8342: GLenum, arg_8343: GLboolean, arg_8344: GLuint) void {
    return glad_glVertexAttribP4ui.?(arg_8341, arg_8342, arg_8343, arg_8344);
}
pub inline fn glVertexAttribP4uiv(arg_8345: GLuint, arg_8346: GLenum, arg_8347: GLboolean, arg_8348: [*c]const GLuint) void {
    return glad_glVertexAttribP4uiv.?(arg_8345, arg_8346, arg_8347, arg_8348);
}
pub inline fn glVertexAttribParameteriAMD(arg_8349: GLuint, arg_8350: GLenum, arg_8351: GLint) void {
    return glad_glVertexAttribParameteriAMD.?(arg_8349, arg_8350, arg_8351);
}
pub inline fn glVertexAttribPointer(arg_8352: GLuint, arg_8353: GLint, arg_8354: GLenum, arg_8355: GLboolean, arg_8356: GLsizei, arg_8357: ?*const anyopaque) void {
    return glad_glVertexAttribPointer.?(arg_8352, arg_8353, arg_8354, arg_8355, arg_8356, arg_8357);
}
pub inline fn glVertexAttribPointerARB(arg_8358: GLuint, arg_8359: GLint, arg_8360: GLenum, arg_8361: GLboolean, arg_8362: GLsizei, arg_8363: ?*const anyopaque) void {
    return glad_glVertexAttribPointerARB.?(arg_8358, arg_8359, arg_8360, arg_8361, arg_8362, arg_8363);
}
pub inline fn glVertexAttribPointerNV(arg_8364: GLuint, arg_8365: GLint, arg_8366: GLenum, arg_8367: GLsizei, arg_8368: ?*const anyopaque) void {
    return glad_glVertexAttribPointerNV.?(arg_8364, arg_8365, arg_8366, arg_8367, arg_8368);
}
pub inline fn glVertexAttribs1dvNV(arg_8369: GLuint, arg_8370: GLsizei, arg_8371: [*c]const GLdouble) void {
    return glad_glVertexAttribs1dvNV.?(arg_8369, arg_8370, arg_8371);
}
pub inline fn glVertexAttribs1fvNV(arg_8372: GLuint, arg_8373: GLsizei, arg_8374: [*c]const GLfloat) void {
    return glad_glVertexAttribs1fvNV.?(arg_8372, arg_8373, arg_8374);
}
pub inline fn glVertexAttribs1hvNV(arg_8375: GLuint, arg_8376: GLsizei, arg_8377: [*c]const GLhalfNV) void {
    return glad_glVertexAttribs1hvNV.?(arg_8375, arg_8376, arg_8377);
}
pub inline fn glVertexAttribs1svNV(arg_8378: GLuint, arg_8379: GLsizei, arg_8380: [*c]const GLshort) void {
    return glad_glVertexAttribs1svNV.?(arg_8378, arg_8379, arg_8380);
}
pub inline fn glVertexAttribs2dvNV(arg_8381: GLuint, arg_8382: GLsizei, arg_8383: [*c]const GLdouble) void {
    return glad_glVertexAttribs2dvNV.?(arg_8381, arg_8382, arg_8383);
}
pub inline fn glVertexAttribs2fvNV(arg_8384: GLuint, arg_8385: GLsizei, arg_8386: [*c]const GLfloat) void {
    return glad_glVertexAttribs2fvNV.?(arg_8384, arg_8385, arg_8386);
}
pub inline fn glVertexAttribs2hvNV(arg_8387: GLuint, arg_8388: GLsizei, arg_8389: [*c]const GLhalfNV) void {
    return glad_glVertexAttribs2hvNV.?(arg_8387, arg_8388, arg_8389);
}
pub inline fn glVertexAttribs2svNV(arg_8390: GLuint, arg_8391: GLsizei, arg_8392: [*c]const GLshort) void {
    return glad_glVertexAttribs2svNV.?(arg_8390, arg_8391, arg_8392);
}
pub inline fn glVertexAttribs3dvNV(arg_8393: GLuint, arg_8394: GLsizei, arg_8395: [*c]const GLdouble) void {
    return glad_glVertexAttribs3dvNV.?(arg_8393, arg_8394, arg_8395);
}
pub inline fn glVertexAttribs3fvNV(arg_8396: GLuint, arg_8397: GLsizei, arg_8398: [*c]const GLfloat) void {
    return glad_glVertexAttribs3fvNV.?(arg_8396, arg_8397, arg_8398);
}
pub inline fn glVertexAttribs3hvNV(arg_8399: GLuint, arg_8400: GLsizei, arg_8401: [*c]const GLhalfNV) void {
    return glad_glVertexAttribs3hvNV.?(arg_8399, arg_8400, arg_8401);
}
pub inline fn glVertexAttribs3svNV(arg_8402: GLuint, arg_8403: GLsizei, arg_8404: [*c]const GLshort) void {
    return glad_glVertexAttribs3svNV.?(arg_8402, arg_8403, arg_8404);
}
pub inline fn glVertexAttribs4dvNV(arg_8405: GLuint, arg_8406: GLsizei, arg_8407: [*c]const GLdouble) void {
    return glad_glVertexAttribs4dvNV.?(arg_8405, arg_8406, arg_8407);
}
pub inline fn glVertexAttribs4fvNV(arg_8408: GLuint, arg_8409: GLsizei, arg_8410: [*c]const GLfloat) void {
    return glad_glVertexAttribs4fvNV.?(arg_8408, arg_8409, arg_8410);
}
pub inline fn glVertexAttribs4hvNV(arg_8411: GLuint, arg_8412: GLsizei, arg_8413: [*c]const GLhalfNV) void {
    return glad_glVertexAttribs4hvNV.?(arg_8411, arg_8412, arg_8413);
}
pub inline fn glVertexAttribs4svNV(arg_8414: GLuint, arg_8415: GLsizei, arg_8416: [*c]const GLshort) void {
    return glad_glVertexAttribs4svNV.?(arg_8414, arg_8415, arg_8416);
}
pub inline fn glVertexAttribs4ubvNV(arg_8417: GLuint, arg_8418: GLsizei, arg_8419: [*c]const GLubyte) void {
    return glad_glVertexAttribs4ubvNV.?(arg_8417, arg_8418, arg_8419);
}
pub inline fn glVertexBindingDivisor(arg_8420: GLuint, arg_8421: GLuint) void {
    return glad_glVertexBindingDivisor.?(arg_8420, arg_8421);
}
pub inline fn glVertexBlendARB(arg_8422: GLint) void {
    return glad_glVertexBlendARB.?(arg_8422);
}
pub inline fn glVertexBlendEnvfATI(arg_8423: GLenum, arg_8424: GLfloat) void {
    return glad_glVertexBlendEnvfATI.?(arg_8423, arg_8424);
}
pub inline fn glVertexBlendEnviATI(arg_8425: GLenum, arg_8426: GLint) void {
    return glad_glVertexBlendEnviATI.?(arg_8425, arg_8426);
}
pub inline fn glVertexFormatNV(arg_8427: GLint, arg_8428: GLenum, arg_8429: GLsizei) void {
    return glad_glVertexFormatNV.?(arg_8427, arg_8428, arg_8429);
}
pub inline fn glVertexPointerEXT(arg_8430: GLint, arg_8431: GLenum, arg_8432: GLsizei, arg_8433: GLsizei, arg_8434: ?*const anyopaque) void {
    return glad_glVertexPointerEXT.?(arg_8430, arg_8431, arg_8432, arg_8433, arg_8434);
}
pub inline fn glVertexPointerListIBM(arg_8435: GLint, arg_8436: GLenum, arg_8437: GLint, arg_8438: [*c]?*const anyopaque, arg_8439: GLint) void {
    return glad_glVertexPointerListIBM.?(arg_8435, arg_8436, arg_8437, arg_8438, arg_8439);
}
pub inline fn glVertexPointervINTEL(arg_8440: GLint, arg_8441: GLenum, arg_8442: [*c]?*const anyopaque) void {
    return glad_glVertexPointervINTEL.?(arg_8440, arg_8441, arg_8442);
}
pub inline fn glVertexStream1dATI(arg_8443: GLenum, arg_8444: GLdouble) void {
    return glad_glVertexStream1dATI.?(arg_8443, arg_8444);
}
pub inline fn glVertexStream1dvATI(arg_8445: GLenum, arg_8446: [*c]const GLdouble) void {
    return glad_glVertexStream1dvATI.?(arg_8445, arg_8446);
}
pub inline fn glVertexStream1fATI(arg_8447: GLenum, arg_8448: GLfloat) void {
    return glad_glVertexStream1fATI.?(arg_8447, arg_8448);
}
pub inline fn glVertexStream1fvATI(arg_8449: GLenum, arg_8450: [*c]const GLfloat) void {
    return glad_glVertexStream1fvATI.?(arg_8449, arg_8450);
}
pub inline fn glVertexStream1iATI(arg_8451: GLenum, arg_8452: GLint) void {
    return glad_glVertexStream1iATI.?(arg_8451, arg_8452);
}
pub inline fn glVertexStream1ivATI(arg_8453: GLenum, arg_8454: [*c]const GLint) void {
    return glad_glVertexStream1ivATI.?(arg_8453, arg_8454);
}
pub inline fn glVertexStream1sATI(arg_8455: GLenum, arg_8456: GLshort) void {
    return glad_glVertexStream1sATI.?(arg_8455, arg_8456);
}
pub inline fn glVertexStream1svATI(arg_8457: GLenum, arg_8458: [*c]const GLshort) void {
    return glad_glVertexStream1svATI.?(arg_8457, arg_8458);
}
pub inline fn glVertexStream2dATI(arg_8459: GLenum, arg_8460: GLdouble, arg_8461: GLdouble) void {
    return glad_glVertexStream2dATI.?(arg_8459, arg_8460, arg_8461);
}
pub inline fn glVertexStream2dvATI(arg_8462: GLenum, arg_8463: [*c]const GLdouble) void {
    return glad_glVertexStream2dvATI.?(arg_8462, arg_8463);
}
pub inline fn glVertexStream2fATI(arg_8464: GLenum, arg_8465: GLfloat, arg_8466: GLfloat) void {
    return glad_glVertexStream2fATI.?(arg_8464, arg_8465, arg_8466);
}
pub inline fn glVertexStream2fvATI(arg_8467: GLenum, arg_8468: [*c]const GLfloat) void {
    return glad_glVertexStream2fvATI.?(arg_8467, arg_8468);
}
pub inline fn glVertexStream2iATI(arg_8469: GLenum, arg_8470: GLint, arg_8471: GLint) void {
    return glad_glVertexStream2iATI.?(arg_8469, arg_8470, arg_8471);
}
pub inline fn glVertexStream2ivATI(arg_8472: GLenum, arg_8473: [*c]const GLint) void {
    return glad_glVertexStream2ivATI.?(arg_8472, arg_8473);
}
pub inline fn glVertexStream2sATI(arg_8474: GLenum, arg_8475: GLshort, arg_8476: GLshort) void {
    return glad_glVertexStream2sATI.?(arg_8474, arg_8475, arg_8476);
}
pub inline fn glVertexStream2svATI(arg_8477: GLenum, arg_8478: [*c]const GLshort) void {
    return glad_glVertexStream2svATI.?(arg_8477, arg_8478);
}
pub inline fn glVertexStream3dATI(arg_8479: GLenum, arg_8480: GLdouble, arg_8481: GLdouble, arg_8482: GLdouble) void {
    return glad_glVertexStream3dATI.?(arg_8479, arg_8480, arg_8481, arg_8482);
}
pub inline fn glVertexStream3dvATI(arg_8483: GLenum, arg_8484: [*c]const GLdouble) void {
    return glad_glVertexStream3dvATI.?(arg_8483, arg_8484);
}
pub inline fn glVertexStream3fATI(arg_8485: GLenum, arg_8486: GLfloat, arg_8487: GLfloat, arg_8488: GLfloat) void {
    return glad_glVertexStream3fATI.?(arg_8485, arg_8486, arg_8487, arg_8488);
}
pub inline fn glVertexStream3fvATI(arg_8489: GLenum, arg_8490: [*c]const GLfloat) void {
    return glad_glVertexStream3fvATI.?(arg_8489, arg_8490);
}
pub inline fn glVertexStream3iATI(arg_8491: GLenum, arg_8492: GLint, arg_8493: GLint, arg_8494: GLint) void {
    return glad_glVertexStream3iATI.?(arg_8491, arg_8492, arg_8493, arg_8494);
}
pub inline fn glVertexStream3ivATI(arg_8495: GLenum, arg_8496: [*c]const GLint) void {
    return glad_glVertexStream3ivATI.?(arg_8495, arg_8496);
}
pub inline fn glVertexStream3sATI(arg_8497: GLenum, arg_8498: GLshort, arg_8499: GLshort, arg_8500: GLshort) void {
    return glad_glVertexStream3sATI.?(arg_8497, arg_8498, arg_8499, arg_8500);
}
pub inline fn glVertexStream3svATI(arg_8501: GLenum, arg_8502: [*c]const GLshort) void {
    return glad_glVertexStream3svATI.?(arg_8501, arg_8502);
}
pub inline fn glVertexStream4dATI(arg_8503: GLenum, arg_8504: GLdouble, arg_8505: GLdouble, arg_8506: GLdouble, arg_8507: GLdouble) void {
    return glad_glVertexStream4dATI.?(arg_8503, arg_8504, arg_8505, arg_8506, arg_8507);
}
pub inline fn glVertexStream4dvATI(arg_8508: GLenum, arg_8509: [*c]const GLdouble) void {
    return glad_glVertexStream4dvATI.?(arg_8508, arg_8509);
}
pub inline fn glVertexStream4fATI(arg_8510: GLenum, arg_8511: GLfloat, arg_8512: GLfloat, arg_8513: GLfloat, arg_8514: GLfloat) void {
    return glad_glVertexStream4fATI.?(arg_8510, arg_8511, arg_8512, arg_8513, arg_8514);
}
pub inline fn glVertexStream4fvATI(arg_8515: GLenum, arg_8516: [*c]const GLfloat) void {
    return glad_glVertexStream4fvATI.?(arg_8515, arg_8516);
}
pub inline fn glVertexStream4iATI(arg_8517: GLenum, arg_8518: GLint, arg_8519: GLint, arg_8520: GLint, arg_8521: GLint) void {
    return glad_glVertexStream4iATI.?(arg_8517, arg_8518, arg_8519, arg_8520, arg_8521);
}
pub inline fn glVertexStream4ivATI(arg_8522: GLenum, arg_8523: [*c]const GLint) void {
    return glad_glVertexStream4ivATI.?(arg_8522, arg_8523);
}
pub inline fn glVertexStream4sATI(arg_8524: GLenum, arg_8525: GLshort, arg_8526: GLshort, arg_8527: GLshort, arg_8528: GLshort) void {
    return glad_glVertexStream4sATI.?(arg_8524, arg_8525, arg_8526, arg_8527, arg_8528);
}
pub inline fn glVertexStream4svATI(arg_8529: GLenum, arg_8530: [*c]const GLshort) void {
    return glad_glVertexStream4svATI.?(arg_8529, arg_8530);
}
pub inline fn glVertexWeightPointerEXT(arg_8531: GLint, arg_8532: GLenum, arg_8533: GLsizei, arg_8534: ?*const anyopaque) void {
    return glad_glVertexWeightPointerEXT.?(arg_8531, arg_8532, arg_8533, arg_8534);
}
pub inline fn glVertexWeightfEXT(arg_8535: GLfloat) void {
    return glad_glVertexWeightfEXT.?(arg_8535);
}
pub inline fn glVertexWeightfvEXT(arg_8536: [*c]const GLfloat) void {
    return glad_glVertexWeightfvEXT.?(arg_8536);
}
pub inline fn glVertexWeighthNV(arg_8537: GLhalfNV) void {
    return glad_glVertexWeighthNV.?(arg_8537);
}
pub inline fn glVertexWeighthvNV(arg_8538: [*c]const GLhalfNV) void {
    return glad_glVertexWeighthvNV.?(arg_8538);
}
pub inline fn glVideoCaptureNV(arg_8539: GLuint, arg_8540: [*c]GLuint, arg_8541: [*c]GLuint64EXT) GLenum {
    return glad_glVideoCaptureNV.?(arg_8539, arg_8540, arg_8541);
}
pub inline fn glVideoCaptureStreamParameterdvNV(arg_8542: GLuint, arg_8543: GLuint, arg_8544: GLenum, arg_8545: [*c]const GLdouble) void {
    return glad_glVideoCaptureStreamParameterdvNV.?(arg_8542, arg_8543, arg_8544, arg_8545);
}
pub inline fn glVideoCaptureStreamParameterfvNV(arg_8546: GLuint, arg_8547: GLuint, arg_8548: GLenum, arg_8549: [*c]const GLfloat) void {
    return glad_glVideoCaptureStreamParameterfvNV.?(arg_8546, arg_8547, arg_8548, arg_8549);
}
pub inline fn glVideoCaptureStreamParameterivNV(arg_8550: GLuint, arg_8551: GLuint, arg_8552: GLenum, arg_8553: [*c]const GLint) void {
    return glad_glVideoCaptureStreamParameterivNV.?(arg_8550, arg_8551, arg_8552, arg_8553);
}
pub inline fn glViewport(arg_8554: GLint, arg_8555: GLint, arg_8556: GLsizei, arg_8557: GLsizei) void {
    return glad_glViewport.?(arg_8554, arg_8555, arg_8556, arg_8557);
}
pub inline fn glViewportArrayv(arg_8558: GLuint, arg_8559: GLsizei, arg_8560: [*c]const GLfloat) void {
    return glad_glViewportArrayv.?(arg_8558, arg_8559, arg_8560);
}
pub inline fn glViewportIndexedf(arg_8561: GLuint, arg_8562: GLfloat, arg_8563: GLfloat, arg_8564: GLfloat, arg_8565: GLfloat) void {
    return glad_glViewportIndexedf.?(arg_8561, arg_8562, arg_8563, arg_8564, arg_8565);
}
pub inline fn glViewportIndexedfv(arg_8566: GLuint, arg_8567: [*c]const GLfloat) void {
    return glad_glViewportIndexedfv.?(arg_8566, arg_8567);
}
pub inline fn glViewportPositionWScaleNV(arg_8568: GLuint, arg_8569: GLfloat, arg_8570: GLfloat) void {
    return glad_glViewportPositionWScaleNV.?(arg_8568, arg_8569, arg_8570);
}
pub inline fn glViewportSwizzleNV(arg_8571: GLuint, arg_8572: GLenum, arg_8573: GLenum, arg_8574: GLenum, arg_8575: GLenum) void {
    return glad_glViewportSwizzleNV.?(arg_8571, arg_8572, arg_8573, arg_8574, arg_8575);
}
pub inline fn glWaitSemaphoreEXT(arg_8576: GLuint, arg_8577: GLuint, arg_8578: [*c]const GLuint, arg_8579: GLuint, arg_8580: [*c]const GLuint, arg_8581: [*c]const GLenum) void {
    return glad_glWaitSemaphoreEXT.?(arg_8576, arg_8577, arg_8578, arg_8579, arg_8580, arg_8581);
}
pub inline fn glWaitSemaphoreui64NVX(arg_8582: GLuint, arg_8583: GLsizei, arg_8584: [*c]const GLuint, arg_8585: [*c]const GLuint64) void {
    return glad_glWaitSemaphoreui64NVX.?(arg_8582, arg_8583, arg_8584, arg_8585);
}
pub inline fn glWaitSync(arg_8586: GLsync, arg_8587: GLbitfield, arg_8588: GLuint64) void {
    return glad_glWaitSync.?(arg_8586, arg_8587, arg_8588);
}
pub inline fn glWaitVkSemaphoreNV(arg_8589: GLuint64) void {
    return glad_glWaitVkSemaphoreNV.?(arg_8589);
}
pub inline fn glWeightPathsNV(arg_8590: GLuint, arg_8591: GLsizei, arg_8592: [*c]const GLuint, arg_8593: [*c]const GLfloat) void {
    return glad_glWeightPathsNV.?(arg_8590, arg_8591, arg_8592, arg_8593);
}
pub inline fn glWeightPointerARB(arg_8594: GLint, arg_8595: GLenum, arg_8596: GLsizei, arg_8597: ?*const anyopaque) void {
    return glad_glWeightPointerARB.?(arg_8594, arg_8595, arg_8596, arg_8597);
}
pub inline fn glWeightbvARB(arg_8598: GLint, arg_8599: [*c]const GLbyte) void {
    return glad_glWeightbvARB.?(arg_8598, arg_8599);
}
pub inline fn glWeightdvARB(arg_8600: GLint, arg_8601: [*c]const GLdouble) void {
    return glad_glWeightdvARB.?(arg_8600, arg_8601);
}
pub inline fn glWeightfvARB(arg_8602: GLint, arg_8603: [*c]const GLfloat) void {
    return glad_glWeightfvARB.?(arg_8602, arg_8603);
}
pub inline fn glWeightivARB(arg_8604: GLint, arg_8605: [*c]const GLint) void {
    return glad_glWeightivARB.?(arg_8604, arg_8605);
}
pub inline fn glWeightsvARB(arg_8606: GLint, arg_8607: [*c]const GLshort) void {
    return glad_glWeightsvARB.?(arg_8606, arg_8607);
}
pub inline fn glWeightubvARB(arg_8608: GLint, arg_8609: [*c]const GLubyte) void {
    return glad_glWeightubvARB.?(arg_8608, arg_8609);
}
pub inline fn glWeightuivARB(arg_8610: GLint, arg_8611: [*c]const GLuint) void {
    return glad_glWeightuivARB.?(arg_8610, arg_8611);
}
pub inline fn glWeightusvARB(arg_8612: GLint, arg_8613: [*c]const GLushort) void {
    return glad_glWeightusvARB.?(arg_8612, arg_8613);
}
pub inline fn glWindowPos2dARB(arg_8614: GLdouble, arg_8615: GLdouble) void {
    return glad_glWindowPos2dARB.?(arg_8614, arg_8615);
}
pub inline fn glWindowPos2dMESA(arg_8616: GLdouble, arg_8617: GLdouble) void {
    return glad_glWindowPos2dMESA.?(arg_8616, arg_8617);
}
pub inline fn glWindowPos2dvARB(arg_8618: [*c]const GLdouble) void {
    return glad_glWindowPos2dvARB.?(arg_8618);
}
pub inline fn glWindowPos2dvMESA(arg_8619: [*c]const GLdouble) void {
    return glad_glWindowPos2dvMESA.?(arg_8619);
}
pub inline fn glWindowPos2fARB(arg_8620: GLfloat, arg_8621: GLfloat) void {
    return glad_glWindowPos2fARB.?(arg_8620, arg_8621);
}
pub inline fn glWindowPos2fMESA(arg_8622: GLfloat, arg_8623: GLfloat) void {
    return glad_glWindowPos2fMESA.?(arg_8622, arg_8623);
}
pub inline fn glWindowPos2fvARB(arg_8624: [*c]const GLfloat) void {
    return glad_glWindowPos2fvARB.?(arg_8624);
}
pub inline fn glWindowPos2fvMESA(arg_8625: [*c]const GLfloat) void {
    return glad_glWindowPos2fvMESA.?(arg_8625);
}
pub inline fn glWindowPos2iARB(arg_8626: GLint, arg_8627: GLint) void {
    return glad_glWindowPos2iARB.?(arg_8626, arg_8627);
}
pub inline fn glWindowPos2iMESA(arg_8628: GLint, arg_8629: GLint) void {
    return glad_glWindowPos2iMESA.?(arg_8628, arg_8629);
}
pub inline fn glWindowPos2ivARB(arg_8630: [*c]const GLint) void {
    return glad_glWindowPos2ivARB.?(arg_8630);
}
pub inline fn glWindowPos2ivMESA(arg_8631: [*c]const GLint) void {
    return glad_glWindowPos2ivMESA.?(arg_8631);
}
pub inline fn glWindowPos2sARB(arg_8632: GLshort, arg_8633: GLshort) void {
    return glad_glWindowPos2sARB.?(arg_8632, arg_8633);
}
pub inline fn glWindowPos2sMESA(arg_8634: GLshort, arg_8635: GLshort) void {
    return glad_glWindowPos2sMESA.?(arg_8634, arg_8635);
}
pub inline fn glWindowPos2svARB(arg_8636: [*c]const GLshort) void {
    return glad_glWindowPos2svARB.?(arg_8636);
}
pub inline fn glWindowPos2svMESA(arg_8637: [*c]const GLshort) void {
    return glad_glWindowPos2svMESA.?(arg_8637);
}
pub inline fn glWindowPos3dARB(arg_8638: GLdouble, arg_8639: GLdouble, arg_8640: GLdouble) void {
    return glad_glWindowPos3dARB.?(arg_8638, arg_8639, arg_8640);
}
pub inline fn glWindowPos3dMESA(arg_8641: GLdouble, arg_8642: GLdouble, arg_8643: GLdouble) void {
    return glad_glWindowPos3dMESA.?(arg_8641, arg_8642, arg_8643);
}
pub inline fn glWindowPos3dvARB(arg_8644: [*c]const GLdouble) void {
    return glad_glWindowPos3dvARB.?(arg_8644);
}
pub inline fn glWindowPos3dvMESA(arg_8645: [*c]const GLdouble) void {
    return glad_glWindowPos3dvMESA.?(arg_8645);
}
pub inline fn glWindowPos3fARB(arg_8646: GLfloat, arg_8647: GLfloat, arg_8648: GLfloat) void {
    return glad_glWindowPos3fARB.?(arg_8646, arg_8647, arg_8648);
}
pub inline fn glWindowPos3fMESA(arg_8649: GLfloat, arg_8650: GLfloat, arg_8651: GLfloat) void {
    return glad_glWindowPos3fMESA.?(arg_8649, arg_8650, arg_8651);
}
pub inline fn glWindowPos3fvARB(arg_8652: [*c]const GLfloat) void {
    return glad_glWindowPos3fvARB.?(arg_8652);
}
pub inline fn glWindowPos3fvMESA(arg_8653: [*c]const GLfloat) void {
    return glad_glWindowPos3fvMESA.?(arg_8653);
}
pub inline fn glWindowPos3iARB(arg_8654: GLint, arg_8655: GLint, arg_8656: GLint) void {
    return glad_glWindowPos3iARB.?(arg_8654, arg_8655, arg_8656);
}
pub inline fn glWindowPos3iMESA(arg_8657: GLint, arg_8658: GLint, arg_8659: GLint) void {
    return glad_glWindowPos3iMESA.?(arg_8657, arg_8658, arg_8659);
}
pub inline fn glWindowPos3ivARB(arg_8660: [*c]const GLint) void {
    return glad_glWindowPos3ivARB.?(arg_8660);
}
pub inline fn glWindowPos3ivMESA(arg_8661: [*c]const GLint) void {
    return glad_glWindowPos3ivMESA.?(arg_8661);
}
pub inline fn glWindowPos3sARB(arg_8662: GLshort, arg_8663: GLshort, arg_8664: GLshort) void {
    return glad_glWindowPos3sARB.?(arg_8662, arg_8663, arg_8664);
}
pub inline fn glWindowPos3sMESA(arg_8665: GLshort, arg_8666: GLshort, arg_8667: GLshort) void {
    return glad_glWindowPos3sMESA.?(arg_8665, arg_8666, arg_8667);
}
pub inline fn glWindowPos3svARB(arg_8668: [*c]const GLshort) void {
    return glad_glWindowPos3svARB.?(arg_8668);
}
pub inline fn glWindowPos3svMESA(arg_8669: [*c]const GLshort) void {
    return glad_glWindowPos3svMESA.?(arg_8669);
}
pub inline fn glWindowPos4dMESA(arg_8670: GLdouble, arg_8671: GLdouble, arg_8672: GLdouble, arg_8673: GLdouble) void {
    return glad_glWindowPos4dMESA.?(arg_8670, arg_8671, arg_8672, arg_8673);
}
pub inline fn glWindowPos4dvMESA(arg_8674: [*c]const GLdouble) void {
    return glad_glWindowPos4dvMESA.?(arg_8674);
}
pub inline fn glWindowPos4fMESA(arg_8675: GLfloat, arg_8676: GLfloat, arg_8677: GLfloat, arg_8678: GLfloat) void {
    return glad_glWindowPos4fMESA.?(arg_8675, arg_8676, arg_8677, arg_8678);
}
pub inline fn glWindowPos4fvMESA(arg_8679: [*c]const GLfloat) void {
    return glad_glWindowPos4fvMESA.?(arg_8679);
}
pub inline fn glWindowPos4iMESA(arg_8680: GLint, arg_8681: GLint, arg_8682: GLint, arg_8683: GLint) void {
    return glad_glWindowPos4iMESA.?(arg_8680, arg_8681, arg_8682, arg_8683);
}
pub inline fn glWindowPos4ivMESA(arg_8684: [*c]const GLint) void {
    return glad_glWindowPos4ivMESA.?(arg_8684);
}
pub inline fn glWindowPos4sMESA(arg_8685: GLshort, arg_8686: GLshort, arg_8687: GLshort, arg_8688: GLshort) void {
    return glad_glWindowPos4sMESA.?(arg_8685, arg_8686, arg_8687, arg_8688);
}
pub inline fn glWindowPos4svMESA(arg_8689: [*c]const GLshort) void {
    return glad_glWindowPos4svMESA.?(arg_8689);
}
pub inline fn glWindowRectanglesEXT(arg_8690: GLenum, arg_8691: GLsizei, arg_8692: [*c]const GLint) void {
    return glad_glWindowRectanglesEXT.?(arg_8690, arg_8691, arg_8692);
}
pub inline fn glWriteMaskEXT(arg_8693: GLuint, arg_8694: GLuint, arg_8695: GLenum, arg_8696: GLenum, arg_8697: GLenum, arg_8698: GLenum) void {
    return glad_glWriteMaskEXT.?(arg_8693, arg_8694, arg_8695, arg_8696, arg_8697, arg_8698);
}
pub const _glfw3_h_ = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const APIENTRY = __stdcall;
pub const GLFW_APIENTRY_DEFINED = "";
pub const GLFW_WINGDIAPI_DEFINED = "";
pub const CALLBACK = __stdcall;
pub const GLFW_CALLBACK_DEFINED = "";
pub const GLFWAPI = "";
pub const GLFW_VERSION_MAJOR = @as(c_int, 3);
pub const GLFW_VERSION_MINOR = @as(c_int, 3);
pub const GLFW_VERSION_REVISION = @as(c_int, 8);
pub const GLFW_TRUE = @as(c_int, 1);
pub const GLFW_FALSE = @as(c_int, 0);
pub const GLFW_RELEASE = @as(c_int, 0);
pub const GLFW_PRESS = @as(c_int, 1);
pub const GLFW_REPEAT = @as(c_int, 2);
pub const GLFW_HAT_CENTERED = @as(c_int, 0);
pub const GLFW_HAT_UP = @as(c_int, 1);
pub const GLFW_HAT_RIGHT = @as(c_int, 2);
pub const GLFW_HAT_DOWN = @as(c_int, 4);
pub const GLFW_HAT_LEFT = @as(c_int, 8);
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_KEY_UNKNOWN = -@as(c_int, 1);
pub const GLFW_KEY_SPACE = @as(c_int, 32);
pub const GLFW_KEY_APOSTROPHE = @as(c_int, 39);
pub const GLFW_KEY_COMMA = @as(c_int, 44);
pub const GLFW_KEY_MINUS = @as(c_int, 45);
pub const GLFW_KEY_PERIOD = @as(c_int, 46);
pub const GLFW_KEY_SLASH = @as(c_int, 47);
pub const GLFW_KEY_0 = @as(c_int, 48);
pub const GLFW_KEY_1 = @as(c_int, 49);
pub const GLFW_KEY_2 = @as(c_int, 50);
pub const GLFW_KEY_3 = @as(c_int, 51);
pub const GLFW_KEY_4 = @as(c_int, 52);
pub const GLFW_KEY_5 = @as(c_int, 53);
pub const GLFW_KEY_6 = @as(c_int, 54);
pub const GLFW_KEY_7 = @as(c_int, 55);
pub const GLFW_KEY_8 = @as(c_int, 56);
pub const GLFW_KEY_9 = @as(c_int, 57);
pub const GLFW_KEY_SEMICOLON = @as(c_int, 59);
pub const GLFW_KEY_EQUAL = @as(c_int, 61);
pub const GLFW_KEY_A = @as(c_int, 65);
pub const GLFW_KEY_B = @as(c_int, 66);
pub const GLFW_KEY_C = @as(c_int, 67);
pub const GLFW_KEY_D = @as(c_int, 68);
pub const GLFW_KEY_E = @as(c_int, 69);
pub const GLFW_KEY_F = @as(c_int, 70);
pub const GLFW_KEY_G = @as(c_int, 71);
pub const GLFW_KEY_H = @as(c_int, 72);
pub const GLFW_KEY_I = @as(c_int, 73);
pub const GLFW_KEY_J = @as(c_int, 74);
pub const GLFW_KEY_K = @as(c_int, 75);
pub const GLFW_KEY_L = @as(c_int, 76);
pub const GLFW_KEY_M = @as(c_int, 77);
pub const GLFW_KEY_N = @as(c_int, 78);
pub const GLFW_KEY_O = @as(c_int, 79);
pub const GLFW_KEY_P = @as(c_int, 80);
pub const GLFW_KEY_Q = @as(c_int, 81);
pub const GLFW_KEY_R = @as(c_int, 82);
pub const GLFW_KEY_S = @as(c_int, 83);
pub const GLFW_KEY_T = @as(c_int, 84);
pub const GLFW_KEY_U = @as(c_int, 85);
pub const GLFW_KEY_V = @as(c_int, 86);
pub const GLFW_KEY_W = @as(c_int, 87);
pub const GLFW_KEY_X = @as(c_int, 88);
pub const GLFW_KEY_Y = @as(c_int, 89);
pub const GLFW_KEY_Z = @as(c_int, 90);
pub const GLFW_KEY_LEFT_BRACKET = @as(c_int, 91);
pub const GLFW_KEY_BACKSLASH = @as(c_int, 92);
pub const GLFW_KEY_RIGHT_BRACKET = @as(c_int, 93);
pub const GLFW_KEY_GRAVE_ACCENT = @as(c_int, 96);
pub const GLFW_KEY_WORLD_1 = @as(c_int, 161);
pub const GLFW_KEY_WORLD_2 = @as(c_int, 162);
pub const GLFW_KEY_ESCAPE = @as(c_int, 256);
pub const GLFW_KEY_ENTER = @as(c_int, 257);
pub const GLFW_KEY_TAB = @as(c_int, 258);
pub const GLFW_KEY_BACKSPACE = @as(c_int, 259);
pub const GLFW_KEY_INSERT = @as(c_int, 260);
pub const GLFW_KEY_DELETE = @as(c_int, 261);
pub const GLFW_KEY_RIGHT = @as(c_int, 262);
pub const GLFW_KEY_LEFT = @as(c_int, 263);
pub const GLFW_KEY_DOWN = @as(c_int, 264);
pub const GLFW_KEY_UP = @as(c_int, 265);
pub const GLFW_KEY_PAGE_UP = @as(c_int, 266);
pub const GLFW_KEY_PAGE_DOWN = @as(c_int, 267);
pub const GLFW_KEY_HOME = @as(c_int, 268);
pub const GLFW_KEY_END = @as(c_int, 269);
pub const GLFW_KEY_CAPS_LOCK = @as(c_int, 280);
pub const GLFW_KEY_SCROLL_LOCK = @as(c_int, 281);
pub const GLFW_KEY_NUM_LOCK = @as(c_int, 282);
pub const GLFW_KEY_PRINT_SCREEN = @as(c_int, 283);
pub const GLFW_KEY_PAUSE = @as(c_int, 284);
pub const GLFW_KEY_F1 = @as(c_int, 290);
pub const GLFW_KEY_F2 = @as(c_int, 291);
pub const GLFW_KEY_F3 = @as(c_int, 292);
pub const GLFW_KEY_F4 = @as(c_int, 293);
pub const GLFW_KEY_F5 = @as(c_int, 294);
pub const GLFW_KEY_F6 = @as(c_int, 295);
pub const GLFW_KEY_F7 = @as(c_int, 296);
pub const GLFW_KEY_F8 = @as(c_int, 297);
pub const GLFW_KEY_F9 = @as(c_int, 298);
pub const GLFW_KEY_F10 = @as(c_int, 299);
pub const GLFW_KEY_F11 = @as(c_int, 300);
pub const GLFW_KEY_F12 = @as(c_int, 301);
pub const GLFW_KEY_F13 = @as(c_int, 302);
pub const GLFW_KEY_F14 = @as(c_int, 303);
pub const GLFW_KEY_F15 = @as(c_int, 304);
pub const GLFW_KEY_F16 = @as(c_int, 305);
pub const GLFW_KEY_F17 = @as(c_int, 306);
pub const GLFW_KEY_F18 = @as(c_int, 307);
pub const GLFW_KEY_F19 = @as(c_int, 308);
pub const GLFW_KEY_F20 = @as(c_int, 309);
pub const GLFW_KEY_F21 = @as(c_int, 310);
pub const GLFW_KEY_F22 = @as(c_int, 311);
pub const GLFW_KEY_F23 = @as(c_int, 312);
pub const GLFW_KEY_F24 = @as(c_int, 313);
pub const GLFW_KEY_F25 = @as(c_int, 314);
pub const GLFW_KEY_KP_0 = @as(c_int, 320);
pub const GLFW_KEY_KP_1 = @as(c_int, 321);
pub const GLFW_KEY_KP_2 = @as(c_int, 322);
pub const GLFW_KEY_KP_3 = @as(c_int, 323);
pub const GLFW_KEY_KP_4 = @as(c_int, 324);
pub const GLFW_KEY_KP_5 = @as(c_int, 325);
pub const GLFW_KEY_KP_6 = @as(c_int, 326);
pub const GLFW_KEY_KP_7 = @as(c_int, 327);
pub const GLFW_KEY_KP_8 = @as(c_int, 328);
pub const GLFW_KEY_KP_9 = @as(c_int, 329);
pub const GLFW_KEY_KP_DECIMAL = @as(c_int, 330);
pub const GLFW_KEY_KP_DIVIDE = @as(c_int, 331);
pub const GLFW_KEY_KP_MULTIPLY = @as(c_int, 332);
pub const GLFW_KEY_KP_SUBTRACT = @as(c_int, 333);
pub const GLFW_KEY_KP_ADD = @as(c_int, 334);
pub const GLFW_KEY_KP_ENTER = @as(c_int, 335);
pub const GLFW_KEY_KP_EQUAL = @as(c_int, 336);
pub const GLFW_KEY_LEFT_SHIFT = @as(c_int, 340);
pub const GLFW_KEY_LEFT_CONTROL = @as(c_int, 341);
pub const GLFW_KEY_LEFT_ALT = @as(c_int, 342);
pub const GLFW_KEY_LEFT_SUPER = @as(c_int, 343);
pub const GLFW_KEY_RIGHT_SHIFT = @as(c_int, 344);
pub const GLFW_KEY_RIGHT_CONTROL = @as(c_int, 345);
pub const GLFW_KEY_RIGHT_ALT = @as(c_int, 346);
pub const GLFW_KEY_RIGHT_SUPER = @as(c_int, 347);
pub const GLFW_KEY_MENU = @as(c_int, 348);
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const GLFW_MOD_SHIFT = @as(c_int, 0x0001);
pub const GLFW_MOD_CONTROL = @as(c_int, 0x0002);
pub const GLFW_MOD_ALT = @as(c_int, 0x0004);
pub const GLFW_MOD_SUPER = @as(c_int, 0x0008);
pub const GLFW_MOD_CAPS_LOCK = @as(c_int, 0x0010);
pub const GLFW_MOD_NUM_LOCK = @as(c_int, 0x0020);
pub const GLFW_MOUSE_BUTTON_1 = @as(c_int, 0);
pub const GLFW_MOUSE_BUTTON_2 = @as(c_int, 1);
pub const GLFW_MOUSE_BUTTON_3 = @as(c_int, 2);
pub const GLFW_MOUSE_BUTTON_4 = @as(c_int, 3);
pub const GLFW_MOUSE_BUTTON_5 = @as(c_int, 4);
pub const GLFW_MOUSE_BUTTON_6 = @as(c_int, 5);
pub const GLFW_MOUSE_BUTTON_7 = @as(c_int, 6);
pub const GLFW_MOUSE_BUTTON_8 = @as(c_int, 7);
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const GLFW_JOYSTICK_1 = @as(c_int, 0);
pub const GLFW_JOYSTICK_2 = @as(c_int, 1);
pub const GLFW_JOYSTICK_3 = @as(c_int, 2);
pub const GLFW_JOYSTICK_4 = @as(c_int, 3);
pub const GLFW_JOYSTICK_5 = @as(c_int, 4);
pub const GLFW_JOYSTICK_6 = @as(c_int, 5);
pub const GLFW_JOYSTICK_7 = @as(c_int, 6);
pub const GLFW_JOYSTICK_8 = @as(c_int, 7);
pub const GLFW_JOYSTICK_9 = @as(c_int, 8);
pub const GLFW_JOYSTICK_10 = @as(c_int, 9);
pub const GLFW_JOYSTICK_11 = @as(c_int, 10);
pub const GLFW_JOYSTICK_12 = @as(c_int, 11);
pub const GLFW_JOYSTICK_13 = @as(c_int, 12);
pub const GLFW_JOYSTICK_14 = @as(c_int, 13);
pub const GLFW_JOYSTICK_15 = @as(c_int, 14);
pub const GLFW_JOYSTICK_16 = @as(c_int, 15);
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const GLFW_GAMEPAD_BUTTON_A = @as(c_int, 0);
pub const GLFW_GAMEPAD_BUTTON_B = @as(c_int, 1);
pub const GLFW_GAMEPAD_BUTTON_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_BUTTON_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = @as(c_int, 4);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = @as(c_int, 5);
pub const GLFW_GAMEPAD_BUTTON_BACK = @as(c_int, 6);
pub const GLFW_GAMEPAD_BUTTON_START = @as(c_int, 7);
pub const GLFW_GAMEPAD_BUTTON_GUIDE = @as(c_int, 8);
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = @as(c_int, 9);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = @as(c_int, 10);
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = @as(c_int, 11);
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = @as(c_int, 12);
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = @as(c_int, 13);
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = @as(c_int, 14);
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = @as(c_int, 0);
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = @as(c_int, 1);
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = @as(c_int, 4);
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = @as(c_int, 5);
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_NO_ERROR = @as(c_int, 0);
pub const GLFW_NOT_INITIALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010001, .hexadecimal);
pub const GLFW_NO_CURRENT_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010002, .hexadecimal);
pub const GLFW_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010003, .hexadecimal);
pub const GLFW_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010004, .hexadecimal);
pub const GLFW_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010005, .hexadecimal);
pub const GLFW_API_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010006, .hexadecimal);
pub const GLFW_VERSION_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hexadecimal);
pub const GLFW_PLATFORM_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010008, .hexadecimal);
pub const GLFW_FORMAT_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010009, .hexadecimal);
pub const GLFW_NO_WINDOW_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000A, .hexadecimal);
pub const GLFW_FOCUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020001, .hexadecimal);
pub const GLFW_ICONIFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020002, .hexadecimal);
pub const GLFW_RESIZABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020003, .hexadecimal);
pub const GLFW_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020004, .hexadecimal);
pub const GLFW_DECORATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020005, .hexadecimal);
pub const GLFW_AUTO_ICONIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020006, .hexadecimal);
pub const GLFW_FLOATING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020007, .hexadecimal);
pub const GLFW_MAXIMIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020008, .hexadecimal);
pub const GLFW_CENTER_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020009, .hexadecimal);
pub const GLFW_TRANSPARENT_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000A, .hexadecimal);
pub const GLFW_HOVERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000B, .hexadecimal);
pub const GLFW_FOCUS_ON_SHOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000C, .hexadecimal);
pub const GLFW_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021001, .hexadecimal);
pub const GLFW_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021002, .hexadecimal);
pub const GLFW_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021003, .hexadecimal);
pub const GLFW_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021004, .hexadecimal);
pub const GLFW_DEPTH_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021005, .hexadecimal);
pub const GLFW_STENCIL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021006, .hexadecimal);
pub const GLFW_ACCUM_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021007, .hexadecimal);
pub const GLFW_ACCUM_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021008, .hexadecimal);
pub const GLFW_ACCUM_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021009, .hexadecimal);
pub const GLFW_ACCUM_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100A, .hexadecimal);
pub const GLFW_AUX_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100B, .hexadecimal);
pub const GLFW_STEREO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100C, .hexadecimal);
pub const GLFW_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100D, .hexadecimal);
pub const GLFW_SRGB_CAPABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100E, .hexadecimal);
pub const GLFW_REFRESH_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100F, .hexadecimal);
pub const GLFW_DOUBLEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021010, .hexadecimal);
pub const GLFW_CLIENT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022001, .hexadecimal);
pub const GLFW_CONTEXT_VERSION_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022002, .hexadecimal);
pub const GLFW_CONTEXT_VERSION_MINOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022003, .hexadecimal);
pub const GLFW_CONTEXT_REVISION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022004, .hexadecimal);
pub const GLFW_CONTEXT_ROBUSTNESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022005, .hexadecimal);
pub const GLFW_OPENGL_FORWARD_COMPAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022006, .hexadecimal);
pub const GLFW_OPENGL_DEBUG_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022007, .hexadecimal);
pub const GLFW_OPENGL_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022008, .hexadecimal);
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022009, .hexadecimal);
pub const GLFW_CONTEXT_NO_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200A, .hexadecimal);
pub const GLFW_CONTEXT_CREATION_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200B, .hexadecimal);
pub const GLFW_SCALE_TO_MONITOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200C, .hexadecimal);
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023001, .hexadecimal);
pub const GLFW_COCOA_FRAME_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023002, .hexadecimal);
pub const GLFW_COCOA_GRAPHICS_SWITCHING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023003, .hexadecimal);
pub const GLFW_X11_CLASS_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024001, .hexadecimal);
pub const GLFW_X11_INSTANCE_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024002, .hexadecimal);
pub const GLFW_NO_API = @as(c_int, 0);
pub const GLFW_OPENGL_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030001, .hexadecimal);
pub const GLFW_OPENGL_ES_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030002, .hexadecimal);
pub const GLFW_NO_ROBUSTNESS = @as(c_int, 0);
pub const GLFW_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031001, .hexadecimal);
pub const GLFW_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031002, .hexadecimal);
pub const GLFW_OPENGL_ANY_PROFILE = @as(c_int, 0);
pub const GLFW_OPENGL_CORE_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032001, .hexadecimal);
pub const GLFW_OPENGL_COMPAT_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032002, .hexadecimal);
pub const GLFW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033001, .hexadecimal);
pub const GLFW_STICKY_KEYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033002, .hexadecimal);
pub const GLFW_STICKY_MOUSE_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033003, .hexadecimal);
pub const GLFW_LOCK_KEY_MODS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033004, .hexadecimal);
pub const GLFW_RAW_MOUSE_MOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033005, .hexadecimal);
pub const GLFW_CURSOR_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034001, .hexadecimal);
pub const GLFW_CURSOR_HIDDEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034002, .hexadecimal);
pub const GLFW_CURSOR_DISABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034003, .hexadecimal);
pub const GLFW_ANY_RELEASE_BEHAVIOR = @as(c_int, 0);
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035001, .hexadecimal);
pub const GLFW_RELEASE_BEHAVIOR_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035002, .hexadecimal);
pub const GLFW_NATIVE_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hexadecimal);
pub const GLFW_EGL_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hexadecimal);
pub const GLFW_OSMESA_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hexadecimal);
pub const GLFW_ARROW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hexadecimal);
pub const GLFW_IBEAM_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hexadecimal);
pub const GLFW_CROSSHAIR_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hexadecimal);
pub const GLFW_HAND_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036004, .hexadecimal);
pub const GLFW_HRESIZE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036005, .hexadecimal);
pub const GLFW_VRESIZE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036006, .hexadecimal);
pub const GLFW_CONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040001, .hexadecimal);
pub const GLFW_DISCONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040002, .hexadecimal);
pub const GLFW_JOYSTICK_HAT_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050001, .hexadecimal);
pub const GLFW_COCOA_CHDIR_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051001, .hexadecimal);
pub const GLFW_COCOA_MENUBAR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051002, .hexadecimal);
pub const GLFW_DONT_CARE = -@as(c_int, 1);
pub const tagLC_ID = struct_tagLC_ID;
pub const lconv = struct_lconv;
pub const __lc_time_data = struct___lc_time_data;
pub const threadlocaleinfostruct = struct_threadlocaleinfostruct;
pub const threadmbcinfostruct = struct_threadmbcinfostruct;
pub const localeinfo_struct = struct_localeinfo_struct;
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
